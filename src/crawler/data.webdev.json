[
  {
    "title": "Sharing a state between windows without a server",
    "url": "https://dev.to/notachraf/sharing-a-state-between-windows-without-a-serve-23an",
    "tags": ["webdev", "javascript", "programming", "tutorial"],
    "published_at": 1703342872000,
    "markdownContent": "Recently, there was a gif trending on social networks displaying an [amazing piece of art made by Bjorn Staal](https://twitter.com/_nonfigurativ_/status/1727322594570027343).\n\n[![Bjorn Staal art piece](https://res.cloudinary.com/practicaldev/image/fetch/s--NZTOoCoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AvCKb_XLed3eD9y4h-yjdKQ.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--NZTOoCoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AvCKb_XLed3eD9y4h-yjdKQ.gif)\n\nI wanted to recreate it, but lacking the 3D skills for the sphere, particles, and physics, I aimed to understand how to make a window react to the position of another window.\n\nEssentially, sharing a state between multiple windows, which I find to be one of the coolest aspects of Bjorn’s project!  \nUnable to find a good article or tutorial on the topic, I decided to share my findings with you.\n\n> Let’s attempt to create a simplified Proof of Concept (POC) based on Bjorn’s work!\n\n[![What we’ll try to create ( ofc it’s way less sexy than Bjorn’s work )](https://res.cloudinary.com/practicaldev/image/fetch/s--mG4QZD-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AKJHO9DmEDcTISWuCcvDpMQ.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--mG4QZD-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AKJHO9DmEDcTISWuCcvDpMQ.gif)\n\nThe first thing I did was to list all the ways I know for sharing information between multiple clients:\n\n## [](#duh-a-server)Duh: A server\n\nObviously, having a server (either with polling or websockets) would simplify the problem. However, since Bjorn achieved his result without using a server, this was out of the question.\n\n## [](#local-storage)Local Storage\n\nLocal Storage is essentially a browser key-value store, commonly used for persisting information between browser sessions. While typically used for storing Auth Tokens or Redirect URLs, it can store anything serializable. [You can learn more about it here](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage).\n\nI recently discovered some fun APIs of Local Storage, including the _`storage`_ event, which fires whenever the Local Storage is changed by another session of the same website.\n\n_Wanna Discover new APIs ?_  \n[Subscribe to my Newsletter ( for free ! )](https://notachraf.substack.com)\n\n[![How the storage event works ( simplified of course )](https://res.cloudinary.com/practicaldev/image/fetch/s--ao1AcQ-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/4048/1%2Aotw7fDvd-XFjj9yVBxn5zg.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ao1AcQ-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/4048/1%2Aotw7fDvd-XFjj9yVBxn5zg.png)\n\nWe can leverage this by storing the state of each window in the local storage. Whenever a window changes its state, other windows will be updated via the storage event.\n\nThis was my initial idea, and it seems to be the solution Bjorn chose, as he shared his LocalStorage manager code along with an example of using it with threeJs [here](https://github.com/bgstaal/multipleWindow3dScene).\n\nBut once I found out that there was code solving this problem, I wanted to see if there was another way… and spoiler alert: Yes, there is!\n\n## [](#shared-workers)Shared Workers\n\nBehind this flashy terminology is a fascinating concept — the concept of WebWorkers.\n\nIn simple terms, a worker is essentially a second script running on another thread. While they don’t have access to the DOM as they exist outside the HTML Document, they can still communicate with your main script.  \nThey are mostly used to offload the main script by handling background jobs, such as pre-fetching information or handling less critical tasks like streaming logs and polling.\n\n[![Simplified explanation of the mechanisms of communication between a script and a worker](https://res.cloudinary.com/practicaldev/image/fetch/s--E6EbB0o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/3548/1%2AizcnWc_p13m8pZy5d49mVw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--E6EbB0o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/3548/1%2AizcnWc_p13m8pZy5d49mVw.png)\n\nShared workers are a special kind of WebWorkers that can communicate with multiple instances of the same script, making them interesting for our use case! Okay, let’s dive right into the code!\n\n[![Shared workers can send information to multiple sessions of the same script](https://res.cloudinary.com/practicaldev/image/fetch/s--UjLFBmE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/5428/1%2AA7ObCM2OjojgfFP57ankyw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--UjLFBmE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/5428/1%2AA7ObCM2OjojgfFP57ankyw.png)\n\n### [](#setting-up-the-worker)Setting up the worker\n\nAs mentioned, workers are a “second script” with their own entry points. Depending on your setup (TypeScript, bundler, development server), you may need to tweak your tsconfig, add directives, or use specific import syntax.\n\nI can’t cover all the possible ways to use a web worker , but you can find the informations on MDN or the internet.  \nIf needed, I’d happily do a prequel to this article detailing all the ways to set them up!\n\nIn my case, I’m using Vite and TypeScript, so I need a `worker.ts` file and installing the `@types/sharedworker` as a dev dependency. We can create our connection in our main script using this syntax:  \n\n```typescript\nnew SharedWorker(new URL(\"worker.ts\", import.meta.url));\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nBasically, we need to:\n\n*   Identify each window\n    \n*   Keep track of all window states\n    \n*   Alert other windows to redraw once a window changes its state\n    \n\nOur state will be quite simple:  \n\n```typescript\ntype WindowState = {\n      screenX: number; // window.screenX\n      screenY: number; // window.screenY\n      width: number; // window.innerWidth\n      height: number; // window.innerHeight\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe most crucial information is, of course, `window.screenX` and `window.screenY` as they tell us where the window is relative to the top-left corner of your monitor.\n\nWe’ll have two types of messages:\n\n*   Each window, whenever it changes its state, will publish a `windowStateChangedmessage` with its new state.\n    \n*   The worker will send updates to all other windows to alert them that one of them has changed. The worker will send a `syncmessage` with the state of all windows.\n    \n\nWe can start with a plain worker looking a bit like this:  \n\n```typescript\n    // worker.ts \n    let windows: { windowState: WindowState; id: number; port: MessagePort }[] = [];\n\n    onconnect = ({ ports }) => {\n      const port = ports[0];\n\n      port.onmessage = function (event: MessageEvent<WorkerMessage>) {\n        console.log(\"We'll do something\");\n      };\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd our basic connection to the SharedWorker will look something like this. I have some basic functions that will generate an id, and calculate the current window state, also I did some typing on the kind of Message that we can use called WorkerMessage:  \n\n```typescript\n    // main.ts\n    import { WorkerMessage } from \"./types\";\n    import {\n      generateId,\n      getCurrentWindowState,\n    } from \"./windowState\";\n\n    const sharedWorker = new SharedWorker(new URL(\"worker.ts\", import.meta.url));\n    let currentWindow = getCurrentWindowState();\n    let id = generateId();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nOnce we start the application, we should alert the worker that there is a new window, so we send immediately a message:  \n\n```plaintext\n    // main.ts \n    sharedWorker.port.postMessage({\n      action: \"windowStateChanged\",\n      payload: {\n        id,\n        newWindow: currentWindow,\n      },\n    } satisfies WorkerMessage);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe can listen to this message on our worker side and change the onmessage accordingly. Basically, once the worker receives the windowStateChanged message, either it's a new window, and we append it to the state, or it's an old one that changed. Then we should alert everybody that the state has changed:  \n\n```typescript\n    // worker.ts\n    port.onmessage = function (event: MessageEvent<WorkerMessage>) {\n      const msg = event.data;\n      switch (msg.action) {\n        case \"windowStateChanged\": {\n          const { id, newWindow } = msg.payload;\n          const oldWindowIndex = windows.findIndex((w) => w.id === id);\n          if (oldWindowIndex !== -1) {\n            // old one changed\n            windows[oldWindowIndex].windowState = newWindow;\n          } else {\n            // new window \n            windows.push({ id, windowState: newWindow, port });\n          }\n          windows.forEach((w) =>\n            // send sync here \n          );\n          break;\n        }\n      }\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nTo send the sync, I actually need a bit of a hack, because the “port” property cannot be serialized, so I stringify it and parse it back. Because I’m lazy and I don’t just map the windows to a more serializable array:  \n\n```typescript\n    w.port.postMessage({\n      action: \"sync\",\n      payload: { allWindows: JSON.parse(JSON.stringify(windows)) },\n    } satisfies WorkerMessage);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow it’s time to draw stuff!\n\n## [](#the-fun-part-drawing-)The Fun Part : Drawing !\n\nOf course, we won’t be doing complicated 3D spheres : we’ll just draw a circle in the center of each window and a line linking between the spheres!\n\nI’ll be using the basic 2D Context of the HTML Canvas to draw, but you can use whatever you want. To draw a circle, it’s pretty simple:  \n\n```typescript\n    const drawCenterCircle = (ctx: CanvasRenderingContext2D, center: Coordinates) => {\n      const { x, y } = center;\n      ctx.strokeStyle = \"#eeeeee\";\n      ctx.lineWidth = 10;\n      ctx.beginPath();\n      ctx.arc(x, y, 100, 0, Math.PI * 2, false);\n      ctx.stroke();\n      ctx.closePath();\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd to draw the lines, we need to do a bit of math (I promise, it’s not a lot 🤓) by converting the relative position of the center of another window to coordinates on our current window.  \nBasically, we are changing bases. I do this using this bit of math. First, we will change the base to have coordinates on the monitor and offset that by the current window screenX/screenY\n\n[![Basically we are looking for the target position after base change](https://res.cloudinary.com/practicaldev/image/fetch/s--iFXSNnwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/5056/1%2AZg_z1aZxUE1WP-uOk1owdw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--iFXSNnwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/5056/1%2AZg_z1aZxUE1WP-uOk1owdw.png)  \n\n```typescript\n    const baseChange = ({\n      currentWindowOffset,\n      targetWindowOffset,\n      targetPosition,\n    }: {\n      currentWindowOffset: Coordinates;\n      targetWindowOffset: Coordinates;\n      targetPosition: Coordinates;\n    }) => {\n      const monitorCoordinate = {\n        x: targetPosition.x + targetWindowOffset.x,\n        y: targetPosition.y + targetWindowOffset.y,\n      };\n\n      const currentWindowCoordinate = {\n        x: monitorCoordinate.x - currentWindowOffset.x,\n        y: monitorCoordinate.y - currentWindowOffset.y,\n      };\n\n      return currentWindowCoordinate;\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd as you know, now we have two points on the same relative coordinates system, we can now draw the line !  \n\n```typescript\n    const drawConnectingLine = ({\n      ctx,\n      hostWindow,\n      targetWindow,\n    }: {\n      ctx: CanvasRenderingContext2D;\n      hostWindow: WindowState;\n      targetWindow: WindowState;\n    }) => {\n      ctx.strokeStyle = \"#ff0000\";\n      ctx.lineCap = \"round\";\n      const currentWindowOffset: Coordinates = {\n        x: hostWindow.screenX,\n        y: hostWindow.screenY,\n      };\n      const targetWindowOffset: Coordinates = {\n        x: targetWindow.screenX,\n        y: targetWindow.screenY,\n      };\n\n      const origin = getWindowCenter(hostWindow);\n      const target = getWindowCenter(targetWindow);\n\n      const targetWithBaseChange = baseChange({\n        currentWindowOffset,\n        targetWindowOffset,\n        targetPosition: target,\n      });\n\n      ctx.strokeStyle = \"#ff0000\";\n      ctx.lineCap = \"round\";\n      ctx.beginPath();\n      ctx.moveTo(origin.x, origin.y);\n      ctx.lineTo(targetWithBaseChange.x, targetWithBaseChange.y);\n      ctx.stroke();\n      ctx.closePath();\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd now, we just need to react to state changes.  \n\n```typescript\n    // main.ts\n    sharedWorker.port.onmessage = (event: MessageEvent<WorkerMessage>) => {\n        const msg = event.data;\n        switch (msg.action) {\n          case \"sync\": {\n            const windows = msg.payload.allWindows;\n            ctx.reset();\n            drawMainCircle(ctx, center);\n            windows\n              .forEach(({ windowState: targetWindow }) => {\n                drawConnectingLine({\n                  ctx,\n                  hostWindow: currentWindow,\n                  targetWindow,\n                });\n              });\n          }\n        }\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd as a final step, we just need to periodically check if our window changed and send a message if that’s the case  \n\n```typescript\n      setInterval(() => {\n        const newWindow = getCurrentWindowState();\n        if (\n          didWindowChange({\n            newWindow,\n            oldWindow: currentWindow,\n          })\n        ) {\n          sharedWorker.port.postMessage({\n            action: \"windowStateChanged\",\n            payload: {\n              id,\n              newWindow,\n            },\n          } satisfies WorkerMessage);\n          currentWindow = newWindow;\n        }\n      }, 100);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[You can find the whole code for this on this repository](https://github.com/achrafl0/multi-window-article). I actually made it a bit more abstract as I did a lot of experiments with it, but the gist of it is the same.\n\nAnd if you run it on multiple windows, hopefully, you can get the same thing as this!\n\n[![The full result](https://res.cloudinary.com/practicaldev/image/fetch/s--mG4QZD-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AKJHO9DmEDcTISWuCcvDpMQ.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--mG4QZD-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AKJHO9DmEDcTISWuCcvDpMQ.gif)\n\nThanks for reading !\n\nIf you found this article helpful, intersting or just fun, you can share it to your friends/coworkers/community  \n[You can also subscribe to my newsletter](https://notachraf.substack.com/) It's free !\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--ea2pXlMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://substackcdn.com/image/fetch/f_auto%2Cq_auto:best%2Cfl_progressive:steep/https%253A%252F%252Fnotachraf.substack.com%252Ftwitter%252Fsubscribe-card.jpg%253Fv%253D-764170094%2526version%253D9)](https://notachraf.substack.com/embed)\n\n## [The Degenerate Engineer | Achraf | Substack](https://notachraf.substack.com/embed)\n\nshitty newsletter by a braindead engineer: basically 60% Tech / 30% Human interactions / 10% internet lore. Click to read The Degenerate Engineer, by Achraf, a Substack publication with hundreds of subscribers.\n\n![favicon](https://res.cloudinary.com/practicaldev/image/fetch/s--o9OwR9CS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://substackcdn.com/icons/substack/favicon.ico) notachraf.substack.com\n\n## [](#edit)Edit:\n\nSome of you proposed another solution to this problem, namely using `BroadcastChannel API` and I wanted to give them a shoutout, mainly [@framemuse](https://dev.to/framemuse) and [@axiol](https://dev.to/axiol)  \nActually [@axiol](https://dev.to/axiol) did a full write up of the solution using the BroadcastChannel API that you can find here: [https://github.com/Axiol/linked-windows-broadcast-api](https://github.com/Axiol/linked-windows-broadcast-api)\n\nHuge thanks to them to help everyone else learn something new (starting from me)\n\n**Author**: [notachraf](https://dev.to/notachraf)",
    "shortDescription": "Recently, there was a gif trending on social networks displaying an amazing piece of art made by...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Sharing a state between windows without a server\">\n<meta property=\"og:description\" content=\"Recently, there was a gif trending on social networks displaying an amazing piece of art made by...\">\n<meta name=\"keywords\" content=\"webdev, javascript, programming, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cQDSy8qA--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8skuyne3l6gum3eud20z.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Sharing-a-state-between-windows-without-a-server",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8skuyne3l6gum3eud20z.gif"
  },
  {
    "title": "🔥 Top 12 libraries for your NextJS project 🏆",
    "url": "https://dev.to/nevodavid/top-12-libraries-for-your-nextjs-project-1oob",
    "tags": ["webdev", "javascript", "tutorial", "react"],
    "published_at": 1702381659000,
    "markdownContent": "[![Save](https://res.cloudinary.com/practicaldev/image/fetch/s--vWMU1ERd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szi0gw4l049yctxjeu1p.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--vWMU1ERd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szi0gw4l049yctxjeu1p.png)\n\nI have been a full-stack developer for the last decade, building smaller projects like [gitup](https://gitup.dev/) and bigger projects like [crosspublic](https://github.com/github-20k/crosspublic).\n\nOver the years, I have tested different tools to:\n\n1.  Be more productive\n2.  Have fewer bugs\n3.  Write less code\n\nI have curated a list of libraries to help you develop great NextJS stuff that I am using daily with an explanation of what you can do with them. **Let's dig in.**\n\n[![Be Better](https://res.cloudinary.com/practicaldev/image/fetch/s---FtvPJ1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap38q1ej3tqypjuebg3u.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s---FtvPJ1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap38q1ej3tqypjuebg3u.gif)\n\n* * *\n\n# [](#1-triggerdev)1\\. [Trigger.dev](https://github.com/triggerdotdev/trigger.dev)\n\nWith NextJS, I always needed help with everything connected to background jobs.\n\nIt can be a cron job running in the background to send emails or process new users’ funnels in the system.\n\nThat caused me to run another server to process those jobs, either an external EC2 server or a serverless function with an event bridge.  \nIt would cause me to pay for extra services (manage more services) and manage horizontal scaling myself (at some point).\n\n[Trigger.dev](http://Trigger.dev) changed that, offering background jobs on top of NextJS (and many others).  \nThey also know how to tackle NextJS serverless timeout limit to process long-running jobs.\n\n[Star Trigger.dev if you can 🥰](https://github.com/triggerdotdev/trigger.dev)\n\n[![TriggerDev](https://res.cloudinary.com/practicaldev/image/fetch/s--YgxRdEr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/triggertop.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--YgxRdEr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/triggertop.gif)\n\n* * *\n\n## [](#2-prisma)2\\. [Prisma](https://www.prisma.io)\n\nPrisma is not NextJS-specific. It's an ORM to work with your database.\n\nORM is a unified wrapper for DB queries.  \nIt keeps a good structure and lets you quickly change between different database providers.\n\nWhile there are a lot of ORMs you can use, Prisma is unique by offering Typescript support for your queries, making everything 100x faster. NextJS imbraced typescript in their default configuration, making it a perfect match.\n\n[Star Prisma if you can 🥰](https://github.com/prisma/prisma)\n\n[![prisma.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--jLFf_WGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/prisma.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--jLFf_WGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/prisma.gif)\n\n* * *\n\n## [](#3-nextauthjs)3\\. [NextAuth.js](https://next-auth.js.org)\n\nSuppose you want to implement any service provider authentication, such as Facebook / Google / GitHub (oAuth).\n\nIn that case, you must create your implementation for each provider or use an external service like [Auth0](https://auth0.com/) or [Clerk](https://clerk.com/).\n\nIf you are going to do it yourself, NextAuth provides a prosperous implementation so that you can easily add them by only providing the correct keys.\n\nThey also take care of authorization once you are logged in.  \n_Next.JS auth can work with Prisma out-of-the-box._\n\n[Star NextAuth if you can 🥰](https://github.com/nextauthjs/next-auth)\n\n[![authjs.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--rhQif20I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/authjs.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--rhQif20I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/authjs.gif)\n\n* * *\n\n## [](#4-nextsitemap)4\\. [Next-Sitemap](https://github.com/iamvishnusankar/next-sitemap)\n\nOnce you have deployed NextJS on your server, you need to help google index all the pages.\n\nIt's better if you can tell Google about all the pages on your website.\n\nFor that, you can create a sitemap.xml file listing all your pages.\n\nYou can easily use Next-Sitemap for that.\n\n[Star Next-Sitemap if you can 🥰](https://github.com/iamvishnusankar/next-sitemap)\n\n[![sitemap.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--mZCzzNhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/sitemap.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--mZCzzNhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/sitemap.gif)\n\n* * *\n\n## [](#5-next-seo)5\\. [Next SEO](https://github.com/garmeeh/next-seo)\n\nSEO is the process of making your website appear on the google feed for different queries by providing keywords, descriptions, and images to your website preview.\n\nIf you use the new NextJS app router, you might not need to use it.\n\nYou can use their `export metadata` approach or `generateMetadata`,  \nbut if you use the old app router, that's the best way to add SEO to your website.\n\n[Star Next SEO if you can 🥰](https://github.com/garmeeh/next-seo)\n\n[![seo.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--rbpSJ27_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/seo.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--rbpSJ27_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/seo.gif)\n\n* * *\n\n## [](#6-zod)6\\. [Zod](https://github.com/colinhacks/zod)\n\nZod is an object validator (both server and client).  \nYou can put different rules on an object and validate it later, such as username and password, or more complex things like the array length or conditions on other keys. _Zod is not NextJS specific._\n\nOver the years, I have seen a lot of object validators, such as [Yup](https://github.com/jquense/yup) and [class-validator](https://github.com/typestack/class-validator).\n\nYup, it looks not as maintained as Zod, and the class-validator is powerful when using things like NestJS - so you best go with Zod.\n\n[Star Zod if you can 🥰](https://github.com/colinhacks/zod)\n\n[![zod.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--zU3OvUff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/zod.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--zU3OvUff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/zod.gif)\n\n* * *\n\n## [](#7-reacthookform)7\\. [React-hook-form](https://github.com/react-hook-form/react-hook-form)\n\nWhile Zod can validate objects, it will not affect your client and backend without customized logic.\n\nReact-hook-form is an excellent project for client validation (showing errors on inputs, managing the input state, and submitting).\n\nOf course, you can use Zod as a validator for React-hook-form.\n\n[Star React Hook Form if you can 🥰](https://github.com/react-hook-form/react-hook-form)\n\n[![hookform.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4omIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/hookform.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4omIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/hookform.gif)\n\n* * *\n\n## [](#8-trpc)8\\. [tRPC](https://github.com/trpc/trpc)\n\nI would admit that I have never used tRPC before, but it looks like it's getting a lot of eyes today.\n\nIt has a similar concept as Prisma; they generate an interface for your request and response, so when you use frontend calls, you get that autocomplete.\n\nThat's great because it reduces the chance of bugs - let's say you modified a backend route, you won't be able to compile the project - the client will return an error of nonexisting parameters or response keys.\n\n[Star tRPC if you can 🥰](https://github.com/trpc/trpc)\n\n[![trpc.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--PVUrR9Qo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/trpc.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--PVUrR9Qo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/trpc.gif)\n\n* * *\n\n## [](#9-swr-and-reactquery)9\\. [SWR](https://swr.vercel.app) and [React-Query](https://github.com/TanStack/query)\n\nI have used Axios and fetch as base libraries for sending requests for years.\n\nSWR and React-Query enhance those libraries and offer hooks, caching, transformation, etc.\n\nHighly recommended for every project. Pay attention that those libraries are for client components (`use client`), not server components.\n\n[Star React Query if you can 🥰](https://github.com/TanStack/query)\n\n[![query.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--_HyPWCab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/query.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--_HyPWCab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/query.gif)\n\n* * *\n\n## [](#10-lodash)10\\. [lodash](https://lodash.com)\n\nThis is not a NextJS-specific library.  \nIt's a library for mutating data, and while JavaScript progressed a lot during the years with excellent native functions like flatMap, there are still things that are missing, such as unique array by key or chunking and array.\n\nI find myself using lodash for almost any project.\n\n[Star lodash if you can 🥰](https://github.com/lodash/lodash)\n\n[![lodash.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--FZox9NTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/lodash.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--FZox9NTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/lodash.gif)\n\n* * *\n\n## [](#11-dayjs)11\\. [dayjs](https://day.js.org/)\n\nday.js is a library for everything related to dates, formatting, timezones, etc.\n\nI might get roasted for that one. I have been working with `moment.js` for years.\n\nNow that it's not maintained anymore, dayjs is a good alternative.\n\nSome people prefer the new JS functions to deal with dates, but I still feel a significant gap exists between the dayjs options and the native JS date functions.\n\n[Star dayjs if you can 🥰](https://github.com/iamkun/dayjs)\n\n[![scrolldown.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--hpXRJWhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/scrolldown.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--hpXRJWhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/scrolldown.gif)\n\n* * *\n\n## [](#12-jsdom)12\\. [jsdom](https://github.com/jsdom/jsdom)\n\nThis is not a must, but I have been using it lately for many projects as an alternative to [cheerio](https://github.com/cheeriojs/cheerio).\n\nYou can take an entire page content (`<html><body>….</html>)` and turn it into an object you can manipulate later with the “native” javascript dom functions `querySelector`, `innerHTML`, etc…\n\nGreat for projects that require some scraping.\n\n[Star jsdom if you can 🥰](https://github.com/jsdom/jsdom)\n\n[![jsdomer.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--A6y-G2oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/jsdomer.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--A6y-G2oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/jsdomer.gif)\n\n* * *\n\nLet's connect on X? :)  \n[I'm here](https://twitter.com/nevodavid)\n\nDo you use some other cool libraries for NextJS?\n\nLet me know about them in the comments :)\n\n**Author**: [Nevo David](https://dev.to/nevodavid)",
    "shortDescription": "I have been a full-stack developer for the last decade, building smaller projects like gitup and...",
    "htmlMeta": "<meta property=\"og:title\" content=\"🔥 Top 12 libraries for your NextJS project 🏆\">\n<meta property=\"og:description\" content=\"I have been a full-stack developer for the last decade, building smaller projects like gitup and...\">\n<meta name=\"keywords\" content=\"webdev, javascript, tutorial, react, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iwBV--KU--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9b8cdyzavq8i52rf0rz.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Top-12-libraries-for-your-NextJS-project",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9b8cdyzavq8i52rf0rz.gif"
  },
  {
    "title": "✨23 Open-Source libraries to launch your portfolio (to the moon)🚀🚀",
    "url": "https://dev.to/copilotkit/23-open-source-libraries-to-launch-your-portfolio-to-the-moon-fe",
    "tags": ["webdev", "programming", "opensource", "productivity"],
    "published_at": 1702129672000,
    "markdownContent": "Contributing to a great open-source library is a great way to establish a portfolio.\n\nI've compiled 23 great open-source libraries and some good first issues to get started with.\n\nDON'T FORGET TO STAR & SUPPORT THESE🌟\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--hQ5FBtyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi3dd111pv2948ya21w2.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--hQ5FBtyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi3dd111pv2948ya21w2.gif)\n\n* * *\n\n# [](#ai-in-product)AI in product🦾:\n\n### [](#1-copilotkit-inapp-ai-chatbots-and-ai-textareas)1\\. [CopilotKit](https://github.com/CopilotKit/CopilotKit) - In-app AI chatbots and AI Textareas\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--JZJQpUKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox3mv8nmqzot6m4kvkdh.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--JZJQpUKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox3mv8nmqzot6m4kvkdh.png)\n\nOpen-source platform for integrating key AI features into react apps using two react components.\n\nCopilotPortal: in-app AI chatbots that can \"see\" the current app state and take actions.  \nCopilotTextarea: AI-powered replacement. With autocomplete, insertions and generations.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/CopilotKit/CopilotKit/issues/62)\n\n```plaintext\nSupport bold and italicized text in CopilotTextarea \n\nProposal:\n\nAdd support for bold and italicized text in CopilotTextarea\nCopilotTextarea uses slate-js under the hood. Lots of examples for adding bold/italicized support\nInitially only add programatic support. UI support will be added separately in [TODO add issue]\n\nImplementation tips:\n\nchanges will be made to render-element.tsx and base-copilot-textarea.tsx\ncustom-editor.tsx structures may also require changes\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star CopilotKit ⭐️](https://github.com/CopilotKit/CopilotKit)\n\n* * *\n\n### [](#2tavily-gpt-researcher-embed-httpsgithubcomassafelovicgptresearcher-noreadme-)2.[Tavily GPT Researcher](https://github.com/assafelovic/gpt-researcher)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [assafelovic](https://github.com/assafelovic) / [gpt-researcher](https://github.com/assafelovic/gpt-researcher)\n\n### GPT based autonomous agent that does online comprehensive research on any given topic\n\n### [](#3pezzoai-embed-httpsgithubcompezzolabspezzo-noreadme-)3.[Pezzo.ai](https://github.com/pezzolabs/pezzo)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [pezzolabs](https://github.com/pezzolabs) / [pezzo](https://github.com/pezzolabs/pezzo)\n\n### 🕹️ Open-source, developer-first LLMOps platform designed to streamline prompt design, version management, instant delivery, collaboration, troubleshooting, observability and more.\n\n### [](#4weaviate-embed-httpsgithubcomweaviateweaviate-noreadme-)4.[Weaviate](https://github.com/weaviate/weaviate)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [weaviate](https://github.com/weaviate) / [weaviate](https://github.com/weaviate/weaviate)\n\n### Weaviate is an open source vector database that stores both objects and vectors, allowing for combining vector search with structured filtering with the fault-tolerance and scalability of a cloud-native database, all accessible through GraphQL, REST, and various language clients.\n\n### [](#5langchain-embed-httpsgithubcomlangchainailangchain-noreadme-)5.[LangChain](https://github.com/langchain-ai/langchain)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [langchain-ai](https://github.com/langchain-ai) / [langchain](https://github.com/langchain-ai/langchain)\n\n### ⚡ Building applications with LLMs through composability ⚡\n\n* * *\n\n# [](#%F0%9F%9B%9Cweb-dev)🛜Web Dev:\n\n### [](#6-wasp-develop-fullstack-web-apps-with-react-amp-nodejs)6\\. [Wasp](https://github.com/wasp-lang/wasp) - Develop full-stack web apps with React & Node.js\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--prC6b7Tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54jp6j6r8ils6we97i0f.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--prC6b7Tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54jp6j6r8ils6we97i0f.png)\n\nRapid Full-Stack Web App Development with React & Node.js.\n\nWasp offers a simplified approach to building modern web applications, combining React for front-end and Node.js for back-end in a cohesive framework.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/wasp-lang/wasp/issues/874)\n\n```plaintext\nAdd images (or link to the example app) of auth UI helpers Wasp provides\n\nAt this point in docs (also in the tutorial if we're using it), it would be nice to add an image of UI helpers for Auth (login/signup form, Google/GitHub button, ...) so developers can immediately see what they are getting and how nice it looks.\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star Wasp ⭐️](https://github.com/wasp-lang/wasp)\n\n* * *\n\n### [](#7clickvote)7.[ClickVote](https://github.com/clickvote/clickvote)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [clickvote](https://github.com/clickvote) / [clickvote](https://github.com/clickvote/clickvote)\n\n### Add upvotes, likes, and reviews to any context ⭐️\n\n### [](#8reactflow)8.[ReactFlow](https://github.com/xyflow/xyflow)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [xyflow](https://github.com/xyflow) / [xyflow](https://github.com/xyflow/xyflow)\n\n### React Flow | Svelte Flow - Powerful open source libraries for building node-based UIs with React (https://reactflow.dev) or Svelte (https://svelteflow.dev). Ready out-of-the-box and infinitely customizable.\n\n### [](#9triggerdev)9.[Trigger.dev](https://github.com/triggerdotdev/trigger.dev)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [triggerdotdev](https://github.com/triggerdotdev) / [trigger.dev](https://github.com/triggerdotdev/trigger.dev)\n\n### ✨ Trigger.dev is the open source background jobs framework for TypeScript. With features like API integrations, webhooks, scheduling and delays.\n\n### [](#10novu)10.[Novu](https://github.com/novuhq/novu)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [novuhq](https://github.com/novuhq) / [novu](https://github.com/novuhq/novu)\n\n### 🔥 The open-source notification infrastructure with fully functional embedded notification center 🚀🚀🚀\n\n* * *\n\n# [](#devops)🧑‍💻DevOps:\n\n### [](#11-logstash-transport-and-process-logs-amp-events-by-elastic)11\\. [Logstash](https://github.com/elastic/logstash) - transport and process logs & events, by elastic.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--ZH0T9Bgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nhya28nmwby9lurtrta.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ZH0T9Bgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nhya28nmwby9lurtrta.png)\n\nEasily Add Upvotes, Likes and Reviews into Your Web-App.\n\nSimple react code for adding these components.\n\n### [](#good-first-issue)[Good First Issue](https://github.com/elastic/logstash/issues/15561)\n\n```plaintext\nAllow comments in pipeline config between hash entries\n\nCurrently it seems not allowed to make comments between hash entries, this is a feature request to allow it.\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star Logstash ⭐️](https://github.com/elastic/logstash)\n\n* * *\n\n### [](#12odigos)12.[Odigos](https://github.com/keyval-dev/odigos)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [keyval-dev](https://github.com/keyval-dev) / [odigos](https://github.com/keyval-dev/odigos)\n\n### Distributed tracing without code changes. 🚀 Instantly monitor any application using OpenTelemetry and eBPF\n\n### [](#13glasskube)13.[Glasskube](https://github.com/glasskube/operator)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [glasskube](https://github.com/glasskube) / [operator](https://github.com/glasskube/operator)\n\n### 🧊 The easiest way to get started with Kubernetes with Glasskube Add-on management\n\n### [](#14mirrord-embed-httpsgithubcommetalbearcomirrord-noreadme-)14.[Mirrord](https://github.com/metalbear-co/mirrord)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [metalbear-co](https://github.com/metalbear-co) / [mirrord](https://github.com/metalbear-co/mirrord)\n\n### Connect your local process and your cloud environment, and run local code in cloud conditions.\n\n### [](#15digger)15.[Digger](https://github.com/diggerhq/digger)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [diggerhq](https://github.com/diggerhq) / [digger](https://github.com/diggerhq/digger)\n\n### Digger is an open source IaC orchestration tool. Digger allows you to run IaC in your existing CI pipeline ⚡️\n\n* * *\n\n# [](#databases)💽 Databases:\n\n### [](#16-supabase-open-source-firebase-alternative)16\\. [Supabase](https://github.com/supabase/supabase) - Open Source Firebase Alternative\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--jIiaAeWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4xnzrefrjaaywu4b49p.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--jIiaAeWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4xnzrefrjaaywu4b49p.png)\n\nBuild modern, data-driven applications with hosted Postgres, authentication, and real-time features\n\n### [](#good-first-issue)[Good first issue:](https://github.com/supabase/supabase/issues/19396)\n\n```plaintext\nHorizontal Scroll for CodeBlocks\n\nCurrently when reading the dcs, it's not possible to view all of the code for alot of the samples.\n\nIs this the Component rendered across all of the web properties, if so I'll be happy to throw on a horizontal scroll bar that matches supabase branding.\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star Supabase ⭐️](https://github.com/supabase/supabase)\n\n* * *\n\n### [](#17appwrite-embed-httpsgithubcomappwriteappwrite-noreadme-)17.[Appwrite](https://github.com/appwrite/appwrite)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [appwrite](https://github.com/appwrite) / [appwrite](https://github.com/appwrite/appwrite)\n\n### Build like a team of hundreds\\_\n\n### [](#18superduperdb-embed-httpsgithubcomsuperduperdbsuperduperdb-noreadme-)18.[Superduperdb](https://github.com/SuperDuperDB/superduperdb)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [SuperDuperDB](https://github.com/SuperDuperDB) / [superduperdb](https://github.com/SuperDuperDB/superduperdb)\n\n### 🔮 SuperDuperDB. Bring AI to your database; integrate, train and manage any AI models and APIs directly with your database and your data.\n\n### [](#19milvus)19.[Milvus](https://github.com/milvus-io/milvus)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [milvus-io](https://github.com/milvus-io) / [milvus](https://github.com/milvus-io/milvus)\n\n### A cloud-native vector database, storage for next generation AI applications\n\n* * *\n\n# [](#other)👾 Other:\n\n### [](#21-snapify-opensource-screen-recording)21\\. [Snapify](https://github.com/MarconLP/snapify) - Open-Source Screen Recording\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--UC0d3tPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89h8mjriix6hdihcrfr8.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--UC0d3tPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89h8mjriix6hdihcrfr8.png)\n\nScreen recording, but free, open source and you are in charge of your own data.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/MarconLP/snapify/issues/18)\n\n```plaintext\nAbility to create GIFs and take screenshots to also store in S3\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star Snapify ⭐️](https://github.com/MarconLP/snapify)\n\n* * *\n\n### [](#22reactagent-embed-httpsgithubcomeylonmizreactagent-noreadme-)22.[ReactAgent](https://github.com/eylonmiz/react-agent)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [eylonmiz](https://github.com/eylonmiz) / [react-agent](https://github.com/eylonmiz/react-agent)\n\n### The open-source React.js Autonomous LLM Agent\n\n### [](#23awesome-for-beginers-embed-httpsgithubcommungellawesomeforbeginners-noreadme-)23.[Awesome for Beginers](https://github.com/MunGell/awesome-for-beginners)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [MunGell](https://github.com/MunGell) / [awesome-for-beginners](https://github.com/MunGell/awesome-for-beginners)\n\n### A list of awesome beginners-friendly projects.\n\n* * *\n\n# [](#thats-it-folks)That's it folks!\n\n## [](#dont-forget-to-like-comment-and-bookmark-%F0%9F%AB%A1)Don't forget to like, comment and bookmark 🫡\n\n**Author**: [uliyahoo](https://dev.to/uliyahoo)",
    "shortDescription": "Contributing to a great open-source library is a great way to establish a portfolio.   I've compiled...",
    "htmlMeta": "<meta property=\"og:title\" content=\"✨23 Open-Source libraries to launch your portfolio (to the moon)🚀🚀\">\n<meta property=\"og:description\" content=\"Contributing to a great open-source library is a great way to establish a portfolio.   I've compiled...\">\n<meta name=\"keywords\" content=\"webdev, programming, opensource, productivity, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9OCVmTs0--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w08ivgkh2h6qiuvo7eg1.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "23-Open-Source-libraries-to-launch-your-portfolio-(to-the-moon)",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w08ivgkh2h6qiuvo7eg1.gif"
  },
  {
    "title": "Top 5 Ways To Host Your Full-Stack App For Free 🚀✨",
    "url": "https://dev.to/wasp/top-5-ways-to-host-your-full-stack-app-for-free-c2j",
    "tags": ["webdev", "beginners", "frontend", "programming"],
    "published_at": 1703073357000,
    "markdownContent": "## [](#hello-there)Hello There!\n\n[![Heroku Logo](https://res.cloudinary.com/practicaldev/image/fetch/s--lMTtz68s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://blog.4linux.com.br/wp-content/uploads/2018/01/Heroku.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--lMTtz68s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://blog.4linux.com.br/wp-content/uploads/2018/01/Heroku.png)\n\nFirst of all, let me give you some context.\n\n[Up until recently](https://help.heroku.com/RSBRUH58/removal-of-heroku-free-product-plans-faq), **Heroku** had a nice free tier that let you deploy and test things with their dynos. It was a breeze to use. But with the removal of this free tier, developers have been left searching for a new platform to deploy their projects to.\n\nLuckily, there are lots of new hosting providers popping up. But **actually choosing where to deploy** to can be as challenging as coding your project.\n\n[![So many Options gif](https://i.giphy.com/media/McD0cTjsFuxc7tjseu/giphy.gif)](https://i.giphy.com/media/McD0cTjsFuxc7tjseu/giphy.gif)\n\nThat's why in this article, **I'll show some of those** **options** for hosting your app online for free. We’ll look quickly at what each provider is best at, so you can make an informed decision, and get your app online.\n\n### [](#table-of-contents)Table of Contents\n\n*   [**How To Make The Most Out Of Free Hosting Platforms 🚀✨**](#how-to-make-the-most-out-of-free-hosting-platforms-)\n    *   [Hello There!](#hello-there)\n        *   [Table of Contents](#table-of-contents)\n        *   [A quick heads up](#a-quick-heads-up)\n        *   [Vercel](#vercel)\n        *   [Railway](#railway)\n        *   [Render](#render)\n        *   [Fly](#fly)\n        *   [Netlify](#netlify)\n        *   [Conclusion](#conclusion)\n\n### [](#a-quick-heads-up)A quick heads up\n\nBefore you begin deploying our app, make sure to read the deployment guide provided by your chosen framework. [React](https://create-react-app.dev/docs/deployment/), [NextJS](https://nextjs.org/docs/pages/building-your-application/deploying), [Wasp](https://wasp-lang.dev/docs/advanced/deployment/overview), and most of the current frameworks have really great deployment guides (and even platforms that make these deployments easier).\n\nThus, your framework choice might have a big influence on your hosting provider!\n\n[![The office GIF](https://i.giphy.com/media/BpGWitbFZflfSUYuZ9/giphy.gif)](https://i.giphy.com/media/BpGWitbFZflfSUYuZ9/giphy.gif)\n\n## [](#support-us-%EF%B8%8F)Support us! 🙏⭐️\n\nBy the way, I’m part of Wasp’s team, and it would mean a lot if you could check our full-stack React/NodeJS/Prisma framework and [give us a star](https://kdta.io/github-wasp-lang-wasp_14).\n\nWe’re working hard to help devs go from idea to deployed as fast and easily as possible (e.g., one-command, full-stack deployments), and all help is appreciated!\n\n[⭐️ Give Wasp Framework a Star! ⭐️](https://kdta.io/github-wasp-lang-wasp_13)\n\nOk. Now, let’s explore some of the cloud platform that offer great options when it comes to hosting your app for free.\n\n### [](#vercel)Vercel\n\n[![Vercel Logo](https://res.cloudinary.com/practicaldev/image/fetch/s--dWhJkRVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nawjjv3zd1iea1rgfjw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--dWhJkRVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nawjjv3zd1iea1rgfjw.png)\n\nIf you are deploying a front-end application, the experience here is hard to match. The free tier on this is **REALLY** good. I have something in the order of 20 small websites running on the Hobby plan and wasn’t able to make a dent in usage.\n\nBesides that, the ease of deployment is astonishing.\n\n[![Vercel Dashboard](https://res.cloudinary.com/practicaldev/image/fetch/s--ma0mGDRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61giw9nmi9y1d933y6hk.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ma0mGDRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61giw9nmi9y1d933y6hk.png)\n\nAll you have to do is choose a github repository, and if they detect you're using one of the major frameworks, you probably don’t even have to configure anything! They'll take care of it all and you’ll have your app running in seconds.\n\n[![Vercel Deployment](https://res.cloudinary.com/practicaldev/image/fetch/s--nkK9Y2XP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xidcbvp9tpbeqr57d94.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--nkK9Y2XP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xidcbvp9tpbeqr57d94.png)\n\nUnfortunately, for back-end and databases [Vercel](https://vercel.com/) still isn’t a great option. If you have a really small back-end (and NodeJS focused) you could try to deploy here though using [Vercel’s functions](https://vercel.com/docs/functions/serverless-functions) infrastructure, although they are limited in execution time and complexity.\n\nFor more complex back-ends, we'll have to take a look at some of the providers below.\n\n### [](#railway)Railway\n\n[![Railway Logo](https://res.cloudinary.com/practicaldev/image/fetch/s--7O6eY8-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnxai4q81n8u5uxlcz4h.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--7O6eY8-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnxai4q81n8u5uxlcz4h.png)\n\n[Railway](https://railway.app/) is a platform that allows you to easily deploy web apps and APIs. It offers a free tier of **$5 worth of free usage per month** when you sign up.\n\nWith just a few commands, you can deploy your app and have it up and running in no time. It has a pretty nice UI, and the overall experience for deploying is good!\n\nBy the way, I really love the way they decided to show the projects and containers. It’s a really smart way to see things on an overview, instead of hundreds of small applications. Sometimes, [simply grouping things](https://lawsofux.com/law-of-common-region/) can have a big impact on UX as you can see here:\n\n[![Grouped Project](https://res.cloudinary.com/practicaldev/image/fetch/s--y5kxOQUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f4y84fkv7sa3rxd0yrf.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--y5kxOQUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f4y84fkv7sa3rxd0yrf.png)\n\nIt also supports popular frameworks like React, Next.js, and Node.js. Additionally, it provides one-click database setups and [community-created templates](https://railway.app/templates), which can significantly simplify the process of setting up Dockerfiles for your project.\n\n[![Railway Plans](https://res.cloudinary.com/practicaldev/image/fetch/s--aQOQTY6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5zsr0oghlpyej2p335u.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--aQOQTY6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5zsr0oghlpyej2p335u.png)\n\nHere are the basic current prices for it, the $5 monthly dollars (which they give you monthly for you to use) are actually enough for you to have a few projects up (as 2 - 3 small websites, back-ends and databases) and running if you know how to set them up properly (e.g. set them to automatically sleep when not being used).\n\n[![Configuration page](https://res.cloudinary.com/practicaldev/image/fetch/s--NEkAe71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1nuvnb877w0zdb1kywt.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--NEkAe71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1nuvnb877w0zdb1kywt.png)\n\nThey have this option in the app configuration page. In there you’ll also find other interesting configuration options that you can change, like domain name, healthcheck endpoints, and more.\n\n### [](#render)Render\n\n[![Render Logo](https://res.cloudinary.com/practicaldev/image/fetch/s--90OPe_o1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://images.g2crowd.com/uploads/product/image/large_detail/large_detail_477db83f729d63210139ec7cd29c1351/render-render.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--90OPe_o1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://images.g2crowd.com/uploads/product/image/large_detail/large_detail_477db83f729d63210139ec7cd29c1351/render-render.png)\n\nRender is another user-friendly cloud platform that offers a **good free tier** and supports a wide range of applications. It simplifies the process of deploying and scaling applications and supports multiple programming languages and frameworks.\n\nRender's free tier includes (per month):\n\n*   500 pipeline building minutes\n*   100GB of bandwidth\n\nThe only exception is for their **Cron Jobs service (which may not be needed in your case, especially if you're taking advantage of [Wasp's built-in jobs](https://wasp-lang.dev/docs/advanced/jobs), which have a minimum monthly charge of $1.**\n\n[![Render plans](https://res.cloudinary.com/practicaldev/image/fetch/s--zU-YNIWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbqb08789v4soij9gp0s.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--zU-YNIWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbqb08789v4soij9gp0s.png)\n\n[![Render plans 2](https://res.cloudinary.com/practicaldev/image/fetch/s--EcVDRQ9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n54c1fapvolqgzszzaaz.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--EcVDRQ9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n54c1fapvolqgzszzaaz.png)\n\nIt's really robust with features! I was able to deploy a database, a NestJS app, and a NextJS frontend, all working with migrations, Prisma ORM, and more! It has some nice event tracking (although it could be presented better — sometimes, there are too many elements on screen).\n\n[![Event example](https://res.cloudinary.com/practicaldev/image/fetch/s--hfPq8AVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/essf0z1u1ows6snpswf6.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--hfPq8AVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/essf0z1u1ows6snpswf6.png)\n\nAnd it has some observability features, too! You may think these are not going to be used on a really small app, but, when you are debugging things on the production environment, every tool you have can generate new insights about a problem.\n\n[![Observability example](https://res.cloudinary.com/practicaldev/image/fetch/s--ywUihN55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3fs623gtv5gu4hnjr3g.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ywUihN55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3fs623gtv5gu4hnjr3g.png)\n\n[![Observability example 2](https://res.cloudinary.com/practicaldev/image/fetch/s--QThFQk_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wasik5y01zuh5a5za8gk.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--QThFQk_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wasik5y01zuh5a5za8gk.png)\n\n### [](#fly)Fly\n\n[![Fly Logo](https://res.cloudinary.com/practicaldev/image/fetch/s--fuuGRh-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v8jhqg988eorpcdn7hb.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--fuuGRh-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v8jhqg988eorpcdn7hb.png)\n\n[Fly](https://fly.io/) is a cloud platform that focuses on global edge computing. Fly specializes in high-performance hosting and provides a global network of edge locations. Fly is known for its scalability and performance optimizations.\n\n[![Fly plans](https://res.cloudinary.com/practicaldev/image/fetch/s--5-LgkjRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/952omdoyh68fwq4lv4ik.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--5-LgkjRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/952omdoyh68fwq4lv4ik.png)\n\nIt supports various programming languages and frameworks, allowing you to build and deploy powerful apps and, for the deployment process, you simply download the [flyctl](https://fly.io/docs/hands-on/install-flyctl/) and you are ready to go!\n\n[![Supported Frameworks](https://res.cloudinary.com/practicaldev/image/fetch/s--GZRpkIMz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/almuttwim73338hy7ech.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--GZRpkIMz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/almuttwim73338hy7ech.png)\n\nBy the way, the Wasp framework supports a one-command deployment using Fly! You can check it out [here](https://wasp-lang.dev/docs/advanced/deployment/manually#flyio) to read more about it!\n\n[![wasp deploy to fly](https://res.cloudinary.com/practicaldev/image/fetch/s--LRwQVsY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohqil6hslcacgnhr2128.jpeg)](https://res.cloudinary.com/practicaldev/image/fetch/s--LRwQVsY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohqil6hslcacgnhr2128.jpeg)\n\nIt can also accommodate some small items, but the costs become a little steeper when we look the actual values:\n\n[![Fly plans pricing](https://res.cloudinary.com/practicaldev/image/fetch/s--zGhYFcyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f74v7dkf1p1i23jsckz3.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--zGhYFcyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f74v7dkf1p1i23jsckz3.png)\n\nFor quality of service, it has some nice monitoring dashboards and Sentry integration, which seems really useful. You can also easily check your application logs with SSH too!\n\n[![Error logging at fly](https://res.cloudinary.com/practicaldev/image/fetch/s--d7ZU-rvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bcj1fzf6xc64fzyugpu.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--d7ZU-rvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bcj1fzf6xc64fzyugpu.png)\n\n### [](#netlify)Netlify\n\n[![Netlify Logo](https://res.cloudinary.com/practicaldev/image/fetch/s--6sRUmhio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zm251qd0ow6ja1yhrot.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--6sRUmhio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zm251qd0ow6ja1yhrot.png)\n\nNetlify is known for its great free tier and provides a variety of features to build and deploy websites. With that said, it's more of a direct competitor to Vercel in that it's focused on front-end and static content.\n\nLike Vercel, it's not meant for robust back-ends, but it does also have an option to host serverless functions, you'll just have to host your database somewhere else.\n\nIt offers excellent support for major frameworks, using specific builders tailored for each one. Their [deployment documentation](https://docs.netlify.com/configure-builds/overview/?_gl=1%2a10z7npm%2a_gcl_au%2aMTcyNzA3MDU2My4xNzAyNjUxODAx#basic-build-settings) is comprehensive and helpful.\n\n[![Netlify plans](https://res.cloudinary.com/practicaldev/image/fetch/s--2oRXICUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv8o94y0dltcvr0u2n4a.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--2oRXICUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv8o94y0dltcvr0u2n4a.png)\n\nWith Netlify, you can take advantage of their Content Delivery Networks (CDNs) to provide fast static content delivery to your users. They offer a range of features to help you build and optimize your websites.\n\nNetlify's free tier includes:\n\n*   300 build minutes per month\n*   100GB of bandwidth per month\n\nNetlify has gained popularity among developers for its ease of use and powerful features. It's a great option for hosting static websites or [Jamstack](https://jamstack.org/) applications.\n\n[![NextJS identification](https://res.cloudinary.com/practicaldev/image/fetch/s--Ry_srE4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e80nn5uz0il95xtogrr3.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--Ry_srE4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e80nn5uz0il95xtogrr3.png)\n\nThey also have some major frameworks build runtimes that can ease up the process for you!\n\n### [](#conclusion)Conclusion\n\nJust in case you haven’t starred [Wasp’s repository](https://www.github.com/wasp-lang/wasp) yet, I would recommend doing so! It helps us bring you free content like this every week. Plus, it's the best, no bullshit full-stack frameworks out there for cutting down development time and getting your projects done.\n\n[⭐️ Give Wasp a star! ⭐️](https://www.github.com/wasp-lang/wasp)\n\nWhen it comes to hosting your app for free, it's important to consider the specific features and limitations of each platform. Each platform has its own strengths and it's important to choose the one that best fits your needs and requirements.\n\nHere’s a visual recap for you:\n\n[![Recap image](https://res.cloudinary.com/practicaldev/image/fetch/s--UkiThlzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd023j7tcv1cu23zedqm.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--UkiThlzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd023j7tcv1cu23zedqm.png)\n\nAnd hey! Would you like to see a more in-depth article about all of those platforms? Leave it in the comment section!\n\n**Author**: [Lucas Lima do Nascimento](https://dev.to/llxd)",
    "shortDescription": "Hello There!     First of all, let me give you some context.   Up until recently, Heroku had...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Top 5 Ways To Host Your Full-Stack App For Free 🚀✨\">\n<meta property=\"og:description\" content=\"Hello There!     First of all, let me give you some context.   Up until recently, Heroku had...\">\n<meta name=\"keywords\" content=\"webdev, beginners, frontend, programming, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--isNVms4i--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkw72jp30ktq7eq47dhj.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Top-5-Ways-To-Host-Your-Full-Stack-App-For-Free",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkw72jp30ktq7eq47dhj.gif"
  },
  {
    "title": "Design Patterns in JavaScript: A Comprehensive Guide",
    "url": "https://dev.to/topefasasi/js-design-patterns-a-comprehensive-guide-h3m",
    "tags": ["javascript", "programming", "frontend", "webdev"],
    "published_at": 1703524998000,
    "markdownContent": "JavaScript, with its widespread adoption and versatility, has become a cornerstone of modern web development. As you delve deeper into JavaScript development, understanding and utilizing patterns becomes crucial. In this article, we will embark on a journey to demystify JavaScript patterns and explore how they can enhance your coding practices.\n\n## [](#prerequisite)Prerequisite\n\nTo understand the concepts and techniques discussed in this article, you are expected to have an understanding of the fundamentals of JavaScript. Familiarity with concepts like variables, functions, data types, object-oriented programming, etc. is essential.\n\nBefore we move on, let's take a moment to understand the importance of JavaScript as a programming language.\n\n### [](#javascript-as-a-programming-language)JavaScript as a programming language\n\nJavaScript, often referred to as the \"language of the web,\" is a dynamic, high-level programming language. It is primarily used for client-side scripting in web browsers, but it has also gained traction on the server-side with the advent of Node.js. JavaScript's key features include its ability to manipulate the DOM, handle events, provide interactivity, etc. to web pages.\n\nThat being said, let's briefly discuss the importance and purpose of Patterns in JavaScript.\n\n### [](#importance-of-patterns-in-javascript-development)Importance of patterns in JavaScript development\n\nPatterns in JavaScript serve as proven solutions to recurring problems encountered during software development. They provide structure, improve code organization, enhance maintainability, and promote reusability. By understanding and applying patterns, developers can write cleaner, more efficient code and effectively tackle complex challenges.\n\n### [](#purpose-of-understanding-javascript-patterns)Purpose of understanding JavaScript patterns\n\nUnderstanding JavaScript patterns goes beyond memorizing syntax or following best practices. It empowers developers to think critically about software design, choose appropriate solutions, and build scalable applications. By mastering JavaScript patterns, you gain valuable insights into the language and its ecosystem, enabling you to write robust and maintainable code.\n\nNow that we know the importance and purpose of JavaScript Patterns, let's delve into the fundamentals of JS Design Patterns.\n\n## [](#the-fundamentals-of-design-patterns)The Fundamentals of Design Patterns\n\nIn this section, we lay the groundwork for understanding design patterns in the context of JavaScript development.\n\n### [](#definition-and-characteristics-of-design-patterns)Definition and characteristics of design patterns\n\nDesign patterns are reusable templates that encapsulate best practices for solving recurring software design problems. They offer a structured approach to designing software systems and promote modular, flexible, and maintainable code. Common characteristics of design patterns include their purpose, structure, participants, and collaborations.\n\n### [](#types-of-design-patterns)Types of design patterns\n\nDesign patterns can be categorized into three main types:\n\n*   Creational\n    \n*   Structural\n    \n*   Behavioral\n    \n\nUnderstanding these categories helps identify the appropriate pattern for a given problem.\n\n*   **Creational Patterns**\n\nCreational patterns focus on object creation mechanisms, providing ways to instantiate objects in a flexible and controlled manner. Some commonly used creational patterns in JavaScript include:\n\n*   Singleton\n    \n*   Factory\n    \n*   Constructor\n    \n*   Prototype\n    \n*   Builder\n    \n*   Module\n    \n\n**Singleton Pattern**\n\nThe Singleton Pattern ensures that a class has only one instance and provides a global point of access to it. This pattern is useful when you want to limit the number of instances of a class and ensure a single shared instance is accessible throughout the application.  \n\n```javascript\n// Implementation example of the Singleton Pattern\nclass Singleton {\n  constructor() {\n    if (!Singleton.instance) {\n      // Initialize the instance\n      Singleton.instance = this;\n    }\n    return Singleton.instance;\n  }\n}\n\nconst instance1 = new Singleton();\nconst instance2 = new Singleton();\n\nconsole.log(instance1 === instance2); // Output: true\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the Singleton class has a constructor that checks if an instance of the class already exists. If an instance doesn't exist (`!Singleton.instance` condition), it initializes the instance by assigning this to `Singleton.instance`. This ensures that subsequent calls to the constructor will return the same instance.\n\nWhen instance1 and instance2 are created using the new Singleton() syntax, both variables refer to the same instance of the Singleton class. Hence, when comparing instance1 === instance2 using the strict equality operator, it evaluates to true.\n\n**Factory Pattern**\n\nThe Factory Pattern provides a way to create objects without specifying their concrete classes. It encapsulates the object creation logic in a separate factory method, allowing flexibility and decoupling between the creator and the created objects.  \n\n```javascript\n// Implementation example of the Factory Pattern\nclass Car {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n  }\n}\n\nclass CarFactory {\n  createCar(make, model) {\n    return new Car(make, model);\n  }\n}\n\nconst factory = new CarFactory();\nconst myCar = factory.createCar(\"Tope\", \"Model 1\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, a `CarFactory` instance is created using `new CarFactory()`, and then the `createCar` method is invoked on the factory with the arguments \"Tope\" and \"Model 1\". This creates a new Car object with the make \"Tope\" and model \"Model 1\", which is assigned to the `myCar` variable.\n\n**Constructor Pattern**\n\nThe Constructor Pattern creates objects from a constructor function using the `new` keyword. It allows you to define and initialize object properties within the constructor function.  \n\n```javascript\n// Implementation example of the Constructor Pattern\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nconst tope = new Person(\"Tope\", 24);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe above code defines a constructor function called Person that takes two parameters: name and age. Inside the function, the name and age values are assigned to the respective properties of the newly created object using the this keyword.\n\nLater, a new instance of the Person object is created by invoking the Person function with the arguments \"Tope\" and 24. This creates a new object with the name property set to \"Tope\" and the age property set to 24, which is then assigned to the variable tope. The output of this code is that Tope holds an object representing a person with the name \"Tope\" and the age of 24.\n\n**Prototype Pattern**\n\nThe Prototype pattern in JavaScript focuses on creating objects by cloning or extending existing objects as prototypes. It allows us to create new instances without explicitly defining their classes. In this pattern, objects act as prototypes for creating new objects, enabling inheritance and the sharing of properties and methods among multiple objects.  \n\n```javascript\n// Prototype object\nconst carPrototype = {\n  wheels: 4,\n  startEngine() {\n    console.log(\"Engine started.\");\n  },\n  stopEngine() {\n    console.log(\"Engine stopped.\");\n  }\n};\n\n// Create new car instance using the prototype\nconst car1 = Object.create(carPrototype);\ncar1.make = \"Toyota\";\ncar1.model = \"Camry\";\n\n// Create another car instance using the same prototype\nconst car2 = Object.create(carPrototype);\ncar2.make = \"Honda\";\ncar2.model = \"Accord\";\n\ncar1.startEngine(); // Output: \"Engine started.\"\ncar2.stopEngine(); // Output: \"Engine stopped.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, car instances car1 and car2 are created using a prototype object carPrototype. car1 has the make \"Toyota\" and model \"Camry\", while car2 has the make \"Honda\" and model \"Accord\". When `car1.startEngine()` is called, it outputs \"Engine started.\", and when `car2.stopEngine()` is called, it outputs \"Engine stopped.\". This demonstrates the utilization of a prototype object to share properties and methods among multiple instances.\n\n**Builder Pattern**\n\nIn the Builder pattern, a builder class or object is responsible for constructing the final object. It provides a set of methods to configure and set the properties of the object being built. The construction process typically involves invoking these methods in a specific order to gradually build the object.  \n\n```javascript\nclass CarBuilder {\n  constructor() {\n    this.car = new Car();\n  }\n\n  setMake(make) {\n    this.car.make = make;\n    return this;\n  }\n\n  setModel(model) {\n    this.car.model = model;\n    return this;\n  }\n\n  setEngine(engine) {\n    this.car.engine = engine;\n    return this;\n  }\n\n  setWheels(wheels) {\n    this.car.wheels = wheels;\n    return this;\n  }\n\n  build() {\n    return this.car;\n  }\n}\n\nclass Car {\n  constructor() {\n    this.make = \"\";\n    this.model = \"\";\n    this.engine = \"\";\n    this.wheels = 0;\n  }\n\n  displayInfo() {\n    console.log(`Make: ${this.make}, Model: ${this.model}, Engine: ${this.engine}, Wheels: ${this.wheels}`);\n  }\n}\n\n// Usage\nconst carBuilder = new CarBuilder();\nconst car = carBuilder.setMake(\"Toyota\").setModel(\"Camry\").setEngine(\"V6\").setWheels(4).build();\ncar.displayInfo(); // Output: Make: Toyota, Model: Camry, Engine: V6, Wheels: 4\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `CarBuilder` class allows for the construction of Car objects with different properties. By calling `setMake`, `setModel`, `setEngine`, `setWheels` methods, the properties of the Car object are set. The build method finalizes the construction and returns the fully built Car object. The Car class represents a car and includes a `displayInfo` method to log its details. By creating a `carBuilder` instance and chaining the property-setting methods, a car object is constructed with specific make, model, engine, and wheel values. Invoking `car.displayInfo()` displays the car's information.\n\n**Module Pattern**\n\nThe Module Pattern encapsulates related methods and properties into a single module, providing a clean way to organize and protect the code. It allows for private and public members, enabling information hiding and preventing global namespace pollution.  \n\n```javascript\nconst MyModule = (function() {\n  // Private members\n  let privateVariable = \"I am private\";\n\n  function privateMethod() {\n    console.log(\"This is a private method\");\n  }\n\n  // Public members\n  return {\n    publicVariable: \"I am public\",\n\n    publicMethod() {\n      console.log(\"This is a public method\");\n      // Accessing private members within the module\n      console.log(privateVariable);\n      privateMethod();\n    }\n  };\n})();\n\n// Usage\nconsole.log(MyModule.publicVariable); // Output: \"I am public\"\nMyModule.publicMethod(); // Output: \"This is a public method\" \"I am private\" \"This is a private method\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the code uses an immediately invoked function expression [(IIFE)](https://www.udacity.com/blog/2023/03/immediately-invoked-function-expressions-iife-in-javascript.html#:~:text=An%20immediately%20invoked%20function%20expression,the%20code%20that%20we%20write.) to encapsulate private and public members. The module has private variables and methods, as well as public variables and methods. When accessed, the public members provide the expected output. This pattern allows for controlled access to encapsulated private members while exposing selected public members.\n\n*   **Structural patterns**\n\nStructural patterns focus on organizing and composing objects to form larger structures. They facilitate the composition of objects, defining relationships between them and providing flexible ways to manipulate their structure. Some commonly used structural patterns in JavaScript include:\n\n*   Decorator Pattern\n    \n*   Facade Pattern\n    \n*   Adapter\n    \n*   Bridge\n    \n*   Composite\n    \n\n**Decorator Pattern**\n\nThe Decorator Pattern allows you to add behavior or modify the existing behavior of an object dynamically. It enhances the functionality of an object by wrapping it with one or more decorators without modifying its structure.  \n\n```javascript\n// Implementation example of the Decorator Pattern\nclass Coffee {\n  getCost() {\n    return 1;\n  }\n}\n\nclass CoffeeDecorator {\n  constructor(coffee) {\n    this.coffee = coffee;\n  }\n\n  getCost() {\n    return this.coffee.getCost() + 0.5;\n  }\n}\n\nconst myCoffee = new Coffee();\nconst coffeeWithMilk = new CoffeeDecorator(myCoffee);\nconsole.log(coffeeWithMilk.getCost()); // Output: 1.5\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `CoffeeDecorator` class wraps a base `Coffee` object and adds additional functionality. It has a `getCost` method that calculates the total cost by combining the cost of the base coffee with an additional cost of 0.5.\n\nIn the usage section, a `myCoffee` instance of the `Coffee` class is created. Then, a `coffeeWithMilk` instance of the `CoffeeDecorator` class is instantiated, passing `myCoffee` as an argument. When `coffeeWithMilk.getCost()` is called, it returns the total cost of the coffee with the added cost from the decorator, resulting in an output of 1.5. This example illustrates how the decorator pattern can extend the functionality of an object by dynamically adding or modifying its properties or methods.\n\n**Facade Pattern**\n\nThe Facade Pattern provides a simplified interface to a complex subsystem, acting as a front-facing interface that hides the underlying implementation details. It offers a convenient way to interact with a complex system by providing a high-level interface.  \n\n```javascript\n// Implementation example of the Facade Pattern\nclass SubsystemA {\n  operationA() {\n    console.log(\"Subsystem A operation.\");\n  }\n}\n\nclass SubsystemB {\n  operationB() {\n    console.log(\"Subsystem B operation.\");\n  }\n}\n\nclass Facade {\n  constructor() {\n    this.subsystemA = new SubsystemA();\n    this.subsystemB = new SubsystemB();\n  }\n\n  operation() {\n    this.subsystemA.operationA();\n    this.subsystemB.operationB();\n  }\n}\n\nconst facade = new Facade();\nfacade.operation(); // Output: \"Subsystem A operation.\" \"Subsystem B operation.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the code consists of three classes: `SubsystemA`, `SubsystemB`, and `Facade`. The `SubsystemA` and `SubsystemB` classes represent independent subsystems and have their respective `operationA` and `operationB` methods. The `Facade` class serves as a simplified interface that aggregates the functionality of the subsystems.\n\nIn the usage section, a `facade` instance of the `Facade` class is created. Invoking `facade.operation()` triggers the execution of `operationA` from `SubsystemA` and `operationB` from `SubsystemB`. As a result, the output displays \"Subsystem A operation.\" followed by \"Subsystem B operation.\" This demonstrates how the Facade pattern provides a unified and simplified interface to interact with complex subsystems, abstracting their complexities and making them easier to use.\n\n**Adapter Pattern**\n\nThe Adapter pattern is a structural design pattern that allows objects with incompatible interfaces to collaborate by acting as a bridge between them. It provides a way to convert the interface of one object into another interface that clients expect.  \n\n```javascript\n// Implementation \nclass LegacyPrinter {\n  printLegacy(text) {\n    console.log(`Legacy Printing: ${text}`);\n  }\n}\n\n// Target interface\nclass Printer {\n  print(text) {}\n}\n\n// Adapter\nclass PrinterAdapter extends Printer {\n  constructor() {\n    super();\n    this.legacyPrinter = new LegacyPrinter();\n  }\n\n  print(text) {\n    this.legacyPrinter.printLegacy(text);\n  }\n}\n\n// Usage\nconst printer = new PrinterAdapter();\nprinter.print(\"Hello, World!\"); // Output: \"Legacy Printing: Hello, World!\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this code, the Adapter pattern is used to bridge the gap between the `LegacyPrinter` class and a desired `Printer` interface. The `PrinterAdapter` extends the `Printer` class and internally utilizes the `LegacyPrinter` to adapt the `print` method. When `printer.print(\"Hello, World!\")` is called, it effectively triggers the legacy printing functionality with the output \"Legacy Printing: Hello, World!\". This shows how the Adapter pattern enables the integration of incompatible components by providing a standardized interface.\n\n**Bridge Pattern**\n\nThe Bridge pattern is a structural design pattern that separates the abstraction and implementation of a system, allowing it to evolve independently. It introduces a bridge between the two by using an interface or abstract class. Here's an example code snippet to illustrate the Bridge pattern:  \n\n```javascript\n// Example \nclass Shape {\n  constructor(color) {\n    this.color = color;\n  }\n\n  draw() {}\n}\n\n// Concrete Abstractions\nclass Circle extends Shape {\n  draw() {\n    console.log(`Drawing a ${this.color} circle`);\n  }\n}\n\nclass Square extends Shape {\n  draw() {\n    console.log(`Drawing a ${this.color} square`);\n  }\n}\n\n// Implementor\nclass Color {\n  getColor() {}\n}\n\n// Concrete Implementors\nclass RedColor extends Color {\n  getColor() {\n    return \"red\";\n  }\n}\n\nclass BlueColor extends Color {\n  getColor() {\n    return \"blue\";\n  }\n}\n\n// Usage\nconst redCircle = new Circle(new RedColor());\nredCircle.draw(); // Output: \"Drawing a red circle\"\n\nconst blueSquare = new Square(new BlueColor());\nblueSquare.draw(); // Output: \"Drawing a blue square\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we have the Abstraction represented by the Shape class, which has a color property and a draw method. The Concrete Abstractions, Circle and Square, inherit from the Shape class and implement their specific draw behavior. The `Implementor` is represented by the Color class, which declares the `getColor` method. The Concrete `Implementors`, `RedColor`, and `BlueColor`, inherit from the Color class and provide their respective color implementations.\n\nIn the usage section, we create instances of the Concrete Abstractions, passing the appropriate Concrete Implementor objects. This allows the Abstraction to delegate the color-related functionality to the Implementor. When we invoke the draw method, it accesses the color from the Implementor and performs the drawing operation accordingly.\n\n**Composite Pattern**\n\nThe Composite pattern is a structural design pattern that allows you to treat individual objects and compositions of objects uniformly. It enables you to create hierarchical structures where each element can be treated as a single object or a collection of objects. The pattern uses a common interface to represent both individual objects (leaf nodes) and compositions (composite nodes), allowing clients to interact with them uniformly.  \n\n```javascript\n// Implementation \nclass Employee {\n  constructor(name) {\n    this.name = name;\n  }\n\n  print() {\n    console.log(`Employee: ${this.name}`);\n  }\n}\n\n// Composite\nclass Manager extends Employee {\n  constructor(name) {\n    super(name);\n    this.employees = [];\n  }\n\n  add(employee) {\n    this.employees.push(employee);\n  }\n\n  remove(employee) {\n    const index = this.employees.indexOf(employee);\n    if (index !== -1) {\n      this.employees.splice(index, 1);\n    }\n  }\n\n  print() {\n    console.log(`Manager: ${this.name}`);\n    for (const employee of this.employees) {\n      employee.print();\n    }\n  }\n}\n\n// Usage\nconst john = new Employee(\"John Doe\");\nconst jane = new Employee(\"Jane Smith\");\n\nconst mary = new Manager(\"Mary Johnson\");\nmary.add(john);\nmary.add(jane);\n\nconst peter = new Employee(\"Peter Brown\");\n\nconst bob = new Manager(\"Bob Williams\");\nbob.add(peter);\nbob.add(mary);\n\nbob.print();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we have the Component class Employee, which represents individual employees. The Composite class Manager extends the Employee class and can contain a collection of employees. It provides methods to add and remove employees from the collection and overrides the print method to display the manager's name and the employees under them.\n\nIn the usage section, we create a composite hierarchy where Manager objects can contain both individual employees (Employee) and other managers (Manager). We add employees to managers, constructing a hierarchical structure. Finally, we invoke the print method on the top-level manager, which recursively prints the hierarchy, showing the managers and their respective employees.\n\n*   **Behavioral patterns**\n\nBehavioral patterns focus on the interaction between objects and the distribution of responsibilities. They provide solutions for communication, coordination, and collaboration among objects. The following are types of behavioral patterns.\n\n*   Observer Pattern\n    \n*   Strategy Pattern\n    \n*   Command Pattern\n    \n*   Iterator Pattern\n    \n*   Mediator Pattern\n    \n\n**Observer Pattern**\n\nThe Observer Pattern establishes a one-to-many relationship between objects, where multiple observers are notified of changes in the subject's state. It enables loose coupling between objects and promotes event-driven communication.  \n\n```javascript\n// Implementation example of the Observer Pattern\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n\n  addObserver(observer) {\n    this.observers.push(observer);\n  }\n\n  removeObserver(observer) {\n    const index = this.observers.indexOf(observer);\n    if (index !== -1) {\n      this.observers.splice(index, 1);\n    }\n  }\n\n  notifyObservers() {\n    this.observers.forEach((observer) => observer.update());\n  }\n}\n\nclass Observer {\n  update() {\n    console.log(\"Observer is notified of changes.\");\n  }\n}\n\nconst subject = new Subject();\nconst observer1 = new Observer();\nconst observer2 = new Observer();\n\nsubject.addObserver(observer1);\nsubject.addObserver(observer2);\nsubject.notifyObservers(); // Output: \"Observer is notified of changes.\" \"Observer is notified of changes.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `Subject` class represents a subject that maintains a list of observers and provides methods to add, remove, and notify observers. The `Observer` class defines the behavior of an observer with its `update` method. In the usage section, a `subject` instance of the `Subject` class is created. Two `observer` instances are also created and added to the subject using the `addObserver` method.\n\nWhen `subject.notifyObservers()` is invoked, it triggers the `update` method for each observer. As a result, the output \"Observer is notified of changes.\" is logged twice, indicating that the observers have been notified of the changes in the subject.\n\n**Strategy Pattern**\n\nThe Strategy Pattern allows you to encapsulate interchangeable algorithms within separate strategy objects. It enables dynamic selection of algorithms at runtime, promoting flexibility and extensibility.  \n\n```javascript\n// Implementation example of the Strategy Pattern\nclass Context {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n\n  executeStrategy() {\n    this.strategy.execute();\n  }\n}\n\nclass ConcreteStrategyA {\n  execute() {\n    console.log(\"Strategy A is executed.\");\n  }\n}\n\nclass ConcreteStrategyB {\n  execute() {\n    console.log(\"Strategy B is executed.\");\n  }\n}\n\nconst contextA = new Context(new ConcreteStrategyA());\ncontextA.executeStrategy(); // Output: \"Strategy A is executed.\"\n\nconst contextB = new Context(new ConcreteStrategyB());\ncontextB.executeStrategy(); // Output: \"Strategy B is executed.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `Context` class represents a context that encapsulates different strategies, with a `strategy` property and an `executeStrategy` method. There are two concrete strategy classes, `ConcreteStrategyA` and `ConcreteStrategyB`, each with its own `execute` method that outputs a specific message.\n\nIn the usage section, a `contextA` instance of the `Context` class is created with `ConcreteStrategyA` as the strategy. Calling `contextA.executeStrategy()` invokes the `execute` method of `ConcreteStrategyA`, resulting in the output \"Strategy A is executed.\" Similarly, a `contextB` instance is created with `ConcreteStrategyB` as the strategy, and invoking `contextB.executeStrategy()` triggers the `execute` method of `ConcreteStrategyB`, resulting in the output \"Strategy B is executed.\" This demonstrates how the Strategy pattern allows for dynamic selection of behavior at runtime by encapsulating it in different strategy objects.\n\n**Command Pattern**\n\nThe Command Pattern encapsulates a request as an object, allowing you to parameterize clients with different requests, queue or log requests, and support undo operations. It decouples the sender of a request from the receiver, promoting loose coupling and flexibility.  \n\n```javascript\n// Implementation \nclass Receiver {\n  execute() {\n    console.log(\"Receiver executes the command.\");\n  }\n}\n\nclass Command {\n  constructor(receiver) {\n    this.receiver = receiver;\n  }\n\n  execute() {\n    this.receiver.execute();\n  }\n}\n\nclass Invoker {\n  setCommand(command) {\n    this.command = command;\n  }\n\n  executeCommand() {\n    this.command.execute();\n  }\n}\n\nconst receiver = new Receiver();\nconst command = new Command(receiver);\nconst invoker = new Invoker();\n\ninvoker.setCommand(command);\ninvoker.executeCommand(); // Output: \"Receiver executes the command.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `Receiver` class executes the command when called, and the `Command` class encapsulates a command and delegates execution to the receiver. The `Invoker` class sets and executes a command. In the usage section, a receiver, command, and invoker are created. The command is set for the invoker, and invoking `invoker.executeCommand()` executes the command, resulting in the output \"Receiver executes the command.\"\n\n**Iterator Pattern**\n\nThe Iterator pattern is a behavioral design pattern that provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. It allows you to traverse a collection of objects in a uniform manner, regardless of the specific implementation of the collection. The pattern separates the traversal logic from the collection, promoting a clean and flexible approach to iterating over elements.  \n\n```javascript\n// Implementation \nclass Collection {\n  constructor() {\n    this.items = [];\n  }\n\n  addItem(item) {\n    this.items.push(item);\n  }\n\n  createIterator() {}\n}\n\n// Concrete Aggregate\nclass ConcreteCollection extends Collection {\n  createIterator() {\n    return new ConcreteIterator(this);\n  }\n}\n\n// Iterator\nclass Iterator {\n  constructor(collection) {\n    this.collection = collection;\n    this.index = 0;\n  }\n\n  hasNext() {}\n\n  next() {}\n}\n\n// Concrete Iterator\nclass ConcreteIterator extends Iterator {\n  hasNext() {\n    return this.index < this.collection.items.length;\n  }\n\n  next() {\n    return this.collection.items[this.index++];\n  }\n}\n\n// Usage\nconst collection = new ConcreteCollection();\ncollection.addItem(\"Item 1\");\ncollection.addItem(\"Item 2\");\ncollection.addItem(\"Item 3\");\n\nconst iterator = collection.createIterator();\nwhile (iterator.hasNext()) {\n  console.log(iterator.next());\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this code, we have the Aggregate represented by the Collection class, which defines the interface for creating an iterator object. The Concrete Aggregate, `ConcreteCollection`, extends the Collection class and provides a concrete implementation of the iterator creation.\n\nThe Iterator is represented by the Iterator class, which defines the interface for accessing and traversing elements. The Concrete Iterator, `ConcreteIterator`, extends the Iterator class and provides a concrete implementation of the iteration logic. In the usage section, we create an instance of the Concrete Aggregate, `ConcreteCollection`, and add items to it. We then create an iterator using the `createIterator` method. By using the iterator's `hasNext` and next methods, we iterate over the collection and print each item.\n\n**Mediator Pattern**\n\nThe Mediator pattern simplifies object communication by introducing a mediator object that serves as a central hub for coordinating interactions between objects. It encapsulates the communication logic and provides methods for objects to register, send, and receive messages.  \n\n```javascript\n// Implementation \nclass Mediator {\n  constructor() {\n    this.colleague1 = null;\n    this.colleague2 = null;\n  }\n\n  setColleague1(colleague) {\n    this.colleague1 = colleague;\n  }\n\n  setColleague2(colleague) {\n    this.colleague2 = colleague;\n  }\n\n  notifyColleague1(message) {\n    this.colleague1.receive(message);\n  }\n\n  notifyColleague2(message) {\n    this.colleague2.receive(message);\n  }\n}\n\nclass Colleague {\n  constructor(mediator) {\n    this.mediator = mediator;\n  }\n\n  send(message) {\n    // Send a message to the mediator\n    this.mediator.notifyColleague2(message);\n  }\n\n  receive(message) {\n    console.log(`Received message: ${message}`);\n  }\n}\n\n// Usage\nconst mediator = new Mediator();\n\nconst colleague1 = new Colleague(mediator);\nconst colleague2 = new Colleague(mediator);\n\nmediator.setColleague1(colleague1);\nmediator.setColleague2(colleague2);\n\ncolleague1.send(\"Hello Colleague 2!\"); // Output: \"Received message: Hello Colleague 2!\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we have a Mediator class that acts as an intermediary between two Colleague objects. The Mediator holds references to the colleagues and provides methods to send messages between them.\n\nEach Colleague object has a reference to the mediator and can send messages by notifying the mediator. The mediator, in turn, relays the messages to the appropriate colleagues. In this case, Colleague 1 sends a message to Colleague 2, and the latter receives and logs the message.\n\n### [](#conclusion)Conclusion\n\nWe have explored a range of essential design patterns in JavaScript, encompassing creational, structural, and behavioral patterns. The creational patterns allow us to create objects in a flexible and efficient manner. Structural patterns aid in organ flexibility and scalability. Behavioral patterns enable effective communication and interaction between JavaScript objects. By leveraging these design patterns, JavaScript developers can improve code reusability, maintainability, and overall system performance. Armed with this knowledge, we can architect robust and efficient JavaScript applications that meet the demands of modern software development.\n\n**Author**: [Tope Fasasi](https://dev.to/topefasasi)",
    "shortDescription": "JavaScript, with its widespread adoption and versatility, has become a cornerstone of modern web...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Design Patterns in JavaScript: A Comprehensive Guide\">\n<meta property=\"og:description\" content=\"JavaScript, with its widespread adoption and versatility, has become a cornerstone of modern web...\">\n<meta name=\"keywords\" content=\"javascript, programming, frontend, webdev, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qOfN9i-Z--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0e7ebslr9av7tc6fedu.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Design-Patterns-in-JavaScript:-A-Comprehensive-Guide",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0e7ebslr9av7tc6fedu.png"
  },
  {
    "title": "The Discord Plan for open-source in 2024",
    "url": "https://dev.to/github20k/the-discord-plan-for-open-source-in-2024-2596",
    "tags": ["webdev", "productivity", "opensource", "tutorial"],
    "published_at": 1704287902000,
    "markdownContent": "Hi everyone!\n\n**I wish you all a fantastic New Year** 🥳\n\nMine is going to be stressful and fun. I hope yours is too!\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--n2nHzf8B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/8f714431-4254-4287-8634-c27c6308c1c2/ezgif.com-resize__43_.gif%3Ft%3D1703587844)](https://res.cloudinary.com/practicaldev/image/fetch/s--n2nHzf8B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/8f714431-4254-4287-8634-c27c6308c1c2/ezgif.com-resize__43_.gif%3Ft%3D1703587844)\n\n[Discord](https://discord.com?utm_source=nevo.github20k.com&utm_medium=referral&utm_campaign=the-discord-plan-for-open-source-in-2024) is a chat messaging platform you can run to interact with developers for your products. It can be used for marketing, support, or to build a strong community for your product.\n\nDuring my time at Novu, we always tried to make the Discord server **“active.”**  \n  \nThis is something that I have experienced with many founders.  \n  \nThey want their Discord to be more than just a **“support”** channel.\n\nMost founders aim to make the Discord channel active just from people engaging with each other, **but how do you do it?**\n\nHere is a list of things you can try that worked well for me in Gitroom and HackSquad Discord servers.\n\n* * *\n\n## [](#1-make-people-come-back-for-more)1\\. Make people come back for more\n\nI want to start with the simplest example - [**Midjourney**](https://www.midjourney.com/?utm_source=nevo.github20k.com&utm_medium=referral&utm_campaign=the-discord-plan-for-open-source-in-2024).  \n  \nTheir main product lives on Discord; if you want to generate images, you must do it with the Discord bot. Whenever people come to create pictures, they are exposed to other people and interact with them. That was a genius move.\n\nIn [Gitroom](https://discord.gitroom.com?utm_source=nevo.github20k.com&utm_medium=referral&utm_campaign=the-discord-plan-for-open-source-in-2024), I implemented a mechanism for people to launch their content. Since most people launch their content every week - they have to come back **every week** and, at the same time, interact with other people.\n\nThat’s why you usually see tons of activity in Gitroom every Monday.\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--HCO-JHbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/c84b9613-4209-49c4-a02e-345d1377aefa/image.png%3Ft%3D1703588707)](https://res.cloudinary.com/practicaldev/image/fetch/s--HCO-JHbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/c84b9613-4209-49c4-a02e-345d1377aefa/image.png%3Ft%3D1703588707)\n\n* * *\n\n## [](#2-make-a-nonproduct-discord)2\\. Make a “non-product” Discord\n\nWhen your Discord server is something like “Novu,” visitors of your Discord have the concept of “This is the Novu product. Let’s talk about that,” while this is what most products do, you don’t have to.\n\nOur Discord server could be as well as “Notification Infrastructure.” Now, we have broadened our audience and given them a place to learn everything about notifications.\n\nHackSquad was super active because it was a developer-based server where people could talk about anything.\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--C4s9hV1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/00ff23cd-c6d1-4f34-b773-3fb6c2fb2aa1/image.png%3Ft%3D1703588739)](https://res.cloudinary.com/practicaldev/image/fetch/s--C4s9hV1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/00ff23cd-c6d1-4f34-b773-3fb6c2fb2aa1/image.png%3Ft%3D1703588739)\n\n* * *\n\n## [](#3-join-with-intent)3\\. Join with intent\n\nLately, I have experienced that people that I give a pitch over our Discord server during my calls are a lot more active than people who join on their own.\n\nI think that’s the main secret in building an active community - and while you can’t talk to everybody, only a few are already pretty good because they will be active and involve other people.\n\n**Other options you can do are:**\n\n*   Give more information during the Discord **“onboarding”** wizard so people can understand what they can get by being active.\n    \n*   Show some content or a YouTube video next to the discord link so people can learn about the value of the server.\n    \n*   Tag people who join in different activities and ask for their opinions.\n    \n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--WS6rsHBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/74fbf3ff-2c78-4257-8af0-d02e6b2208e2/image.png%3Ft%3D1703588859)](https://res.cloudinary.com/practicaldev/image/fetch/s--WS6rsHBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/74fbf3ff-2c78-4257-8af0-d02e6b2208e2/image.png%3Ft%3D1703588859)\n\nDo you like this blog post so far?\n\nMake sure you register to the newsletter to read the next one\n\nSubscribe\n\n\\* Add your email, a video of getting the first 1,000 stars will be sent to your email\n\nOr invite your friend to learn [How to get GitHub stars](https://howtogetgithubstars.com)\n\n* * *\n\n## [](#4-retain)4\\. Retain\n\nBringing people to your Discord is a part of the “**Acquisition**” process, but making them stay is part of the “**Retention**” process.\n\nIn HackSquad, bringing people back to Discord makes them more active.\n\n**For example:**\n\n*   Instead of making a YouTube Live of a webinar or a Zoom Live, I would make a Discord Live and then send people back to Discord through the newsletter.\n    \n*   I run repeatable events that go beyond “How to use Novu.” I would actually do more generic stuff to attract more people.\n    \n*   I run Discord giveaways, making developers come back.\n    \n*   I constantly write on Social Media about the benefits of being a part of Discord.\n    \n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--uMbuQRdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/e23e84a2-b0a0-473d-af8e-b41a0c820e16/image.png%3Ft%3D1703588895)](https://res.cloudinary.com/practicaldev/image/fetch/s--uMbuQRdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/e23e84a2-b0a0-473d-af8e-b41a0c820e16/image.png%3Ft%3D1703588895)\n\n* * *\n\n## [](#5-appoint-moderators)5\\. Appoint moderators\n\nThe first thing I have done with Gitroom is find the first active and talented people on Discord and make them mods. That’s one of my best moves to make the community 10x more alive.\n\nOnce the community grows a bit, I intend to bring more mods.\n\nIn HackSquad, I appointed ten moderators in 1 month - **Best Decision Ever.**\n\nI am so happy to have such talented people as [Nathan](https://www.linkedin.com/in/nathan-tarbert/?utm_source=nevo.github20k.com&utm_medium=referral&utm_campaign=the-discord-plan-for-open-source-in-2024) and [Saurabh](https://www.linkedin.com/in/srbhr/?utm_source=nevo.github20k.com&utm_medium=referral&utm_campaign=the-discord-plan-for-open-source-in-2024), who help me grow the community and put it all together.\n\nMods automatically become more active when you give them **“power”**\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--WKHtHUG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/056b4451-19ac-4304-9bfa-59a82fa8e1f4/image.png%3Ft%3D1703588936)](https://res.cloudinary.com/practicaldev/image/fetch/s--WKHtHUG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/056b4451-19ac-4304-9bfa-59a82fa8e1f4/image.png%3Ft%3D1703588936)\n\n* * *\n\n## [](#6-create-an-onboarding-funnel)6\\. Create an onboarding funnel\n\nWhen somebody joins your Discord, that will be the time that they will be the most active and motivated.\n\n**You should use this time!**\n\nAsk them some questions on Discord and include them in some conversations to give some opinions.\n\nAlso, **DM them**. While this is not connected to being active on Discord - it’s an excellent time to understand your community members and extract some information from them:\n\n*   Why did you join?\n    \n*   What are you building?\n    \n*   Who told you about us?\n    \n*   Why do you want to get from this community?\n    \n\nTry even to go for a 10-minute call if you can.\n\nHere is the thing: you are not active **24/7**, but if you have mods from around the world - they can help you!\n\nJust make sure not all the mods DM the same person at the same time - that’s not nice 🙂 \n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--vc_pOA25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/cc0d1401-d2ba-4943-bfda-39bac4f1be5f/image.png%3Ft%3D1703588982)](https://res.cloudinary.com/practicaldev/image/fetch/s--vc_pOA25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://media.beehiiv.com/cdn-cgi/image/fit%3Dscale-down%2Cformat%3Dauto%2Conerror%3Dredirect%2Cquality%3D80/uploads/asset/file/cc0d1401-d2ba-4943-bfda-39bac4f1be5f/image.png%3Ft%3D1703588982)\n\nAnd last thing 🤣\n\nCreate a lot of bugs - that brings people in **(I am kidding, of course.)**\n\n* * *\n\n## [](#i-invite-you-to-register-for-my-newsletter)I invite you to register for my newsletter.\n\nThis newsletter is good for you if:\n\n*   You are considering open-sourcing your product (or building a new one).\n*   You are considering opening a by-product and open-source it (to reflect on your main product).\n*   You are in tech and want growth without the stars / without GitHub trending.\n\nIt’s a 100% free newsletter (and always will be). Feel free to register at:\n\n[https://gitroom.com](https://gitroom.com/)\n\n[![In for tech](https://res.cloudinary.com/practicaldev/image/fetch/s--WmbmR-sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86ywkzncq6erg44d6xy9.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--WmbmR-sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86ywkzncq6erg44d6xy9.gif)\n\n**Author**: [Nevo David](https://dev.to/nevodavid)",
    "shortDescription": "Hi everyone!  I wish you all a fantastic New Year 🥳  Mine is going to be stressful and fun. I hope...",
    "htmlMeta": "<meta property=\"og:title\" content=\"The Discord Plan for open-source in 2024\">\n<meta property=\"og:description\" content=\"Hi everyone!  I wish you all a fantastic New Year 🥳  Mine is going to be stressful and fun. I hope...\">\n<meta name=\"keywords\" content=\"webdev, productivity, opensource, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gmkvz5DD--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td14bxg88vlxdh0lzpuh.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "The-Discord-Plan-for-open-source-in-2024",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td14bxg88vlxdh0lzpuh.gif"
  },
  {
    "title": "11 free and fun APIs you must use in your side project",
    "url": "https://dev.to/firecampdev/11-free-and-fun-apis-you-must-use-in-your-side-project-219m",
    "tags": ["webdev", "programming", "beginners", "opensource"],
    "published_at": 1702907334000,
    "markdownContent": "Starting a new project is like setting sail on an adventure—full of excitement and challenges for developers. As you brainstorm ideas and map out the features for your next big thing, there's a game-changer that can make your journey smoother: APIs.\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--4GY09YAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://media1.tenor.com/m/31nachzhSKQAAAAd/did-you-say-free.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--4GY09YAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://media1.tenor.com/m/31nachzhSKQAAAAd/did-you-say-free.gif)\n\nTo give your project the boost it needs without denting your budget, here's a handpicked collection of the best free APIs. These are like trusty companions you can seamlessly integrate into your work, making your coding voyage more enjoyable and efficient.\n\n* * *\n\n### [](#opensource-api-testing-platform)Opensource API testing platform\n\n[Firecamp](https://firecamp.dev) is opensource API testing tool that helps your test your APIs faster than ever.\n\nIf you can spend 5 seconds giving us a star, I would be super grateful 💜\n\n[Star the Firecamp repo ⭐](https://github.com/firecamp-dev/firecamp)\n\n[![octacat](https://res.cloudinary.com/practicaldev/image/fetch/s--HpCOO1wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kjqmny5y0c4k4gyqcxs.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--HpCOO1wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kjqmny5y0c4k4gyqcxs.png)\n\n* * *\n\nLet's dive in :\n\n1.[JSONPlaceholder API](https://jsonplaceholder.typicode.com/)\n\n*   helps developers test their programs before using a real one. It lets you create, change, and delete fake data using HTTP requests.\n*   Can use as per your need it can be JSON, CSV, and YAML\n\n[![JSON placeholder](https://res.cloudinary.com/practicaldev/image/fetch/s--c-U_h3vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x660agyk72r429p8kv2p.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--c-U_h3vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x660agyk72r429p8kv2p.png)\n\n[Check out JSON Placeholder's GitHub repo!](https://github.com/typicode/json-server)\n\n* * *\n\n2.[OpenWeatherMap API](https://openweathermap.org/api)\n\n*   Real-time weather data for any location worldwide.\n*   Access to current weather conditions, forecasts, and historical data.\n*   Ideal for applications involving weather forecasts, climate analysis, or travel planning.\n\nCheck out OpenWeatherMap's GitHub repo!\n\n* * *\n\n3.[News API](https://newsapi.org/)\n\n*   Aggregates news articles from various sources worldwide.\n*   Provides live and historical data, including headlines, sources, and article summaries.\n*   Perfect for applications requiring live news updates, content aggregation, or sentiment analysis.\n\n[Check out OpenWeatherMap's GitHub repo!](https://github.com/search?q=NewsAPI)\n\n* * *\n\n4.[Unsplash API](https://unsplash.com/developers)\n\n*   High-quality, royalty-free images for use in applications and websites.\n*   Access to a vast collection of professional photographs.\n*   Ideal for projects involving visual content, design, or user engagement.\n\n[Check out Unsplash API's GitHub repo!](https://github.com/unsplash)\n\n* * *\n\n5.[REST Countries API](https://restcountries.com/)\n\n*   Retrieve information about countries, including population, area, and more.\n*   Useful for applications dealing with geography, education, or cultural exploration.\n\n[![Countries APIs](https://res.cloudinary.com/practicaldev/image/fetch/s--cKLbkozm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghsa3b5eev6xnydsgo6s.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--cKLbkozm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghsa3b5eev6xnydsgo6s.png)\n\n[Check out REST Countrie's GitHub repo!](https://github.com/apilayer/restcountries)\n\n* * *\n\n6.[Randomuser.me API](https://randomuser.me/)\n\n*   Generate random user data, including names, addresses, and profile pictures.\n*   Great for testing and prototyping applications without using real user data.\n\n[Check out Randomuser's GitHub repo!](https://github.com/RandomUser.me)\n\n* * *\n\n7.[JokeAPI](https://jokeapi.dev/)\n\n*   Incorporate humor into your project with a vast collection of jokes.\n*   Perfect for entertainment applications or adding a light-hearted touch to your website.\n\n[Check out JokeAPI's GitHub repo!](https://github.com/Sv443/JokeAPI)\n\n* * *\n\n8.[ExchangeRate-API](https://www.exchangerate-api.com/)\n\n*   Access real-time and historical exchange rates for various currencies.\n*   Essential for projects involving e-commerce, finance, or travel.\n\n[Check out ExchangeRate-API's GitHub repo!](https://github.com/exchangeratesapi/exchangeratesapi)\n\n* * *\n\n9.[NASA Open API](https://api.nasa.gov/)\n\n*   Retrieve data from NASA's vast collection, including images, videos, and astronomy data.\n*   Ideal for educational projects, space enthusiasts, or anyone interested in cosmic exploration.\n\n[Check out NASA Open API's GitHub repo!](https://github.com/nasa)\n\n* * *\n\n10.[COVID-19 Data API](https://covid19api.com/)\n\n*   Stay informed with real-time global COVID-19 statistics.\n*   Useful for applications focused on health, data visualization, or pandemic monitoring.\n\n[Check out COVID-19 Data API's GitHub repo!](https://github.com/COVID-19-Data)\n\n* * *\n\n11.[Book API](https://openlibrary.org/developers/api)\n\n*   Open Library offers a suite of APIs to help developers get up and running with our data. This includes RESTful APIs, which make Open Library data availabile in JSON, YAML and RDF/XML formats.\n\n[Check out Book API's GitHub repo!](https://github.com/internetarchive/openlibrary)\n\n* * *\n\nThese APIs cover a wide range of functionalities, allowing you to add diverse features to your projects without incurring additional costs.\n\nBe sure to explore their documentation for seamless integration into your development workflow.\n\nDo you remember which first API you try for your fun project? Comment them below and share with community.\n\nSee you next week!! 🙏\n\n**Author**: [Shreya](https://dev.to/shreya_gr)",
    "shortDescription": "Starting a new project is like setting sail on an adventure—full of excitement and challenges for...",
    "htmlMeta": "<meta property=\"og:title\" content=\"11 free and fun APIs you must use in your side project\">\n<meta property=\"og:description\" content=\"Starting a new project is like setting sail on an adventure—full of excitement and challenges for...\">\n<meta name=\"keywords\" content=\"webdev, programming, beginners, opensource, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--t69pSF8O--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7ghknet9ztn027thc9h.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "11-free-and-fun-APIs-you-must-use-in-your-side-project",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7ghknet9ztn027thc9h.gif"
  },
  {
    "title": "AI code generation vs. coding by hand - what programming is going to look like in 202X 🤖 🤔",
    "url": "https://dev.to/wasp/ai-code-generation-vs-coding-by-hand-what-programming-is-going-to-look-like-in-202x-1idh",
    "tags": ["programming", "gpt3", "ai", "webdev"],
    "published_at": 1702305575000,
    "markdownContent": "We are working on a [full-stack web framework for React & Node.js](https://github.com/wasp-lang/wasp), that uses a simple configuration language to get rid of boilerplate. A number of times, we've been asked, _“Why are you bothering creating a new framework for web app development? Isn’t ChatGPT / LLM X soon going to be generating all the code for developers anyhow?”_.\n\nThis is our take on the situation and what we believe things will look like in the future.\n\n## [](#why-do-we-need-ai-code-generation)Why do we need (AI) code generation?\n\nIn order to make development faster, we first came up with IDE autocompletion - if you are using React and start typing `use`, IDE will automatically offer to complete it to `useState()` or `useEffect()`. Besides saving keystrokes, maybe even more valuable is being able to see what methods/properties are available to us within a current scope. IDE's awareness of the project structure and code hierarchy also makes refactoring much easier.\n\n**Although that was already great, how do we take it to the next level?** Traditional IDE support is based on rules written by humans, and if we, for example, wanted to make IDE capable of implementing common functions for us (e.g., _fetch X using API Y_, or _implement quicksort_), there would be just too many of them to catalogize and maintain by hand.\n\nIf there was only a way for a computer to analyze all the code we’ve written so far and learn by itself how to autocomplete our code and what to do about humanity in general, instead of us doing all the hard work ...\n\n[Delicious and moist cake aside](https://www.youtube.com/watch?v=Y6ljFaKRTrI), we actually have this working! Thanks to the latest advances in machine learning, IDEs can now do some really cool things, like proposing the full implementation of a function, based on its name and the short comment on top:\n\n[![GPT function implementation example](https://res.cloudinary.com/practicaldev/image/fetch/s--gbDOQ_aR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p0mivtdpmjcskgt7qnl.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--gbDOQ_aR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p0mivtdpmjcskgt7qnl.gif)\n\nThis is pretty amazing! The example above is powered by [Github Copilot](https://copilot.github.com/) - it’s essentially a neural network trained on a huge amount of publicly available code. I will not get into the technical details of how it works under the hood, but there are plenty of great articles and videos covering the science behind it.\n\n**Seeing this, questions arise - what does this mean for the future of programming?** Is this just IDE autocompletion on steroids or something more? Do we need to keep bothering with manually writing code, if we can just type in the comments what we want, and that’s it?\n\n## [](#support-us-%EF%B8%8F)Support us! 🙏⭐️\n\n[![star_us](https://res.cloudinary.com/practicaldev/image/fetch/s--2jk6M804--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3a8gkl9fcs0a8rl4zsq.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--2jk6M804--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3a8gkl9fcs0a8rl4zsq.gif)\n\nIf you wish to express your support for what we are doing, consider [giving us a star on Github](https://github.com/wasp-lang/wasp)! Everything we do at Wasp is open source, and your support motivates us and helps us to keep making web app development easier and with less boilerplate.\n\n[![Toss a star](https://res.cloudinary.com/practicaldev/image/fetch/s--5pwnEx10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz3ok1dpfkscsoo0n2om.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--5pwnEx10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz3ok1dpfkscsoo0n2om.gif)\n\n[⭐️ Thanks For Your Support 🙏](https://kdta.io/github-wasp-lang-wasp_11)\n\n## [](#the-big-question-who-maintains-the-code-once-its-generated)The Big Question: Who maintains the code once it’s generated?\n\nWhen thinking about how ML code generation affects the overall development process, there is one thing to consider that often doesn’t immediately spring to mind when looking at all the impressive examples.\n\nThe question is - **what happens with the code once it is generated? Who is responsible for it, and who will maintain and refactor it in the future?**\n\n[![always has been](https://res.cloudinary.com/practicaldev/image/fetch/s--a_etRrdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bzh9yp2ejwhu4zpio0e.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--a_etRrdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bzh9yp2ejwhu4zpio0e.png)\n\nAlthough ML code generation helps with getting the initial code for a specific feature written, it cannot do much beyond that - if that code is to be maintained and changed in the future (and if anyone uses the product, it is), the developer still needs to own and understand it fully. You can again use AI to help you, but in the end, you're the one responsible for it.\n\nImagine all we had was an assembly language, but code generation worked really well for it, and you could say _“implement a function that sorts an array, ascending”_ and it would produce the required code perfectly. Would that still be something you’d like to return to in the future once you need to change your sort to descending 😅?\n\nOr, to get closer to our daily lives, would it be all the same to you if the generated React code used the old class syntax, or functional components and hooks?\n\n**In other words, it means GPT and other LLMs do not reduce the code complexity nor the amount of knowledge required to build features**, they just help write the initial code faster and bring the knowledge/examples closer to the code (which is really helpful). **If a developer accepts the generated code blindly, they are just creating tech debt and pushing it forward**.\n\n## [](#meet-the-big-a-abstraction)Meet the big A - Abstraction 👆\n\nIf ChatGPT and the gang cannot solve all our troubles of learning how to code and understanding in detail how, for example, session management via JWTs works, what can?\n\nAbstraction - that’s how programmers have been dealing with code repetition and reducing complexity for decades - by creating libraries, frameworks, and languages. It is how we advanced from vanilla JS and direct DOM manipulation to jQuery and finally to UI libraries such as React and Vue.\n\nIntroducing abstractions inevitably means giving up on a certain amount of power and flexibility (e.g., when summing numbers in Python, you don’t get to exactly specify which CPU registers are going to be used for it), but the point is that, if done right, you don’t need nor want such power in the majority of the cases.\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s---CNpAV5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75uhgmdu7fq5wcwhe6tw.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s---CNpAV5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75uhgmdu7fq5wcwhe6tw.jpg)\n\n  \n\nWhat Uncle Ben actually meant: avoiding responsibility is the main benefit of abstraction! (Peter totally missed the point, unfortunately, and became Spiderman instead of learning how to code)\n\n**The only way not to be responsible for a piece of code is that it doesn’t exist in the first place.**\n\nBecause as soon as pixels on the screen change their color it’s something you have to worry about, and that is why the main benefit of all frameworks, languages, etc. is _less code == fewer decisions == less responsibility_.\n\nThe only way to have less code is to make fewer decisions and provide fewer details to the computer on how to do a certain task - ideally, we’d just state what we want, and we wouldn’t even care about how it is done, as long as it’s within the time/memory/cost boundaries we have (so we might need to state those as well).\n\nLet’s take a look at the very common (and everyone’s favorite) feature in the world of web apps - authentication (yaay ☠️ 🔫)! The typical code for it will look something like this:  \n\n```javascript\nimport jwt from 'jsonwebtoken'\nimport SecurePassword from 'secure-password'\nimport util from 'util'\n\nimport prisma from '../dbClient.js'\nimport { handleRejection } from '../utils.js'\nimport config from '../config.js'\n\nconst jwtSign = util.promisify(jwt.sign)\nconst jwtVerify = util.promisify(jwt.verify)\n\nconst JWT_SECRET = config.auth.jwtSecret\n\nexport const sign = (id, options) => jwtSign({ id }, JWT_SECRET, options)\nexport const verify = (token) => jwtVerify(token, JWT_SECRET)\n\nconst auth = handleRejection(async (req, res, next) => {\n  const authHeader = req.get('Authorization')\n  if (!authHeader) {\n    return next()\n  }\n\n  if (authHeader.startsWith('Bearer ')) {\n    const token = authHeader.substring(7, authHeader.length)\n\n    let userIdFromToken\n    try {\n      userIdFromToken = (await verify(token)).id\n    } catch (error) {\n      if (['TokenExpiredError', 'JsonWebTokenError', 'NotBeforeError'].includes(error.name)) {\n        return res.status(401).send()\n      } else {\n        throw error\n      }\n    }\n\n    const user = await prisma.user.findUnique({ where: { id: userIdFromToken } })\n    if (!user) {\n      return res.status(401).send()\n    }\n\n    const { password, ...userView } = user\n\n    req.user = userView\n  } else {\n    return res.status(401).send()\n  }\n\n  next()\n})\n\nconst SP = new SecurePassword()\n\nexport const hashPassword = async (password) => {\n  const hashedPwdBuffer = await SP.hash(Buffer.from(password))\n  return hashedPwdBuffer.toString(\"base64\")\n}\n\nexport const verifyPassword = async (hashedPassword, password) => {\n  try {\n    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, \"base64\"))\n  } catch (error) {\n    console.error(error)\n    return false\n  }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd this is just a portion of the backend code (and for the username & password method only)! As you can see, we have quite a lot of flexibility here and get to do/specify things like:\n\n*   choose the implementation method for auth (e.g. session or JWT-based)\n*   choose the exact npm packages we want to use for the token (if going with JWT) and password management\n*   parse the auth header and specify for each value (Authorization, Bearer, …) how to respond\n*   choose the return code (e.g. 401, 403) for each possible outcome\n*   choose how the password is decoded/encoded (base64)\n\nOn the one hand, it’s really cool to have that level of control and flexibility in our code, but on the other hand, it’s quite a lot of decisions (== mistakes) to be made, especially for something as common as authentication!\n\nIf somebody later asks “_so why exactly did you choose secure-password npm package, or why exactly base64 encoding?_” it’s something we should probably answer with something else rather than “_well, there was that SO post from 2012 that seemed pretty legit, it had almost 50 upvotes. Hmm, can’t find it now, though. Plus, it has ‘secure’ in the name, that sounds good, right?_”\n\nAnother thing to keep in mind is that we should also track how things change over time, and ensure that after a couple of years, we’re still using the best practices and that the packages are regularly updated.\n\nIf we try to apply the principles from above (less code, less detailed instructions, stating **what** we want instead of **how** it needs to be done), the code for authentication might look something like this:  \n\n```plaintext\nauth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      usernameAndPassword: {},\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/dashboard\"\n  }\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nBased on this, the computer/compiler could take care of all the stuff mentioned above, and then depending on the level of abstraction, provide some sort of interface (e.g. form components, or functions) to “hook” in with our own e.g. React/Node.js code (btw this is how it actually [works in Wasp](https://wasp-lang.dev/docs/auth/overview)).\n\nWe don’t need to care what exact packages or encryption methods are used beneath the hood - it is the responsibility we trust with the authors and maintainers of the abstraction layer, just like we trust that Python knows the best how to sum two numbers on the assembly level and that it is kept in sync with the latest advancements in the field. The same happens when we rely on the built-in data structures or count on the garbage collector to manage our program’s memory well.\n\n## [](#but-my-beautiful-generated-codez-what-happens-with-it-then)But my beautiful generated codez 😿💻! What happens with it then?\n\nDon’t worry, it’s all still here and you can generate all the code you wish! The main point to understand here is that AI code generation and framework/language development complement rather than replace each other and are here to stay, which is ultimately a huge win for the developer community - they will keep making our lives easier and allow us to do more fun stuff (instead of implementing auth or CRUD API for the n-th time)!\n\nI see the evolution here as a cycle (or an upward spiral in fact, but that’s beyond my drawing capabilities):\n\n1.  **language/framework: exists**, is mainstream, and a lot of people use it\n2.  **patterns start emerging** (e.g. implementing auth, or making an API call) → AI learns them, offers via autocomplete\n3.  **some of those patterns mature** and become stable → candidates for abstraction\n4.  **new, more abstract, language/framework** emerges\n5.  **back to step 1.**\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--3XND2uH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9na8wwmaqfabhx1dkuaf.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--3XND2uH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9na8wwmaqfabhx1dkuaf.png)\n\n  \n\nIt’s the circle of (language) life, and it moves us all - Ingonyama nengw' enamabala, …\n\n## [](#conclusion)Conclusion\n\nThis means we are winning on both sides - when the language is mainstream we can benefit from AI-powered code generation, helping us write the code faster. On the other hand, when the patterns of code we don’t want to repeat/deal with emerge and become stable we get a whole new language or framework that allows us to write even less code and care about fewer implementation details!\n\n[![fizz buzz stop](https://res.cloudinary.com/practicaldev/image/fetch/s--jnht9Lg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fistx8x0w8ee62nr1kl5.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--jnht9Lg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fistx8x0w8ee62nr1kl5.gif)\n\nThanks for reading and hope you found this post informative! I'd love to hear if you agree with this (or not), and how you see the future of programming powered with the AI tools.\n\n**Author**: [Matija Sosic](https://dev.to/matijasos)",
    "shortDescription": "We are working on a full-stack web framework for React &amp; Node.js, that uses a simple...",
    "htmlMeta": "<meta property=\"og:title\" content=\"AI code generation vs. coding by hand - what programming is going to look like in 202X 🤖 🤔\">\n<meta property=\"og:description\" content=\"We are working on a full-stack web framework for React &amp;amp; Node.js, that uses a simple...\">\n<meta name=\"keywords\" content=\"programming, gpt3, ai, webdev, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--09Dn8KiC--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y09120ozszkidv6s12x8.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "AI-code-generation-vs.-coding-by-hand-what-programming-is-going-to-look-like-in-202X",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y09120ozszkidv6s12x8.png"
  },
  {
    "title": "Supabase Studio: AI Assistant and User Impersonation",
    "url": "https://dev.to/supabase/supabase-studio-ai-assistant-and-user-impersonation-22mn",
    "tags": ["webdev", "programming", "opensource", "ai"],
    "published_at": 1702321895000,
    "markdownContent": "During the previous Launch Week we introduced text-to-sql in the SQL Editor within Supabase Studio. This was our first step towards a full AI Assistant.\n\nToday, we're introducing the Supabase Assistant, an AI side-kick inside the dashboard, and a few new features that will take you from idea to production even faster.\n\nHere's the birds-eye-view:\n\n*   **Row Level Security Policies:** made easy with AI\n*   **Postgres Roles:** Change the Studio's Postgres role\n*   **User Impersonation:** visualize your security policies\n*   **Realtime Inspector:** inspect and debug Realtime requests\n*   **Feature Previews:** See what's hot off the press in Studio\n\n## [](#introducing-the-supabase-assistant)Introducing the Supabase Assistant\n\nWe're excited to expand Studio's AI capabilities with our new **Supabase Assistant.**\n\nDevelopers have been telling us that the text-to-sql feature inside the SQL Editor has dramatically increased their velocity (and their SQL abilities). AI is extremely powerful when combined with a schema-based database, like Postgres, because it can infer so much context from the schema and the database provides stricter guarantees with generated code. Our previous release solidified our belief that AI will be a key part of the future of database development.\n\nToday, we're rolling out Assistant support in our Row Level Security editor and soon will expand to other places in Studio: the Table Editor, Postgres Functions, Serverless Functions, and more.\n\nLet's jump in to Row Level Security first.\n\n[![ai animation](https://res.cloudinary.com/practicaldev/image/fetch/s--fzGiVwO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fisvxtbux1awm6j169zt.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--fzGiVwO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fisvxtbux1awm6j169zt.gif)\n\n## [](#easy-rls-policies-with-ai)Easy RLS Policies with AI\n\nOf all the feature requests we get (and we get many!), an easier way to write [Row Level Security](https://supabase.com/docs/guides/auth/row-level-security) Policies is one of the most frequent.\n\nRow Level Security (RLS) is a Postgres feature that provides fine-grained access to your database. While RLS is powerful, writing Policies can be a chore. Today, we're releasing an AI-powered RLS Editor that makes it simple to write security policies.\n\nThe new RLS Editor brings SQL front-and-center. We want to give developers access to the full potential of Postgres, rather than abstracting it away. This editor is really two tools:\n\n1.  A SQL Editor: if you know SQL really well, there's a new editor for you to quickly write your policies.\n2.  An Assistant: if you're new to RLS and need some help, you can use the Assistant and chat your way through it.\n\n[![example SQL editor](https://res.cloudinary.com/practicaldev/image/fetch/s--xKJokmzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p943tvovzrdvq4g5sh4p.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--xKJokmzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p943tvovzrdvq4g5sh4p.jpg)\n\nThe Assistant has been tuned to produce SQL for Row Level Security, making it fast and easy to get your policies setup the way you need them.\n\nWe've explored various approaches and designs for the RLS Editor. This SQL-first approach, with assistance from AI, feels like the solution we've been seeking. The new RLS Editor can be enabled today via Feature Previews (more on that below). We'd love to [hear your feedback.](https://github.com/orgs/supabase/discussions/19594)\n\n## [](#postgres-roles)Postgres Roles\n\nYou may have never thought about this, but Studio connects to your database just like any other Postgres client.\n\nIt uses the default [Postgres role](https://supabase.com/docs/guides/database/postgres/roles), `postgres`. The `postgres` role functions like your `service role` key, granting it admin privileges to your database. It has admin read and write privileges, and bypasses Row Level Security.\n\nIf you use our client libs, you'll be familiar with the `anon` and `service_role` API keys. These keys actually resolve into Postgres roles, also called `anon` and `service_role`. These keys are actually JWT tokens that contain the Postgres role:  \n\n```javascript\n{\n  \"role\": \"service_role\", // the Postgres role\n  \"iss\": \"supabase\"       // the issuer of the JWT\n  \"exp\": 1445385600,      // the time the JWT will expire\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWhat if you could run the queries in Studio using the same Postgres roles you use in your applications? What if you could have the Studio pretend to use a different role than the default `postgres` role? Today, you can:\n\n[![screenshot of dashboard](https://res.cloudinary.com/practicaldev/image/fetch/s--sRR_PZXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkzq8ij94q3dainfu7fh.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--sRR_PZXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkzq8ij94q3dainfu7fh.jpg)\n\nYou can use the new Role dropdown to select a different Postgres role for your queries in Studio. This is a powerful tool for testing your Row Level Security policies and determining which data each role can access.\n\nLet's build a Twitter/X clone to illustrate. In a Twitter clone, you:\n\n*   have a tweets table with columns like `user_id` and `content`.\n*   can set up Row Level Security so that only the author of a tweet can access and modify their own tweets.\n*   can only see and edit the tweets you've authored.\n\nWhen we query with the `postgres` role, we can see all the data. When we query with the `anon` no data is returned. This makes sense as we haven't yet created a policy to allow for `anon` access to this table.\n\nThe Role dropdown unlocks another handy capability: when combined with Supabase Auth it can even pretend to be a different user.\n\n## [](#user-impersonation)User Impersonation\n\nRemember the API keys above? They can contain an additional field: `sub`. This is the user's ID. When you use the `authenticated` role, the `sub` field is the ID of the user who is logged in to your app:  \n\n```javascript\n{\n  \"sub\": \"348b-some-user-uuid\", // the ID of the user\n  \"role\": \"authenticated\",      // the Postgres role\n  \"iss\": \"supabase\"             // the issuer of the JWT\n  \"exp\": 1445385600,            // the time the JWT will expires\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe can impersonate a user in Studio by \"minting\" a JWT with their ID and then running the queries using that JWT.\n\nLet's see it in action after we've written an RLS policy to allow users to view their own tweets. Here, we can choose the `authenticated` role, and select a specific user to see just their tweets. Here's all of our user's tweets:\n\n[![Impersonation](https://res.cloudinary.com/practicaldev/image/fetch/s--XBplhG6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h75mldhwms2dphazxbz4.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--XBplhG6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h75mldhwms2dphazxbz4.jpg)\n\nThe Table Editor is now impersonating our user.\n\nYou can impersonate any user in your project and see things exactly as they would. Any conditions in your RLS policies will be automatically reflected here in the table.\n\n✨ Magic ✨\n\nYou can create RLS policies and test that they work exactly as you expect, right from the Studio.\n\nThe fun doesn't stop with the Table Editor. We've added Roles support to both the SQL Editor and GraphiQL as well. Let's repeat what we've done above by trying to select a list of our own tweets in the SQL Editor:\n\n[![Impersonation](https://res.cloudinary.com/practicaldev/image/fetch/s--R82m2Z6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z3x5on9e12iykj5ep6r.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--R82m2Z6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z3x5on9e12iykj5ep6r.jpg)\n\nAnd in GraphiQL:\n\n[![example](https://res.cloudinary.com/practicaldev/image/fetch/s--NVcX9qcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cd34tao8o2e17ln7ut3u.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--NVcX9qcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cd34tao8o2e17ln7ut3u.jpg)\n\nCombining this feature with the new RLS Editor, you're able to write and test RLS policies with real data in a matter of minutes. This makes the process of writing RLS policies many times faster and easier. If you've got feedback, [we'd love to hear it.](https://github.com/orgs/supabase/discussions/19595)\n\n## [](#realtime-inspector)Realtime Inspector\n\nSupabase [Realtime](https://supabase.com/realtime) is great for building collaborative applications. You can receive database changes over websockets, store and synchronize data about user presence, and broadcast any data to clients via \"channels\".\n\nToday we're releasing Realtime Inspector: an easy way to prototype, inspect, and debug Realtime directly in the Studio. You can use the Realtime Inspector to view messages being sent and received in channels. You can filter messages by type: presence, broadcast, and database changes.\n\n[![Example realtime](https://res.cloudinary.com/practicaldev/image/fetch/s--2pdUtVCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uaha9mddogmufvv8dnq.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--2pdUtVCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uaha9mddogmufvv8dnq.jpg)\n\nAnd, of course, we've included the Roles dropdown here as well. You can view events by role and impersonate users just like the Table and SQL Editors.\n\nIf you use Realtime, you'll find the new inspector very handy. Please send along any [feedback](https://supabase.com/blog/studio-introducing-assistant#easy-rls-policies-with-ai:~:text=send%20along%20any-,feedback,-you%27ve%20got.) you've got.\n\n## [](#feature-previews)Feature Previews\n\nToday we're releasing **Feature Previews**, our tool for unveiling new features. We release beta features as Previews before making them generally available. You can see a list of features that are available for preview along with a screenshot and a brief description. Each feature includes a link to a Github Discussion for feedback.\n\nWe have a couple of goals with Feature Previews. We want to:\n\n*   get features out to you faster\n*   make it easier for you to give us feedback\n*   shorten the iteration loop\n\nThe faster we can iterate with your feedback, the faster we can release features into general use.\n\nWhile we consider these features to be beta releases, please know that we take your security, privacy and data integrity extremely seriously. Anything we release to Preview is tested with this in mind and is at a stage where we're looking for UX/UI feedback.\n\nYou can find our Feature Preview under the user avatar menu in the lower left:\n\n[![example of screen](https://res.cloudinary.com/practicaldev/image/fetch/s--0ooC-SOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wmylco7j28jydqtssfx.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--0ooC-SOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wmylco7j28jydqtssfx.jpg)\n\nWe currently have two features in preview:\n\n1.  The new RLS Assistant that we looked at earlier:\n\n[![RLS example](https://res.cloudinary.com/practicaldev/image/fetch/s--4nlQY0CF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyrme13gh3hel13e76sq.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--4nlQY0CF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyrme13gh3hel13e76sq.jpg)\n\n1.  And a revised API side panel:\n\n[![API panel](https://res.cloudinary.com/practicaldev/image/fetch/s--_Aj2gM6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlmbk8xcs2rjh2d6t0pm.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--_Aj2gM6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlmbk8xcs2rjh2d6t0pm.jpg)\n\nWe'll be actively keeping an eye on the Github Discussions and will be responding to your feedback.\n\n## [](#wrapping-up)Wrapping up\n\nIn this update, we've taken huge strides in enhancing your experience with Supabase.\n\n1.  **Row Level Security Policies:** We've made it easier than ever to create Row Level Security policies with the help of our new Assistant. This feature dramatically simplifies the process of defining fine-grained access to your data.\n2.  **Postgres Roles and User Impersonation:** Our new Roles selector allows you to visualize the impact of your security policies directly within the Studio. This lets you to see how different roles interact with your data, offering a powerful tool for testing access control.\n3.  **Realtime Inspector:** With the Realtime Inspector, you can prototype, inspect, and debug Realtime messages. This tool will be very useful for those who use Supabase Realtime.\n4.  **Feature Previews:** We've introduced Feature Previews to bring you new tools and features in the beta stage, making it easier for you to provide feedback and shape the development process.\n\nThese updates reflect our commitment to a SQL-first approach and a user-centric development. We look forward to your feedback as we continue to work hard making Supabase faster and easier for you to get your ideas out into the wild.\n\n## [](#more-launch-week-x)More Launch Week X\n\n*   [Postgres Language Server: implementing the Parser](https://supabase.com/blog/postgres-language-server-implementing-parser)\n*   [How design works at Supabase](https://supabase.com/blog/how-design-works-at-supabase)\n*   [The Supabase Album](https://www.youtube.com/watch?v=r1POD-IdG-I)\n*   [Supabase Launch Week X Hackathon](https://supabase.com/blog/supabase-hackathon-lwx)\n*   [Launch Week X Community Meetups](https://supabase.com/blog/community-meetups-lwx)\n\n**Author**: [Yuri](https://dev.to/yuricodesbot)",
    "shortDescription": "During the previous Launch Week we introduced text-to-sql in the SQL Editor within Supabase Studio....",
    "htmlMeta": "<meta property=\"og:title\" content=\"Supabase Studio: AI Assistant and User Impersonation\">\n<meta property=\"og:description\" content=\"During the previous Launch Week we introduced text-to-sql in the SQL Editor within Supabase Studio....\">\n<meta name=\"keywords\" content=\"webdev, programming, opensource, ai, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AzBGHm-v--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq3xutnhlqxgqawgp5tw.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Supabase-Studio:-AI-Assistant-and-User-Impersonation",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq3xutnhlqxgqawgp5tw.jpg"
  },
  {
    "title": "9 Project Ideas to Master Frontend Development in 2024 | **with resource**",
    "url": "https://dev.to/mukeshkuiry/9-projects-to-master-frontend-web-development-in-2024-with-resource-d0k",
    "tags": ["webdev", "beginners", "tutorial", "frontend"],
    "published_at": 1702566910000,
    "markdownContent": "Want to **Master Frontend Web Development in 2024?**\n\nWhether you're eager to start your journey in frontend development or looking to elevate your skills, we've got you covered.\n\nHere are nine exciting projects that will empower you to master frontend development in 2024. To accelerate your learning process, each project comes with a dedicated resource.\n\nLet's dive in and transform your coding aspirations into reality! 🚀\n\n### [](#1-storytelling-portfolio-website)1\\. Storytelling Portfolio Website\n\nCreate a captivating storytelling portfolio website to showcase your skills and projects. Use animations and transitions to engage visitors.\n\n**What You Will Learn:** This project will enhance your proficiency in building a personal portfolio, incorporating animations with CSS and JavaScript. You'll also gain insights into effective storytelling through web design.\n\n**Tech Stack:** HTML, CSS, JavaScript, GSAP (GreenSock Animation Platform).\n\n**Resource:** [Storytelling Portfolio Tutorial](https://youtu.be/0fYi8SGA20k?si=lgzXlqL7m2aK3nzg)\n\n[![Storytelling Portfolio](https://res.cloudinary.com/practicaldev/image/fetch/s--aDwqsCJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2smmhfqq2g7qx1yune1.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--aDwqsCJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2smmhfqq2g7qx1yune1.png)\n\n### [](#2-movie-search-application)2\\. Movie Search Application\n\nBuild a movie search application using React Hooks. Users can search for movies, view details, and discover new releases.\n\n**What You Will Learn:** Through this project, you'll master state management with React Hooks, asynchronous data fetching, and responsive design. Additionally, you'll gain insights into handling user input and managing complex data structures.\n\n**Tech Stack:** React Hooks, Axios, CSS (flexbox/grid), and the Movie Database (IMDB) API.\n\n**Resource:** [Movie Search App Tutorial](https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/)\n\n[![Movie Search App](https://res.cloudinary.com/practicaldev/image/fetch/s---gzR4xXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wtwna67o253uusbpoj9.png)](https://res.cloudinary.com/practicaldev/image/fetch/s---gzR4xXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wtwna67o253uusbpoj9.png)\n\n### [](#3-task-management-application)3\\. Task Management Application\n\nDevelop a task management application with features like task creation, completion tracking, and category organization.\n\n**What You Will Learn:** This project will reinforce your understanding of state management in React, CRUD operations, and the implementation of user-friendly interfaces for task management.\n\n**Tech Stack:** React, useState, useEffect, localStorage, CSS.\n\n**Resource:** [Task Management App Tutorial](https://youtu.be/m4MDt7UUu1w?si=EcCbIMtkmHZIsWPS)\n\n[![Task Management App](https://res.cloudinary.com/practicaldev/image/fetch/s--mJkDI1WS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49wmxw4xcfzlig2mrmk4.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--mJkDI1WS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49wmxw4xcfzlig2mrmk4.png)\n\n### [](#4-interactive-resume-builder)4\\. Interactive Resume Builder\n\nCreate an interactive resume builder to showcase your professional journey. Include sections for education, work experience, and skills.\n\n**What You Will Learn:** Through this project, you'll master the art of form handling, dynamic content rendering, and building interactive user interfaces. It's an excellent opportunity to refine your React skills.\n\n**Tech Stack:** React, Form handling, CSS (styled-components).\n\n**Resource:** [Interactive Resume Builder Playlist](https://youtube.com/playlist?list=PLrL9i_Ka3T0caA37TXSlicITQl1pp_3Ry&si=UhftAkbYr_eYaxJZ)\n\n[![Interactive Resume Builder](https://res.cloudinary.com/practicaldev/image/fetch/s--aRKMyZmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqsmo0bflp7x9juv94br.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--aRKMyZmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqsmo0bflp7x9juv94br.png)\n\n### [](#5-product-landing-project)5\\. Product Landing Project\n\nDevelop a product landing page with a focus on promoting a specific product or service. Implement responsive design for various screen sizes.\n\n**What You Will Learn:** This project will deepen your understanding of responsive web design, including media queries, flexbox, and grid layout. You'll also enhance your skills in creating visually appealing landing pages.\n\n**Tech Stack:** HTML, CSS (Flexbox/Grid), Responsive Design.\n\n**Resource:** [Product Landing Page Tutorial](https://youtube.com/playlist?list=PL07efmqYWHZ8jroJAkkFB2s4ZKpVNCOQa&si=ZI375j0QMaN7rpdn)\n\n[![Product Landing Page](https://res.cloudinary.com/practicaldev/image/fetch/s--x3JvyLUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqpejqx835m7zxgs585u.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--x3JvyLUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqpejqx835m7zxgs585u.png)\n\n### [](#6-profile-page-using-github-api)6\\. Profile Page using GitHub API\n\nBuild a profile page that fetches data from the GitHub API, displaying user information, repositories, and a contribution heatmap.\n\n**What You Will Learn:** This project will enhance your skills in working with APIs, handling asynchronous data, and creating visually appealing user profiles. You'll also gain experience in integrating third-party APIs into your applications.\n\n**Tech Stack:** React, GitHub API, CSS.\n\n**Resource:** [GitHub API Profile Tutorial](https://dev.to/falanatolu/using-github-api-to-fetch-and-display-a-github-user-profile-26g6)\n\n[![Profile Page using GitHub API](https://res.cloudinary.com/practicaldev/image/fetch/s--LHHsg0SX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5qvthy4yzgx60a5omp4.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--LHHsg0SX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5qvthy4yzgx60a5omp4.png)\n\n### [](#7-responsive-blog-website)7\\. Responsive Blog Website\n\nDevelop a responsive blog website with features like article listings, individual article pages, and navigation menus optimized for various devices.\n\n**What You Will Learn:** This project will refine your skills in building complex layouts with a focus on responsiveness. You'll gain experience in creating navigation structures and optimizing user experiences for different screen sizes.\n\n**Tech Stack:** HTML, CSS (Flexbox/Grid), JavaScript.\n\n**Resource:** [Responsive Blog Website Tutorial](https://youtu.be/NNQuhOeM0mI?si=RjNPOIm-otDhMTsE)\n\n[![Responsive Blog Website](https://res.cloudinary.com/practicaldev/image/fetch/s--Y7dXPb4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/potx6blzf3if4cfp4wv7.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--Y7dXPb4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/potx6blzf3if4cfp4wv7.png)\n\n### [](#8-animated-weather-app-using-lottie-files)8\\. Animated Weather App using Lottie Files\n\nCreate a weather app with animated weather icons using Lottie files. Provide real-time weather information and animations corresponding to the current weather conditions.\n\n**What You Will Learn:** This project will expand your skills in integrating external libraries (Lottie) into your projects. You'll also gain experience in working with APIs for real-time data and implementing dynamic animations.\n\n**Tech Stack:** React, Lottie, OpenWeatherMap API, CSS.\n\n**Resource:** [Animated Weather App Tutorial](https://youtu.be/pFvWwFua6mw?si=Xut6cKy10rV1DpFd)\n\n[![Animated Weather App](https://res.cloudinary.com/practicaldev/image/fetch/s--cjoQzsGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x392uay0fjf8kypyrtoy.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--cjoQzsGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x392uay0fjf8kypyrtoy.png)\n\n### [](#9-saas-landing-page)9\\. SaaS Landing Page\n\nDesign and build a landing page for a Software as a Service (SaaS) product. Emphasize clean design, effective copywriting, and compelling call-to-action elements.\n\n**What You Will Learn:** This project will enhance your skills in creating marketing-oriented landing pages, focusing on user conversion. You'll also gain insights into the principles of persuasive design and effective use of color schemes.\n\n**Tech Stack:** React, Tailwind CSS, Copywriting.\n\n**Resource:** [SaaS Landing Page Tutorial](https://youtube.com/playlist?list=PLz_5rPRIvGEBDvyf-HIIDHjsPppnuXtFG&si=JIpCCIbz4QW8v9o4)\n\n[![SaaS Landing Page](https://res.cloudinary.com/practicaldev/image/fetch/s--4Znrfw6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl16te1dbqsp5np73bh2.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--4Znrfw6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl16te1dbqsp5np73bh2.png)\n\nEmbark on these exciting projects to master frontend web development in 2024. Each project offers a unique set of challenges and learning opportunities, equipping you with the skills needed to excel in the dynamic field of web development. Happy coding! 🚀\n\n**Author**: [Mukesh Kuiry](https://dev.to/mukeshkuiry)",
    "shortDescription": "Want to Master Frontend Web Development in 2024?  Whether you're eager to start your journey in...",
    "htmlMeta": "<meta property=\"og:title\" content=\"9 Project Ideas to Master Frontend Development in 2024 | **with resource**\">\n<meta property=\"og:description\" content=\"Want to Master Frontend Web Development in 2024?  Whether you're eager to start your journey in...\">\n<meta name=\"keywords\" content=\"webdev, beginners, tutorial, frontend, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y0iaCgoA--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20e5kfvrgxez5l4vxzav.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "9-Project-Ideas-to-Master-Frontend-Development-in-2024-or-**with-resource**",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20e5kfvrgxez5l4vxzav.jpg"
  }
]
