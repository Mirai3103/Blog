[
  {
    "title": "Drag and Drop Kanban board from scratch with React üî•",
    "url": "https://dev.to/nasif2ahmed/drag-and-drop-kanban-board-from-scratch-with-react-1j9a",
    "tags": [
      "webdev",
      "react",
      "javascript",
      "typescript"
    ],
    "published_at": 1703529747000,
    "markdownContent": "We all used those [Kanban](https://en.wikipedia.org/wiki/Kanban_(development))\\-style todo or task management apps where there are columns for each stages of a tasks and we can drag and drop tasks from one column to another.\n\nImplementing this drag and drop feature in react is way easier than I thought. Everything you need is already there without using any library or package. So let's get started. üöÄ\n\n\\*\\*\\* ( Typescript is used but its not noticable in code examples JS users can easily understand and the CSS styles are omited in the code examples. Get to the [github link](https://github.com/NasifAhmed/dnd-article) to see the full code. )\n\n## [](#the-idea)The idea üí°\n\nThe main idea behind it is pretty simple. We are going to use default HTML Drag and Drop API that uses various drag and drop events. To make any HTML element draggable we just need to add draggable attribute to an element. Then we will maintain a state where will store data for all the dropped elements and then show them in the div. To achieve this will use various drag and drop even listeners already available with HTML5 and React.\n\nüéØ The main trick is here is that we can not move an element/component literally. We will pass its data with it when we drag and then recreate the element/component again from the passed data inside the div we are dropping it in.\n\nWe will use events listeners like :\n\n1.  [OnDrop](https://www.w3schools.com/jsref/event_ondrop.asp) : This event activates when a valid draggable element is dropped in its area.\n2.  [OnDragStart](https://www.w3schools.com/jsref/event_ondragstart.asp) : This is fired when dragging of an element is started.\n3.  [OnDragEnd](https://www.w3schools.com/jsref/event_ondragend.asp) : This is fired when dragging is ended.\n4.  [OnDragOver](https://www.w3schools.com/jsref/event_ondragover.asp) : This is fired when we drag over the area of an element\n\nThere are many more but for our use these are enough. So lets start the implementation.\n\n## [](#the-implementation)The implementation üßë‚Äçüíª\n\nLet's create some task elements in a div from where we will drag them from :\n\n[![The task divs](https://res.cloudinary.com/practicaldev/image/fetch/s--FLr-rNGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xvzj237bq52d24cd2r6.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--FLr-rNGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xvzj237bq52d24cd2r6.png)\n\nand a todo div where we will drop them :\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--vKJSHa0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2xciaohy50s770c0ak8.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--vKJSHa0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2xciaohy50s770c0ak8.png)\n\nNow to make the task elements draggable we just add the draggable attribute.  \n\n```tsx\n<div\n    className=\"...\"\n    draggable\n>\n    Task 1\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow we can drag the task div. When we drag an element we need to pass its data with it so that we can recreate it. In this we case will pass its name.\n\nTo do this lets use `onDragStart` which fires when we start dragging an element.  \n\n```tsx\n<div\n    className=\"...\"\n    draggable\n    onDragStart={(e) => {\n        handleOnDrag(e, \"Task 1\");\n    }}\n>\n    Task 1\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere we are passing the event e and the name of the task to the `handleOnDrag` function.\n\nLets write the `handleOnDrag` function  \n\n```typescript\nfunction handleOnDrag(e: React.DragEvent, name: string) {\n    e.dataTransfer.setData(\"name\", name);\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere we are setting the name string as data under `\"name\"` key. Now whenever we drag it the name data will go along with it.\n\nWe handled the dragging part now lets drop it.\n\nWe need a state where we will store data for all the dropped tasks and later show them in the div where we dropped them.  \n\n```tsx\nconst [tasks, setTasks] = useState<string[]>()\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow we will use `onDrop` attribute to signal the dropping event. But before doing this we have to handle `onDragOver` for an edge case. Just do this :  \n\n```tsx\n<div \n    className=\"...\"\n    onDragOver={handleOnDragOver}\n>\n    {/* The div we are dropping the task in */}\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd now the `handleOnDragOver` function  \n\n```tsx\nfunction handleOnDragOver(e: React.DragEvent) {\n    e.preventDefault();\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis will stop a default behavior where the onDragOver keeps firing idefinately.\n\nNow for the `onDrop`  \n\n```tsx\n<div \n    className=\"...\"\n    onDragOver={handleOnDragOver}\n    onDrop={handleOnDrop}\n>\n    {/* The div we are dropping the task in */}\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow lets write the `handleOnDrop` function  \n\n```tsx\nfunction handleOnDrop(e: React.DragEvent) {\n    if(tasks) {\n        setTasks([...tasks,e.dataTransfer.getData(\"name\")] )\n    } else {\n        setTasks([e.dataTransfer.getData(\"name\")])\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere we are creating a new array with the dropped task div's data and setting that array in the `tasks` state. The `e.dataTransfer.getData(\"name\")` part will look familiar. Because we used `e.dataTransfer.setData(\"name\", name)` in the `handleOnDrag` function to name the dragged task. And now we are getting that name data that we set previously when we started dragging it.\n\nNow we have the data for the task that we are dropping. We now just have to show the task in the div using the data we got. We will use the same Task div we created earlier, inside the div we dropping it in. We will map through all the tasks in the `tasks` state and show them one by one.  \n\n```tsx\n<div \n    className=\"...\"\n    onDragOver={handleOnDragOver}\n    onDrop={handleOnDrop}\n>\n    {tasks &&\n        tasks.map((taskName) => {\n            return (\n                <div\n                    className=\"...\"\n                    draggable\n                    onDragStart={(e) => {\n                        handleOnDrag(e, taskName);\n                    }}\n                >\n                    {taskName}\n                </div>\n            );\n        })}\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nFinally we have the dragged task in the div we dropped it in.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--Ip2MINV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7d72aum4ucdzzyyos6k.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--Ip2MINV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7d72aum4ucdzzyyos6k.gif)\n\nBut there is a catch. The Task is getting duplicated every time we drag and drop it the task again in the div.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--Te5r8sPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3lro79fr2bmw2x67lbc.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--Te5r8sPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3lro79fr2bmw2x67lbc.gif)\n\nTo solve we have to delete the previous instance of the task in the state when we move it. Its pretty easy to do with `filter()`  \n\n```tsx\nfunction handleOnDrop(e: React.DragEvent) {\n    if(tasks) {\n        setTasks([\n            ...tasks.filter(\n                (taskName) => taskName !== e.dataTransfer.getData(\"name\")\n            ),\n            e.dataTransfer.getData(\"name\"),\n        ]);\n    } else {\n        setTasks([e.dataTransfer.getData(\"name\")])\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow everything is working. We can drag tasks from the list and drop them in the Todo div.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--YbtI9TNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjiwh4yx8djfnbqd54hk.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--YbtI9TNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjiwh4yx8djfnbqd54hk.gif)\n\n## [](#how-to-extend-the-idea-further)How to extend the idea further ‚û°Ô∏è\n\nThe basic stuff is set up. Now we can make it more user friendly by giving visual feedback when we start dragging the task and when we drop it. For that we can use `onDragStart`, `onDragEnd`, `onDragOver` etc. events to change the CSS styles of the elements. We can also add animations.\n\nIn part 2, we we will do all of these and also add two more columns for ongoing and completed tasks and make a fully functioning Kanban board-like todo board. We will need to manage three separate states and many more complexities. Part 2 coming soon ‚úÖ\n\nPart 2 is releasedüî•\n\nCheck it out [here](https://dev.to/nasif2ahmed/drag-and-drop-kanban-board-from-scratch-with-react-part-2-f5e)\n\n**Link to full code** : [Github Link](https://github.com/NasifAhmed/dnd-article)\n\nI hope this was helpful to you üòä  \nFollow me on [Twitter](https://twitter.com/nasif2ahmed) and [LinkedIn](https://www.linkedin.com/in/nasif2ahmed/)  \nThanks for reading üòá\n\n**Author**: [Ahmed](https://dev.to/nasif2ahmed)",
    "shortDescription": "We all used those Kanban-style todo or task management apps where there are columns for each stages...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Drag and Drop Kanban board from scratch with React üî•\">\n<meta property=\"og:description\" content=\"We all used those Kanban-style todo or task management apps where there are columns for each stages...\">\n<meta name=\"keywords\" content=\"webdev, react, javascript, typescript, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZPtEYA9l--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ort5zspneg4gd7ehg1vj.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Drag-and-Drop-Kanban-board-from-scratch-with-React",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ort5zspneg4gd7ehg1vj.png"
  },
  {
    "title": "Build a full stack app with Rust, Next.js and Docker",
    "url": "https://dev.to/francescoxx/build-a-full-stack-app-with-rust-nextjs-and-docker-436h",
    "tags": [
      "typescript",
      "react",
      "webdev",
      "programming"
    ],
    "published_at": 1702998985000,
    "markdownContent": "By the end of this article, you will understand and create a simple yet complete full stack app using the following:\n\n*   Next.js 14 (TypeScript)\n*   Tailwind CSS\n*   Rust (no framework, Serde for serialization)\n*   PostgreSQL\n*   Docker\n*   Docker Compose\n\nThere are MANY technologies, but we'll keep the example as basic as possible to make it understandable.\n\nWe will proceed with a bottom-up approach, starting with the database and ending with the frontend.\n\nIf you prefer a video version  \n\nAll the code is available for free on [GitHub](https://youtu.be/77RjzJtC_g4) (link in video description).\n\n## [](#architecture)Architecture\n\nBefore we start, here is a simple schema explaining the app's architecture.\n\nBuild a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--NLSwG9jF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e336ksrpubhepe4ekztf.png)](https://youtu.be/77RjzJtC_g4)\n\nThe frontend is a Next.js app with TypeScript and Tailwind CSS.\n\nThe backend is written in plain Rust, without any framework, but we'll use Serde for serialization and Deserialization.\n\nThe database is PostgreSQL. We will use Docker to run the database, the backend, and also the frontend (you can also use Vercel). We will use Docker Compose to run the frontend, the backend, and the database together.\n\n## [](#prerequisites)Prerequisites\n\n*   Basic knowledge of what is a frontend, a backend, an API, and a database\n*   Docker installed on your machine\n*   Rust installed on your machine (we will use cargo to build the backend)\n*   (optional) Postman or any other tool to make HTTP requests\n\n## [](#1-preparation)1\\. Preparation\n\nCreate any folder you want, and then open it with your favorite code editor.  \n\n```shell\nmkdir <YOUR_FOLDER>\ncd <YOUR_FOLDER>\ncode .\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nInitialize a git repository.  \n\n```plaintext\ngit init\ntouch .gitignore\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nPopulate the `.gitignore` file with the following content:  \n\n```plaintext\n*node_modules\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate a file called `compose.yaml` in the project's root.  \n\n```plaintext\ntouch compose.yaml\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nYour projects should look like this:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--lf03YxRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hodmnlyq5sawvf46pc7.png)](https://youtu.be/77RjzJtC_g4)\n\nWe are ready to create the fullstack app and build it from the bottom up, starting with the database.\n\nAfter each step, we will test the app's current state to ensure that everything is working as expected.\n\n## [](#2-database)2\\. Database\n\nWe will use Postgres but not install it on our machine. Instead, we will use Docker to run it in a container. This way, we can easily start and stop the database without installing it on our machine.\n\nOpen the file `compose.yaml` and add the following content:  \n\n```yaml\nservices:\n  db:\n    container_name: db\n    image: postgres:13\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - 5432:5432\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n\nvolumes:\n  pgdata: {}\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nthen type in your terminal  \n\n```shell\ndocker compose up -d\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis will pull the Postgres image from Docker Hub and start the container. The `-d` flag means that the container will run in detached mode so we can continue to use the terminal.\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--4xr1tOmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0694qmlj0fr5dg9splw6.png)](https://youtu.be/77RjzJtC_g4)\n\nCheck if the container is running:  \n\n```plaintext\ndocker ps -a\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nStep into the db container  \n\n```plaintext\ndocker exec -it db psql -U postgres\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow that you are in the Postgres container, you can type:  \n\n```plaintext\n\\l\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n```plaintext\n\\dt\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd you should see no relations.\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--JIxhuZ-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yz2e2zpl8328ypomuf6.png)](https://youtu.be/77RjzJtC_g4)\n\nYou can now exit the container with the `exit` command.\n\n## [](#3-backend)3\\. Backend\n\nThe first step is done. Now, we will create the backend. We will use Rust.\n\nLet's create the backend app using cargo, the Rust package manager.  \n\n```shell\ncargo new backend\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nOpen the file called `Cargo.toml` and add the following content:  \n\n```toml\npostgres = \"0.19\"\nserde = \"1.0\"\nserde_json = \"1.0\"\nserde_derive = \"1.0\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n`postgres` is the Postgres driver for Rust.  \n`serde` is a library to serialize and deserialize.  \n`serde_json` is a library specific for JSON.  \n`serde_derive` is a library to derive the Serialize and Deserialize traits (macro)\n\nYour `Cargo.toml` file should look like this:  \n\n```plaintext\n[package]\nname = \"rust-crud-api\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\npostgres = \"0.19\"\nserde = \"1.0\"\nserde_json = \"1.0\"\nserde_derive = \"1.0\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nPlease notice that the Package name could differ based on the name you gave to your project.\n\nYour project should now look like this:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--7hPS0b3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hh3djbna7t6i8itfkpoh.png)](https://youtu.be/77RjzJtC_g4)\n\nWe are now ready to code the application.\n\n### [](#code-the-rust-backend-application)üë©‚Äçüíª Code the Rust backend application\n\nWe will go step by step:\n\n1.  Import the dependencies.\n2.  Create the model (a user with Id, name, and email) and add constants.\n3.  Main function: database connection and TCP server.\n4.  Utility functions: set\\_database, get\\_id, get\\_user\\_request\\_body.\n5.  Create the routes in a function (endpoints).\n6.  Create utility functions.\n7.  Create the controllers.\n\nFor this project, we will code everything in a single file of ~200 lines of code.\n\nThis is not a best practice, but it will help us focus on the Rust code, not the project structure.\n\nAll the code is available on GitHub (link in the video description).\n\n### [](#import-the-dependencies)‚¨áÔ∏è Import the dependencies\n\nOpen the `main.rs file,` in the `src` folder, delete all the code, and add the following imports:  \n\n```rust\nuse postgres::{ Client, NoTls };\nuse postgres::Error as PostgresError;\nuse std::net::{ TcpListener, TcpStream };\nuse std::io::{ Read, Write };\nuse std::env;\n\n#[macro_use]\nextern crate serde_derive;\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n`Client` is used to connect to the database.  \n`NoTls` is used to connect to the database without TLS.  \n`PostgresError` is the error type returned by the Postgres driver.  \n`TcpListener` and `TcpStream` to create a TCP server.  \n`Read` and `Write` are used to read and write from a TCP stream.  \n`env` is used to read the environment variables.\n\nthe `#[macro_use]` attribute is used to import the `serde_derive` macro.\n\nWe will use it to derive our model's `Serialize` and `Deserialize` traits.\n\n### [](#create-the-model)ü•ª Create the model\n\nJust below the imports, add the following code:  \n\n```rust\n//Model: User struct with id, name, email\n#[derive(Serialize, Deserialize)]\nstruct User {\n    id: Option<i32>,\n    name: String,\n    email: String,\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe will use this model to represent a user in our application.\n\n*   `id` is an integer and is optional. The reason is that we don't provide the id when we create or update a new user. The database will generate it for us. But we still want to return the user with an id when we get them.\n    \n*   `name` is a string, and it is mandatory. We will use it to store the name of the user.\n    \n*   `email` is a string, and it is mandatory. We will use it to store the user's email (there is no check if it's a valid email).\n    \n\n### [](#constants)ü™® Constants\n\nJust below the model, add the following constants:  \n\n```rust\n//DATABASE URL\nconst DB_URL: &str = env!(\"DATABASE_URL\");\n\n//constants\nconst OK_RESPONSE: &str =\n    \"HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nAccess-Control-Allow-Origin: *\\r\\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\\r\\nAccess-Control-Allow-Headers: Content-Type\\r\\n\\r\\n\";\nconst NOT_FOUND: &str = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\";\nconst INTERNAL_ERROR: &str = \"HTTP/1.1 500 INTERNAL ERROR\\r\\n\\r\\n\";\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n*   `DATABASE_URL` is the environment variable that we will use to connect to the database. We will set it later.\n    \n*   `OK_RESPONSE` is the response that we will send when everything is ok. It contains the status code, the content type, and the CORS headers.\n    \n*   `NOT_FOUND` is the response that we will send when the requested resource is not found.\n    \n*   `INTERNAL_ERROR` is the response that we will send when there is an internal error.\n    \n\n### [](#main-function)üè† Main function\n\nJust below the constants, add the following code:  \n\n```rust\n//main function\nfn main() {\n    //Set Database\n    if let Err(_) = set_database() {\n        println!(\"Error setting database\");\n        return;\n    }\n\n    //start server and print port\n    let listener = TcpListener::bind(format!(\"0.0.0.0:8080\")).unwrap();\n    println!(\"Server listening on port 8080\");\n\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) => {\n                handle_client(stream);\n            }\n            Err(e) => {\n                println!(\"Unable to connect: {}\", e);\n            }\n        }\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n*   `set_database` is a function that we will create later. It will be used to connect to the database.\n*   `TcpListener::bind` is used to create a TCP server listening on port 8080.\n*   `listener.incoming()` is used to get the incoming connections.\n\n### [](#utility-functions)‚õëÔ∏è Utility functions\n\nNow, out of the main function, add the three following utility functions. I will keep them at the bottom of the file, but you can put them wherever you want.  \n\n```rust\n//db setup\nfn set_database() -> Result<(), PostgresError> {\n    let mut client = Client::connect(DB_URL, NoTls)?;\n    client.batch_execute(\n        \"\n        CREATE TABLE IF NOT EXISTS users (\n            id SERIAL PRIMARY KEY,\n            name VARCHAR NOT NULL,\n            email VARCHAR NOT NULL\n        )\n    \"\n    )?;\n    Ok(())\n}\n\n//Get id from request URL\nfn get_id(request: &str) -> &str {\n    request.split(\"/\").nth(4).unwrap_or_default().split_whitespace().next().unwrap_or_default()\n}\n\n//deserialize user from request body without id\nfn get_user_request_body(request: &str) -> Result<User, serde_json::Error> {\n    serde_json::from_str(request.split(\"\\r\\n\\r\\n\").last().unwrap_or_default())\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n*   `set_database` connects to the database and creates the `users` table if it doesn't exist.\n*   `get_id` is used to get the id from the request URL.\n*   `get_user_request_body` is used to deserialize the user from the request body (without the id) for the `Create` and `Update` endpoints.\n\n### [](#handle-client)üö¶ Handle client\n\nBetween the main function and the utility functions, add the following code (no worries, there will be the final code at the end of the article):  \n\n```rust\n//handle requests\nfn handle_client(mut stream: TcpStream) {\n    let mut buffer = [0; 1024];\n    let mut request = String::new();\n\n    match stream.read(&mut buffer) {\n        Ok(size) => {\n            request.push_str(String::from_utf8_lossy(&buffer[..size]).as_ref());\n\n            let (status_line, content) = match &*request {\n                r if r.starts_with(\"OPTIONS\") => (OK_RESPONSE.to_string(), \"\".to_string()),\n                r if r.starts_with(\"POST /api/rust/users\") => handle_post_request(r),\n                r if r.starts_with(\"GET /api/rust/users/\") => handle_get_request(r),\n                r if r.starts_with(\"GET /api/rust/users\") => handle_get_all_request(r),\n                r if r.starts_with(\"PUT /api/rust/users/\") => handle_put_request(r),\n                r if r.starts_with(\"DELETE /api/rust/users/\") => handle_delete_request(r),\n                _ => (NOT_FOUND.to_string(), \"404 not found\".to_string()),\n            };\n\n            stream.write_all(format!(\"{}{}\", status_line, content).as_bytes()).unwrap();\n        }\n        Err(e) => eprintln!(\"Unable to read stream: {}\", e),\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe create a buffer and then a string for the incoming requests.\n\nUsing the `match` statement in Rust, we can check the request and call the right function to handle it.\n\nIf we don't have a match, we send back a `404` error.\n\nLast, we set the stream to write the response back to the client and handle any error.\n\n### [](#controllers)üéõÔ∏è Controllers\n\nNow, let's create the functions that will handle the requests.\n\nThey are five functions, one for each endpoint:\n\n*   `handle_post_request` for the `Create` endpoint\n*   `handle_get_request` for the `Read` endpoint\n*   `handle_get_all_request` for the `Read All` endpoint\n*   `handle_put_request` for the `Update` endpoint\n*   `handle_delete_request` for the `Delete` endpoint\n\nAdd the code below the `handle_client` function:  \n\n```rust\n//handle post request\nfn handle_post_request(request: &str) -> (String, String) {\n    match (get_user_request_body(request), Client::connect(DB_URL, NoTls)) {\n        (Ok(user), Ok(mut client)) => {\n            // Insert the user and retrieve the ID\n            let row = client\n                .query_one(\n                    \"INSERT INTO users (name, email) VALUES ($1, $2) RETURNING id\",\n                    &[&user.name, &user.email]\n                )\n                .unwrap();\n\n            let user_id: i32 = row.get(0);\n\n            // Fetch the created user data\n            match client.query_one(\"SELECT id, name, email FROM users WHERE id = $1\", &[&user_id]) {\n                Ok(row) => {\n                    let user = User {\n                        id: Some(row.get(0)),\n                        name: row.get(1),\n                        email: row.get(2),\n                    };\n\n                    (OK_RESPONSE.to_string(), serde_json::to_string(&user).unwrap())\n                }\n                Err(_) =>\n                    (INTERNAL_ERROR.to_string(), \"Failed to retrieve created user\".to_string()),\n            }\n        }\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//handle get request\nfn handle_get_request(request: &str) -> (String, String) {\n    match (get_id(&request).parse::<i32>(), Client::connect(DB_URL, NoTls)) {\n        (Ok(id), Ok(mut client)) =>\n            match client.query_one(\"SELECT * FROM users WHERE id = $1\", &[&id]) {\n                Ok(row) => {\n                    let user = User {\n                        id: row.get(0),\n                        name: row.get(1),\n                        email: row.get(2),\n                    };\n\n                    (OK_RESPONSE.to_string(), serde_json::to_string(&user).unwrap())\n                }\n                _ => (NOT_FOUND.to_string(), \"User not found\".to_string()),\n            }\n\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//handle get all request\nfn handle_get_all_request(_request: &str) -> (String, String) {\n    match Client::connect(DB_URL, NoTls) {\n        Ok(mut client) => {\n            let mut users = Vec::new();\n\n            for row in client.query(\"SELECT id, name, email FROM users\", &[]).unwrap() {\n                users.push(User {\n                    id: row.get(0),\n                    name: row.get(1),\n                    email: row.get(2),\n                });\n            }\n\n            (OK_RESPONSE.to_string(), serde_json::to_string(&users).unwrap())\n        }\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//handle put request\nfn handle_put_request(request: &str) -> (String, String) {\n    match\n        (\n            get_id(&request).parse::<i32>(),\n            get_user_request_body(&request),\n            Client::connect(DB_URL, NoTls),\n        )\n    {\n        (Ok(id), Ok(user), Ok(mut client)) => {\n            client\n                .execute(\n                    \"UPDATE users SET name = $1, email = $2 WHERE id = $3\",\n                    &[&user.name, &user.email, &id]\n                )\n                .unwrap();\n\n            (OK_RESPONSE.to_string(), \"User updated\".to_string())\n        }\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//handle delete request\nfn handle_delete_request(request: &str) -> (String, String) {\n    match (get_id(&request).parse::<i32>(), Client::connect(DB_URL, NoTls)) {\n        (Ok(id), Ok(mut client)) => {\n            let rows_affected = client.execute(\"DELETE FROM users WHERE id = $1\", &[&id]).unwrap();\n\n            //if rows affected is 0, user not found\n            if rows_affected == 0 {\n                return (NOT_FOUND.to_string(), \"User not found\".to_string());\n            }\n\n            (OK_RESPONSE.to_string(), \"User deleted\".to_string())\n        }\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n*   Some use the `get_id` function to get the id from the request URL.\n    \n*   The `get_user_request_body` function is used to get the user from the request body in JSON format and deserialize it into a `User` struct.\n    \n*   There is some error handling in case the request is invalid, or the database connection fails.\n    \n\n### [](#recap-of-the-rust-backend-application)üìù Recap of the Rust backend application\n\nHere is the complete `main.rs` file:  \n\n```rust\nuse postgres::{ Client, NoTls };\nuse postgres::Error as PostgresError;\nuse std::net::{ TcpListener, TcpStream };\nuse std::io::{ Read, Write };\nuse std::env;\n\n#[macro_use]\nextern crate serde_derive;\n\n//Model: User struct with id, name, email\n#[derive(Serialize, Deserialize)]\nstruct User {\n    id: Option<i32>,\n    name: String,\n    email: String,\n}\n\n//DATABASE URL\nconst DB_URL: &str = env!(\"DATABASE_URL\");\n\n//constants\nconst OK_RESPONSE: &str =\n    \"HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nAccess-Control-Allow-Origin: *\\r\\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\\r\\nAccess-Control-Allow-Headers: Content-Type\\r\\n\\r\\n\";\nconst NOT_FOUND: &str = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\";\nconst INTERNAL_ERROR: &str = \"HTTP/1.1 500 INTERNAL ERROR\\r\\n\\r\\n\";\n\n//main function\nfn main() {\n    //Set Database\n    if let Err(_) = set_database() {\n        println!(\"Error setting database\");\n        return;\n    }\n\n    //start server and print port\n    let listener = TcpListener::bind(format!(\"0.0.0.0:8080\")).unwrap();\n    println!(\"Server listening on port 8080\");\n\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) => {\n                handle_client(stream);\n            }\n            Err(e) => {\n                println!(\"Unable to connect: {}\", e);\n            }\n        }\n    }\n}\n\n//handle requests\nfn handle_client(mut stream: TcpStream) {\n    let mut buffer = [0; 1024];\n    let mut request = String::new();\n\n    match stream.read(&mut buffer) {\n        Ok(size) => {\n            request.push_str(String::from_utf8_lossy(&buffer[..size]).as_ref());\n\n            let (status_line, content) = match &*request {\n                r if r.starts_with(\"OPTIONS\") => (OK_RESPONSE.to_string(), \"\".to_string()),\n                r if r.starts_with(\"POST /api/rust/users\") => handle_post_request(r),\n                r if r.starts_with(\"GET /api/rust/users/\") => handle_get_request(r),\n                r if r.starts_with(\"GET /api/rust/users\") => handle_get_all_request(r),\n                r if r.starts_with(\"PUT /api/rust/users/\") => handle_put_request(r),\n                r if r.starts_with(\"DELETE /api/rust/users/\") => handle_delete_request(r),\n                _ => (NOT_FOUND.to_string(), \"404 not found\".to_string()),\n            };\n\n            stream.write_all(format!(\"{}{}\", status_line, content).as_bytes()).unwrap();\n        }\n        Err(e) => eprintln!(\"Unable to read stream: {}\", e),\n    }\n}\n\n//handle post request\nfn handle_post_request(request: &str) -> (String, String) {\n    match (get_user_request_body(request), Client::connect(DB_URL, NoTls)) {\n        (Ok(user), Ok(mut client)) => {\n            // Insert the user and retrieve the ID\n            let row = client\n                .query_one(\n                    \"INSERT INTO users (name, email) VALUES ($1, $2) RETURNING id\",\n                    &[&user.name, &user.email]\n                )\n                .unwrap();\n\n            let user_id: i32 = row.get(0);\n\n            // Fetch the created user data\n            match client.query_one(\"SELECT id, name, email FROM users WHERE id = $1\", &[&user_id]) {\n                Ok(row) => {\n                    let user = User {\n                        id: Some(row.get(0)),\n                        name: row.get(1),\n                        email: row.get(2),\n                    };\n\n                    (OK_RESPONSE.to_string(), serde_json::to_string(&user).unwrap())\n                }\n                Err(_) =>\n                    (INTERNAL_ERROR.to_string(), \"Failed to retrieve created user\".to_string()),\n            }\n        }\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//handle get request\nfn handle_get_request(request: &str) -> (String, String) {\n    match (get_id(&request).parse::<i32>(), Client::connect(DB_URL, NoTls)) {\n        (Ok(id), Ok(mut client)) =>\n            match client.query_one(\"SELECT * FROM users WHERE id = $1\", &[&id]) {\n                Ok(row) => {\n                    let user = User {\n                        id: row.get(0),\n                        name: row.get(1),\n                        email: row.get(2),\n                    };\n\n                    (OK_RESPONSE.to_string(), serde_json::to_string(&user).unwrap())\n                }\n                _ => (NOT_FOUND.to_string(), \"User not found\".to_string()),\n            }\n\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//handle get all request\nfn handle_get_all_request(_request: &str) -> (String, String) {\n    match Client::connect(DB_URL, NoTls) {\n        Ok(mut client) => {\n            let mut users = Vec::new();\n\n            for row in client.query(\"SELECT id, name, email FROM users\", &[]).unwrap() {\n                users.push(User {\n                    id: row.get(0),\n                    name: row.get(1),\n                    email: row.get(2),\n                });\n            }\n\n            (OK_RESPONSE.to_string(), serde_json::to_string(&users).unwrap())\n        }\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//handle put request\nfn handle_put_request(request: &str) -> (String, String) {\n    match\n        (\n            get_id(&request).parse::<i32>(),\n            get_user_request_body(&request),\n            Client::connect(DB_URL, NoTls),\n        )\n    {\n        (Ok(id), Ok(user), Ok(mut client)) => {\n            client\n                .execute(\n                    \"UPDATE users SET name = $1, email = $2 WHERE id = $3\",\n                    &[&user.name, &user.email, &id]\n                )\n                .unwrap();\n\n            (OK_RESPONSE.to_string(), \"User updated\".to_string())\n        }\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//handle delete request\nfn handle_delete_request(request: &str) -> (String, String) {\n    match (get_id(&request).parse::<i32>(), Client::connect(DB_URL, NoTls)) {\n        (Ok(id), Ok(mut client)) => {\n            let rows_affected = client.execute(\"DELETE FROM users WHERE id = $1\", &[&id]).unwrap();\n\n            //if rows affected is 0, user not found\n            if rows_affected == 0 {\n                return (NOT_FOUND.to_string(), \"User not found\".to_string());\n            }\n\n            (OK_RESPONSE.to_string(), \"User deleted\".to_string())\n        }\n        _ => (INTERNAL_ERROR.to_string(), \"Internal error\".to_string()),\n    }\n}\n\n//db setup\nfn set_database() -> Result<(), PostgresError> {\n    let mut client = Client::connect(DB_URL, NoTls)?;\n    client.batch_execute(\n        \"\n        CREATE TABLE IF NOT EXISTS users (\n            id SERIAL PRIMARY KEY,\n            name VARCHAR NOT NULL,\n            email VARCHAR NOT NULL\n        )\n    \"\n    )?;\n    Ok(())\n}\n\n//Get id from request URL\nfn get_id(request: &str) -> &str {\n    request.split(\"/\").nth(4).unwrap_or_default().split_whitespace().next().unwrap_or_default()\n}\n\n//deserialize user from request body without id\nfn get_user_request_body(request: &str) -> Result<User, serde_json::Error> {\n    serde_json::from_str(request.split(\"\\r\\n\\r\\n\").last().unwrap_or_default())\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe are done with the app code. Now it's the turn of Docker.\n\n## [](#dockerize-the-backend)üê≥ Dockerize the backend\n\nWe will build the Rust app directly inside the image. We will use an official Rust image as the base image. We will also use the official Postgres image as a base image for the database.\n\nWe will create 2 files:\n\n*   .dockerignore: to ignore files and folders that we don't want to copy in the image filesystem\n*   rust.dockerfile: to build the Rust image\n\nYou can create them using the terminal or your code editor.  \n\n```plaintext\ntouch .dockerignore rust.dockerfile\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nYour project should look like this:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--I6Ow612J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6v292fw52zlnvc1q3wx.png)](https://youtu.be/77RjzJtC_g4)\n\n### [](#dockerignore)üö´ .dockerignore\n\nOpen the .dockerignore file and add the following:  \n\n```docker\n**/target\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis is to avoid copying the target folder in the image filesystem.\n\n### [](#dockerfile)üêã Dockerfile\n\nWe will use a multi-stage build. We will have:\n\n*   a build stage: to build the Rust app\n*   a production stage: to run the Rust app\n\nOpen the Dockerfile and add the following (explanations in comments):  \n\n```docker\n# Build stage\nFROM rust:1.69-buster as builder\n\nWORKDIR /app\n\n# Accept the build argument\nARG DATABASE_URL\n\n# Make sure to use the ARG in ENV\nENV DATABASE_URL=$DATABASE_URL\n\n# Copy the source code\nCOPY . .\n\n# Build the application\nRUN cargo build --release\n\n# Production stage\nFROM debian:buster-slim\n\nWORKDIR /usr/local/bin\n\nCOPY --from=builder /app/target/release/backend .\n\nCMD [\"./backend\"]\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nPlease note that we use `backend` as the executable's name. This is the name of the project folder. If you have a different name, please change it.\n\n### [](#update-the-docker-compose-file)üêô Update the Docker Compose file\n\nOpen the `compose.yaml` file and add the following content:  \n\n```yaml\nrustapp:\n    container_name: rustapp\n    image: francescoxx/rustapp:1.0.0\n    build:\n      context: ./backend\n      dockerfile: rust.dockerfile\n      args:\n        DATABASE_URL: postgres://postgres:postgres@db:5432/postgres\n    ports:\n      - '8080:8080'\n    depends_on:\n      - db\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n*   `container_name` is the name of the container\n*   `image` is the name of the image\n*   `build` is the build configuration\n*   `ports` is the port mapping\n*   `depends_on` is the dependency on the database container\n    \n*   Notice that the `DATABASE_URL` build argument is set to `postgres://postgres:postgres@db:5432/postgres`. `db` is the name of the service (and the container\\_name) of the Postgres container so that it will be resolved to the container IP address.\n    \n*   We use the `arg` property to pass the `DATABASE_URL` build argument to the Dockerfile.\n    \n*   We also use a named volume, `pg_data`, to persist the database data.\n    \n\nYour `compose.yaml` file should look like this:  \n\n```yaml\nservices:\n  rustapp:\n    container_name: rustapp\n    image: francescoxx/rustapp:1.0.0\n    build:\n      context: ./backend\n      dockerfile: rust.dockerfile\n      args:\n        DATABASE_URL: postgres://postgres:postgres@db:5432/postgres\n    ports:\n      - '8080:8080'\n    depends_on:\n      - db\n  db:\n    container_name: db\n    image: postgres:13\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - 5432:5432\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n\nvolumes:\n  pgdata: {}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow it's time to build the image and run the Rust backend app.\n\n### [](#build-the-image-and-run-the-rust-backend-app)üèóÔ∏è Build the image and run the Rust backend app\n\nWe need 2 more steps:\n\n*   build the Rust app image\n*   run the Rust app container\n\n### [](#build-the-rust-app-image)üèóÔ∏è Build the Rust app image\n\nIt's time to build the Rust app image. We will use the `docker compose build` command. This will build the image using the Dockerfile we created before.\n\n(Note: we might type `docker compose up`, but by doing that, we would skip understanding what's happening. In a nutshell, when we type `docker compose up`, Docker builds the images if needed and then runs the containers).  \n\n```plaintext\ndocker compose build\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis takes time because we are building the Rust app inside the image.\n\nAfter ~180 seconds (!), we should have the image built. This could be improved by using the cache of the Toml.lock file, but we want to make the example as simple as possible (we still have the whole next.js app to build!).\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--lf03YxRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hodmnlyq5sawvf46pc7.png)](https://youtu.be/77RjzJtC_g4)\n\n### [](#run-the-rust-container)üëü Run the Rust Container\n\n```shell\ndocker compose up -d rustapp\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow you can check if the container is running:  \n\n```shell\ndocker ps -a\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nLastly, you can check the postgres database by typing:  \n\n```plaintext\ndocker exec -it db psql -U postgres\n\\dt\nselect * from users;\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--f6h7OFRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jymhp828bkop64dy80s.png)](https://youtu.be/77RjzJtC_g4)\n\nThis does mean that the Rust app created the schema (in our case just a single table) and that the database is working.\n\n### [](#test-the-application)üß™ Test the application\n\nSince we don't have our frontend yet, we will use Postman to test the backend.\n\n*   get all users\n*   create 1 user\n*   create 2nd user\n*   get all users\n*   get user by id\n*   update user\n*   delete user\n*   get all users (final check)\n\nLet's check the endpoints. To get all the users, we can make a GET request to `http://localhost:8080/api/rust/users`.\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--DltSlfot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr3c8hzjjsat7a1joavp.png)](https://youtu.be/77RjzJtC_g4)\n\nAnd we should have an empty array.\n\nLet's create a user. We can make a POST request to `http://localhost:8080/api/rust/users` with the following body:  \n\n```json\n{\n    \"name\": \"sam\",\n    \"email\": \"sam@mail\"\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere is how the request looks like in Postman:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--nmyVW2Ph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7a5407gg3av4ybq49rr.png)](https://youtu.be/77RjzJtC_g4)\n\nLet's create a second user. We can make a POST request to `http://localhost:8080/api/rust/users` with the following body:  \n\n```json\n{\n    \"name\": \"Biraj\",\n    \"email\": \"biraj@mail\"\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere is how the request looks like in Postman:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--HYP7BEtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kputaeviya86692ly9nm.png)](https://youtu.be/77RjzJtC_g4)\n\nLet's create a third user. We can make a POST request to `http://localhost:8080/api/rust/users` with the following body:  \n\n```json\n{\n    \"name\": \"Emmanuel\",\n    \"email\": \"emmanuel@mail\"\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere is how the request looks like in Postman:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--72-0aauF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu66fccsrznatfxfid1i.png)](https://youtu.be/77RjzJtC_g4)\n\nIf we go on `localhost:8080/api/rust/users`, we should see the three users:  \n\n```json\n[\n    {\n        \"id\": 1,\n        \"name\": \"sam\",\n        \"email\": \"sam@mail\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Biraj\",\n        \"email\": \"biraj@mail\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Emmanuel\",\n        \"email\": \"emmanuel@mail\"\n    }\n]\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--rpQzIXnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fomy9v6pokqj2064jzvj.png)](https://youtu.be/77RjzJtC_g4)\n\nIf we go back on the psql command, and we type `select * from users;`, we should see the three users (we can get inside the container with the command `docker exec -it db psql -U postgres`):\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--nMgJTCEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtjxegz9zkwx7ig6r4zb.png)](https://youtu.be/77RjzJtC_g4)\n\nLet's try to update the user with id 2. We can make a PUT request to `http://localhost:8080/api/rust/users/3` with the following body:  \n\n```json\n{\n    \"name\": \"like thevideo\",\n    \"email\": \"sunscribe@mail\"\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe request should look like this in Postman:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--AsQ3yZUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evox2eqy8411cy1hqkm9.png)](https://youtu.be/77RjzJtC_g4)\n\nLast, we can delete the user with id 2. We can make a DELETE request to `http://localhost:8080/api/rust/users/2`.\n\nThe request should look like this in Postman:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--5qhs5Y7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws3dd5o93fysyw1h2v00.png)](https://youtu.be/77RjzJtC_g4)\n\nWe are now ready to build the frontend.\n\n## [](#4-frontend)4\\. Frontend\n\nNow that we have the backend up and running, we can proceed with the frontend.\n\nWe will use Next.js 14 with TypeScript and Tailwind.\n\nFrom the root folder of the project,  \n\n```plaintext\ncd ..\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd from the root folder of the project, run this command:  \n\n```plaintext\nnpx create-next-app@latest --no-git\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe use the --no-git flag because we already initialized a git repository at the project's root.\n\nAs options:\n\n*   What is your project named? `frontend`\n*   TypeScript? `Yes`\n*   EsLint? `Yes`\n*   Tailwind CSS? `Yes`\n*   Use the default directory structure? `Yes`\n*   App Router? `No` (not needed for this project)\n*   Customize the default import alias? `No`\n\nThis should create a new Next.js project in about one minute.\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--Dp-NcIuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xee4h91fj1isoselovhw.png)](https://youtu.be/77RjzJtC_g4)\n\nStep into the frontend folder:  \n\n```plaintext\ncd frontend\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nInstall Axios, we will use it to make HTTP requests (be sure to be in the `frontend` folder):  \n\n```plaintext\nnpm i axios\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nBefore we proceed, try to run the project:  \n\n```plaintext\nnpm run dev\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd open your browser at `http://localhost:3000`. You should see the default Next.js page.\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--849hYvKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v7fyh7dafe01zec1t0p.png)](https://youtu.be/77RjzJtC_g4)\n\n### [](#modify-the-stylesglobalcss-file)Modify the styles/global.css file\n\nIn the `src/frontend/src/styles/globals.css` file, replace the content with this one (to avoid some problems with Tailwind):  \n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 0, 0, 0; \n  --background-start-rgb: 214, 219, 220;\n  --background-end-rgb: 255, 255, 255;\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: linear-gradient(\n      to bottom,\n      transparent,\n      rgb(var(--background-end-rgb))\n    )\n    rgb(var(--background-start-rgb));\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#create-a-new-component)Create a new component\n\nIn the `/frontend/src` folder, create a new folder called `components` and inside it create a new file called `CardComponent.tsx` and add the following content:  \n\n```typescript\nimport React from 'react';\n\ninterface Card {\n  id: number; \n  name: string;\n  email: string;\n}\n\nconst CardComponent: React.FC<{ card: Card }> = ({ card }) => {\n  return (\n    <div className=\"bg-white shadow-lg rounded-lg p-2 mb-2 hover:bg-gray-100\">\n      <div className=\"text-sm text-gray-600\">ID: {card.id}</div>\n      <div className=\"text-lg font-semibold text-gray-800\">{card.name}</div>\n      <div className=\"text-md text-gray-700\">{card.email}</div>\n    </div>\n  );\n};\n\nexport default CardComponent;\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#create-a-userinterface-component)Create a UserInterface component\n\nIn the `/frontend/src/components` folder, create a file called `UserInterface.tsx` and add the following content:  \n\n```typescript\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CardComponent from './CardComponent';\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface UserInterfaceProps {\n  backendName: string;\n}\n\nconst UserInterface: React.FC<UserInterfaceProps> = ({ backendName }) => {\n  const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';\n  const [users, setUsers] = useState<User[]>([]);\n  const [newUser, setNewUser] = useState({ name: '', email: '' });\n  const [updateUser, setUpdateUser] = useState({ id: '', name: '', email: '' });\n\n  // Define styles based on the backend name\n  const backgroundColors: { [key: string]: string } = {\n    rust: 'bg-orange-500',\n  };\n\n  const buttonColors: { [key: string]: string } = {\n    rust: 'bg-orange-700 hover:bg-orange-600',\n  };\n\n  const bgColor = backgroundColors[backendName as keyof typeof backgroundColors] || 'bg-gray-200';\n  const btnColor = buttonColors[backendName as keyof typeof buttonColors] || 'bg-gray-500 hover:bg-gray-600';\n\n  // Fetch users\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`${apiUrl}/api/${backendName}/users`);\n        setUsers(response.data.reverse());\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, [backendName, apiUrl]);\n\n  // Create a user\n  const createUser = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(`${apiUrl}/api/${backendName}/users`, newUser);\n      setUsers([response.data, ...users]);\n      setNewUser({ name: '', email: '' });\n    } catch (error) {\n      console.error('Error creating user:', error);\n    }\n  };\n\n  // Update a user\n  const handleUpdateUser = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      await axios.put(`${apiUrl}/api/${backendName}/users/${updateUser.id}`, { name: updateUser.name, email: updateUser.email });\n      setUpdateUser({ id: '', name: '', email: '' });\n      setUsers(\n        users.map((user) => {\n          if (user.id === parseInt(updateUser.id)) {\n            return { ...user, name: updateUser.name, email: updateUser.email };\n          }\n          return user;\n        })\n      );\n    } catch (error) {\n      console.error('Error updating user:', error);\n    }\n  };\n\n  // Delete a user\n  const deleteUser = async (userId: number) => {\n    try {\n      await axios.delete(`${apiUrl}/api/${backendName}/users/${userId}`);\n      setUsers(users.filter((user) => user.id !== userId));\n    } catch (error) {\n      console.error('Error deleting user:', error);\n    }\n  };\n\n  return (\n    <div className={`user-interface ${bgColor} ${backendName} w-full max-w-md p-4 my-4 rounded shadow`}>\n      <img src={`/${backendName}logo.svg`} alt={`${backendName} Logo`} className=\"w-20 h-20 mb-6 mx-auto\" />\n      <h2 className=\"text-xl font-bold text-center text-white mb-6\">{`${backendName.charAt(0).toUpperCase() + backendName.slice(1)} Backend`}</h2>\n      {/* Form to add new user */}\n      <form onSubmit={createUser} className=\"mb-6 p-4 bg-blue-100 rounded shadow\">\n        <input\n          placeholder=\"Name\"\n          value={newUser.name}\n          onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}\n          className=\"mb-2 w-full p-2 border border-gray-300 rounded\"\n        />\n\n        <input\n          placeholder=\"Email\"\n          value={newUser.email}\n          onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\n          className=\"mb-2 w-full p-2 border border-gray-300 rounded\"\n        />\n        <button type=\"submit\" className=\"w-full p-2 text-white bg-blue-500 rounded hover:bg-blue-600\">\n          Add User\n        </button>\n      </form>\n      {/* Form to update user */}\n      <form onSubmit={handleUpdateUser} className=\"mb-6 p-4 bg-blue-100 rounded shadow\">\n        <input\n          placeholder=\"User ID\"\n          value={updateUser.id}\n          onChange={(e) => setUpdateUser({ ...updateUser, id: e.target.value })}\n          className=\"mb-2 w-full p-2 border border-gray-300 rounded\"\n        />\n        <input\n          placeholder=\"New Name\"\n          value={updateUser.name}\n          onChange={(e) => setUpdateUser({ ...updateUser, name: e.target.value })}\n          className=\"mb-2 w-full p-2 border border-gray-300 rounded\"\n        />\n        <input\n          placeholder=\"New Email\"\n          value={updateUser.email}\n          onChange={(e) => setUpdateUser({ ...updateUser, email: e.target.value })}\n          className=\"mb-2 w-full p-2 border border-gray-300 rounded\"\n        />\n        <button type=\"submit\" className=\"w-full p-2 text-white bg-green-500 rounded hover:bg-green-600\">\n          Update User\n        </button>\n      </form>\n      {/* Display users */}\n      <div className=\"space-y-4\">\n        {users.map((user) => (\n          <div key={user.id} className=\"flex items-center justify-between bg-white p-4 rounded-lg shadow\">\n            <CardComponent card={user} />\n            <button onClick={() => deleteUser(user.id)} className={`${btnColor} text-white py-2 px-4 rounded`}>\n              Delete User\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default UserInterface;\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nFor an explanation, check: [https://youtu.be/77RjzJtC\\_g4?si=Lr-B65Hmej-jh5Nb&t=1807](https://youtu.be/77RjzJtC_g4?si=Lr-B65Hmej-jh5Nb&t=1807)\n\n### [](#modify-the-indextsx-file)Modify the index.tsx file\n\nOpne the `index.tsx` file and replace the content with the following:  \n\n```typescript\nimport React from 'react';\nimport UserInterface from '../components/UserInterface'; \n\nconst Home: React.FC = () => {\n  return (\n    <main className=\"flex flex-wrap justify-center items-start min-h-screen bg-gray-100\">\n      <div className=\"m-4\">\n        <UserInterface backendName=\"rust\" />\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nFor the explanation, check: [https://youtu.be/77RjzJtC\\_g4?si=Lr-B65Hmej-jh5Nb&t=1807](https://youtu.be/77RjzJtC_g4?si=Lr-B65Hmej-jh5Nb&t=1807)\n\n### [](#test-the-frontend)üß™ Test the frontend\n\nWe are now ready to test the frontend.\n\nYou can use the UI to insert, update, and delete users.\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--MaI62TG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v3ocho05ypy6dehd2fj.png)](https://youtu.be/77RjzJtC_g4)\n\n### [](#dockerize-the-frontend)Dockerize the frontend\n\nDeploy a Next.js app with Docker.\n\nChange the `next.config.js` file in the `frontend` folder, replacing it with the following content:  \n\n```javascript\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'standalone'\n}\n\nmodule.exports = nextConfig\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate a file called `.dockerignore` in the `frontend` folder and add the following content:  \n\n```plaintext\n**/node_modules\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nTo dockerize the Next.js application, we will use the official Dockerfile provided by Vercel:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--WT7KH8Vt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsl1rlqikv8jwgdk1lid.png)](https://youtu.be/77RjzJtC_g4)\n\nYou can find it here: [https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile](https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile)\n\nCreate a file called `next.dockerfile` in the `frontend` folder and add the following content (it's directly from the vercel official docker example)  \n\n```plaintext\nFROM node:18-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\n# Install dependencies based on the preferred package manager\nCOPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./\nRUN \\\n  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \\\n  elif [ -f package-lock.json ]; then npm ci; \\\n  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \\\n  else echo \"Lockfile not found.\" && exit 1; \\\n  fi\n\n\n# Rebuild the source code only when needed\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\n# Next.js collects completely anonymous telemetry data about general usage.\n# Learn more here: https://nextjs.org/telemetry\n# Uncomment the following line in case you want to disable telemetry during the build.\n# ENV NEXT_TELEMETRY_DISABLED 1\n\nRUN yarn build && ls -l /app/.next\n\n\n# If using npm comment out above and use below instead\n# RUN npm run build\n\n# Production image, copy all the files and run next\nFROM base AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n# Uncomment the following line in case you want to disable telemetry during runtime.\n# ENV NEXT_TELEMETRY_DISABLED 1\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/public ./public\n\n# Set the correct permission for prerender cache\nRUN mkdir .next\nRUN chown nextjs:nodejs .next\n\n# Automatically leverage output traces to reduce image size\n# https://nextjs.org/docs/advanced-features/output-file-tracing\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\n\nEXPOSE 3000\n\nENV PORT 3000\n# set hostname to localhost\nENV HOSTNAME \"0.0.0.0\"\n\n# server.js is created by next build from the standalone output\n# https://nextjs.org/docs/pages/api-reference/next-config-js/output\nCMD [\"node\", \"server.js\"]\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow, let's update the `compose.yaml` file in the project's root, adding the `nextapp` service.\n\nBelow the updated version:  \n\n```plaintext\nservices:\n  nextapp:\n    container_name: nextapp\n    image: francescoxx/nextapp:1.0.0\n    build:\n      context: ./frontend\n      dockerfile: next.dockerfile\n    ports:\n      - 3000:3000\n    environment:\n      - NEXT_PUBLIC_API_URL=http://localhost:8080\n    depends_on:\n      - rustapp\n  rustapp:\n    container_name: rustapp\n    image: francescoxx/rustapp:1.0.0\n    build:\n      context: ./backend\n      dockerfile: rust.dockerfile\n      args:\n        DATABASE_URL: postgres://postgres:postgres@db:5432/postgres\n    ports:\n      - '8080:8080'\n    depends_on:\n      - db\n  db:\n    container_name: db\n    image: postgres:13\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - 5432:5432\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n\nvolumes:\n  pgdata: {}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd now, let's build the image and run the container:  \n\n```plaintext\ndocker compose build\ndocker compose up -d nextapp\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--KEj6_uJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ney65qufgji17o73kua9.png)](https://youtu.be/77RjzJtC_g4)\n\nYou can check if the 3 containers are running:  \n\n```plaintext\ndocker ps -a\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--lZW2t4Y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0esjbsxbvm3nx7409zr.png)](https://youtu.be/77RjzJtC_g4)\n\nIf you have the 3 services running, should be good to go.\n\nBefore we wrap up, let's make a final test using the UI.\n\n### [](#test-the-frontend)üß™ Test the frontend\n\nAs a final test, we can check if the frontend is working.\n\nTo create a new user, add a name and email\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--ZPJlRWd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz074rtr63119xkwj1e3.png)](https://youtu.be/77RjzJtC_g4)\n\nWe can check the list of users from the UI or directly from the database:  \n\n```plaintext\ndocker exec -it db psql -U postgres\n\\dt\nselect * from users;\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--bjPzrj4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou4q8uyyacc2fgzld947.png)](https://youtu.be/77RjzJtC_g4)\n\nWe can also update a user, or delete on. for example, let's update the user with id 7:\n\n[![Build a FULL STACK Web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose](https://res.cloudinary.com/practicaldev/image/fetch/s--iXXzrOhj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6czdeaulqnx7x9ztyojh.png)](https://youtu.be/77RjzJtC_g4)\n\nWell done, the tutorial si complete!\n\n### [](#recap)üìù Recap\n\nWe build a simple yet complete full-stack web app with Rust API, Next.js 14, Serde, Postgres, Docker, docker Compose.\n\nWe used Rust to build the backend API, Next.js 14 to build the frontend, Serde to serialize and deserialize the data, Postgres as the database, Docker to containerize the app, and docker Compose to run the app.\n\nIf you prefer a video version  \n\nAll the code is available for free on [GitHub](https://youtu.be/77RjzJtC_g4) (link in video description).\n\nIf you have any questions, comment below or in the [video comments](https://youtu.be/77RjzJtC_g4)\n\nYou can find me here:  \n[Francesco](https://francescociulla.com)\n\n**Author**: [Francesco Ciulla](https://dev.to/francescoxx)",
    "shortDescription": "By the end of this article, you will understand and  create a simple yet complete full stack app...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Build a full stack app with Rust, Next.js and Docker\">\n<meta property=\"og:description\" content=\"By the end of this article, you will understand and  create a simple yet complete full stack app...\">\n<meta name=\"keywords\" content=\"typescript, react, webdev, programming, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8gGysZjv--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2x5g0jwtcdeksiu8cae.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Build-a-full-stack-app-with-Rust-Next.js-and-Docker",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2x5g0jwtcdeksiu8cae.png"
  },
  {
    "title": "Tackling Polymorphism in Prisma",
    "url": "https://dev.to/zenstack/tackling-polymorphism-in-prisma-2o0a",
    "tags": [
      "webdev",
      "prisma",
      "typescript",
      "database"
    ],
    "published_at": 1703147885000,
    "markdownContent": "Prisma is a beloved ORM for NodeJS developers. As with every popular open-source project, it has a long wishlist. Here are two prominent examples:\n\n*   [Support for a Union type #2505](https://github.com/prisma/prisma/issues/2505)\n*   [Support for Polymorphic Associations #1644](https://github.com/prisma/prisma/issues/1644)\n\nThey are about the same thing and have received at least 1000 reactions in total. The ask is for modeling an inheritance hierarchy in the database. ORM‚Äôs responsibility is to fix the gap between the two world views: \"table + relations\" and \"object-oriented\". Polymorphism is an obvious missing piece in its mission.\n\nWe at [ZenStack](https://zenstack.dev) are Prisma believers. Otherwise, we wouldn‚Äôt have taken the trouble to build a whole new OSS project above it. Our unique approach allows us to pick up where Prisma left off, and in this post, I‚Äôll explore how to \"add\" this essential feature.\n\n## [](#an-example-use-case)An example use case\n\nIn object-oriented programming, polymorphism is the ability to let specialized types share data and behavior from their common generalized forms. The definition applies to database modeling as well. Suppose you‚Äôre designing a CMS system with models like `Image`, `Video`, `Post`, `Page`, `Form`, etc. They each have unique characteristics but share several common traits, like the owner, time of creation, title, etc. It makes good sense to extract a common `Asset` base type:\n\n[![CMS Class Diagram](https://res.cloudinary.com/practicaldev/image/fetch/s--YdSSnXN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lm03hqb1ctbkd6syff4.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--YdSSnXN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lm03hqb1ctbkd6syff4.png)\n\nWith such a hierarchy, we can avoid repeating the common fields in each model. Moreover, the `Asset` abstraction allows us to query across different concrete types. For example, you can list and paginate all assets a user owns.\n\nWith Prisma, we would like to be able to program against the hierarchy in the following ways:  \n\n```typescript\n// get a page of assorted types of assets for a user\nconst assets = await db.asset.findMany({\n  where: { owner: { id: userId } }, skip: 10, take: 10\n});\n\n// get a list of specific type of assets for a user\nconst videos = await db.video.findMany({\n  where: { owner: { id: userId } } \n});\n\n// aggregation on the base assets\nconst totalViews = await db.asset.aggregate({\n  _sum: { viewCount: true } \n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#patterns-for-polymorphism-in-databases)Patterns for polymorphism in databases\n\nThere has been a long history of studying how to organize polymorphic models in databases and how to expose them from ORMs. The approaches can be summarized into three patterns.\n\n### [](#1-concrete-table-inheritance)1\\. Concrete Table Inheritance\n\nThis is the most straightforward pattern as it does no abstraction at the database level. There'll be no table for `Asset`. Each concrete asset type has its own table, which contains all fields (including the common ones) of that type. The ORM, however, can generate the `Asset` type as a pure abstraction, allowing you to view or update only the common traits.\n\n[![Concrete Table Inheritance](https://res.cloudinary.com/practicaldev/image/fetch/s--iFpJV9tw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj99f084fao9dgiwjm5y.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--iFpJV9tw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj99f084fao9dgiwjm5y.png)\n\nThis approach has a significant drawback: since there are no relations among the concrete tables, there's no efficient way to \"show a list of all assets\", especially if you want to paginate the result.\n\nAlso, from the ORM point of view, the `User` model is \"polluted\" by the concrete types as it's directly connected to them without an intermediary.\n\n### [](#2-single-table-inheritance)2\\. Single Table Inheritance\n\nAnother simple solution is to merge all fields of all types into one wide table and use a `type` field to record the concrete type as a discriminator.\n\n[![Single Table Inheritance](https://res.cloudinary.com/practicaldev/image/fetch/s--AEyeFBKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v4pkbc54fqhyw6goz4f.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--AEyeFBKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v4pkbc54fqhyw6goz4f.png)\n\nThe downside of this approach is that you'll end up with wide rows with many null fields. The problem gets worse if there are many concrete types with many different attributes.\n\n### [](#3-delegated-types)3\\. Delegated Types\n\n\"Delegated Types\" is a more sophisticated approach that stores both the generic and the concrete types as tables and uses one-to-one relationships to connect them. It's called \"delegated\" because the accesses are delegated to the concrete tables when fetching information specific to concrete types.\n\n[![Delegate Types](https://res.cloudinary.com/practicaldev/image/fetch/s--PIoyxGC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s4zj8bmsi64sy9yw539.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--PIoyxGC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s4zj8bmsi64sy9yw539.png)\n\nThis approach avoids the drawbacks of the previous two patterns. Each table contains precisely the information it needs to have. The shared `Asset` table allows listing and pagination at the generalized level. The foreign keys between `Asset` and concrete types also allow for efficiently fetching specialized fields through join. Of course, join is not free and incurs a performance penalty.\n\n## [](#how-does-zenstack-enhance-prisma)How does ZenStack enhance Prisma?\n\nThis post explores how ZenStack can add the missing \"polymorphism\" feature to Prisma. Before getting into details, let me first briefly explain what ZenStack is.\n\nZenStack is a toolkit that stretches Prisma's power to full-stack development. At its most fundamental level, it extends Prisma at two levels - schema and runtime.\n\n### [](#schema-language)Schema language\n\nZenStack introduced a schema language called \"ZModel\" - a superset of Prisma schema. It adds new language constructs for better extensibility, for example, custom attributes, model inheritance, etc. At compile time, ZenStack transforms ZModel to a standard Prisma schema, which can be used to generate `PrismaClient` and migration records using the standard prisma CLI.  \n\n```typescript\nabstract model Asset {\n  id Int\n  createdAt DateTime @default(now)\n  viewCount Int @default(0)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n\n  // custom attributes for defining access policies\n  @@allow('read', true)\n  @@allow('all', owner == auth())\n}\n\n// model inheritance with \"extends\"\nmodel Video extends Asset {\n  duration Int\n  url String\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nYou'll see how we use them to express polymorphism shortly.\n\n### [](#runtime-behavior)Runtime behavior\n\nExtending schema language is only useful when it makes a difference at the runtime. ZenStack creates an \"enhanced\" `PrismaClient` at runtime by wrapping a proxy around the standard `PrismaClient` and injecting new behaviors - for example, the automatic enforcement of access policies (as shown in the example above).  \n\n```typescript\nimport { Prisma } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { getCurrentUser } from './auth';\n\nconst prisma = new PrismaClient();\n\n// `db` has the same typing as `prisma`, but it automatically\n// enforces access policies\nconst db = enhance(prisma, { user: getCurrentUser() });\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nLater, we'll explore leveraging the runtime enhancement to achieve polymorphism.\n\n## [](#implementing-delegated-types-in-zenstack)Implementing \"Delegated Types\" in ZenStack\n\nAmong the three patterns for modeling polymorphism, \"Delegated Types\" is the most flexible. For the remaining part of the post, let's explore how to implement it \"the Prisma way\".\n\n### [](#1-modeling-polymorphism)1\\. Modeling polymorphism\n\nThe most natural way to model inheritance is with inheritance. ZModel already allows you to declare abstract models and inherit from them. However, it's simply a syntactic sugar for inserting all fields of the base model into the sub-one. We'll reach the \"Concrete Table Inheritance\" pattern if we use it to implement polymorphism.\n\nWe can make a tweak and use a variant form of inheritance:  \n\n```typescript\nmodel Asset {\n  id Int\n  createdAt DateTime @default(now)\n  viewCount Int @default(0)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n  type String @discriminator\n\n  @@delegate\n}\n\nmodel Video extends Asset {\n  duration Int\n  url String\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nA few quick notes:\n\n*   The `Asset` model is NOT abstract, indicating it's mapped to a table.\n*   The `@@delegate` attribute marks the base model to delegate field access to sub-models when needed.\n*   The `@discriminator` attribute marks the `type` field to store the concrete type an `Asset` entity is linked to. This field will be managed automatically.\n*   The concrete models, like `Video`, become \"delegatee\" by inheriting from `Asset`.\n\n### [](#2-the-diverging-physical-and-logical-models)2\\. The diverging \"physical\" and \"logical\" models\n\nThe challenge with implementing \"Delegated Types\" is that the physical model in the database differs from the logical model developers need. At the physical level, Asset and Video should establish a one-to-one relationship, like:  \n\n```typescript\nmodel Asset {\n  // Asset fields\n  ...\n\n  // relationships to concrete models\n  video Video?\n  image Image?\n  ...\n}\n\nmodel Video {\n  id Int @id()\n  duration Int\n  url String\n\n  // one-to-one relationship to Asset\n  asset Asset @relation(fields: [assetId], references: [id])\n  assetId Int @unique\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHowever, from the programming point of view, we don't want to see the relation between `Asset` and `Video`. Instead, we'd like to see a `Video` model that includes all fields from Asset. This is how polymorphism is supposed to behave in the OO world.  \n\n```typescript\nmodel Asset {\n  // Asset fields\n  ...\n}\n\nmodel Video {\n  id Int @id()\n\n  // inherited from Asset\n  createdAt DateTime @default(now)\n  viewCount Int @default(0)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n\n  // Video specifics\n  duration Int\n  url String\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHow do we fulfill these two diverging needs ü§î?\n\nRecall that ZenStack transforms the ZModel into a standard Prisma schema and then lets the Prisma CLI process it. We can let it generate two Prisma schemas when delegate types are used - one for the physical and the other for the logical.\n\nThe physical schema will be used to create migration files and a regular `PrismaClient` for database access.\n\n[![Physical View](https://res.cloudinary.com/practicaldev/image/fetch/s--OAjcmmJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsmhu7eqafoyhs4apskv.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--OAjcmmJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsmhu7eqafoyhs4apskv.png)\n\nThe logical one is for generating an \"enhanced\" `PrismaClient` typing that provides merged types for concrete models.\n\n[![Logical View](https://res.cloudinary.com/practicaldev/image/fetch/s--XM05-Xq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50nvhzes1947tt5v6s1y.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--XM05-Xq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50nvhzes1947tt5v6s1y.png)\n\n### [](#3-runtime-delegation)3\\. Runtime delegation\n\nSeparating \"physical\" and \"logical\" Prisma schemas solves our typing needs. However, at runtime, the enhanced `PrismaClient` must also behave accordingly. As mentioned, ZenStack uses the `enhance()` API to create a proxy around the standard `PrismaClient`, allowing it to alter its runtime behavior and take care of the separate \"physical\" tables.\n\nHere are a few examples:\n\n*   Creating a concrete entity  \n    \n    ```typescript\n    await db.video.create({ \n      data: { ownerId: userId, duration: 100, url: '...' }\n    });\n    \n    ```\n    \n    is transformed to:  \n    \n    ```typescript\n    await prisma.asset.create({\n      data: {\n        ownerId: userId,\n        type: 'Video',\n        video: {\n          create: { data: { duration: 100, url: '...'} }\n        }\n      }\n    });\n    \n    ```\n    \n*   Reading a concrete entity  \n    \n    ```typescript\n    const video = await db.video.findFirst();\n    \n    ```\n    \n    is transformed to (conceptually):  \n    \n    ```typescript\n    const { asset, ...video } = await prisma.video.findFirst({ \n      include: { asset: true } \n    });\n    \n    // merge fields of base and concrete models\n    const video = { ...asset, ...video };\n    \n    ```\n    \n*   Reading a base entity  \n    \n    ```typescript\n    const asset = await db.asset.findFirst();\n    \n    ```\n    \n    is transformed to (conceptually):  \n    \n    ```typescript\n    const { video, image, /* other types */, ..._asset } = \n      await prisma.asset.findFirst({\n        include: { video: true, image: true, ... }\n    });\n    \n    // merge concrete model fields\n    const asset = {\n      ..._asset, \n        ...(_asset.type === 'Video' ? video: _asset.type === 'Image' ? image) \n    };\n    \n    ```\n    \n\n### [](#4-achieving-perfect-typing)4\\. Achieving perfect typing\n\nThe \"logical\" `PrismaClient` helps us put a \"polymorphic\" overlay above the physical table schema. However, it's far from perfect. For example, `db.asset.create()` method shouldn't exist. You are not supposed to create a standalone base entity. Although we can reject it with a runtime error, it'd be much nicer if we could exclude it from typing in the first place.\n\nAnother example is reading with `db.asset` (e.g., `db.asset.findFirst()`) returns model type Asset. This is not wrong, but it'd be much easier to use if a discriminated union type is returned instead:  \n\n```typescript\ntype AssetUnion = \n  ({ type: 'Video' } & Video) \n  | ({ type: 'Image' } & Image) \n  | ...;\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nSo that TypeScript's type narrowing can work its magic for the following code:  \n\n```typescript\n// asset is typed as AssetUnion\nconst asset = await db.asset.findFirst();\n\nif (asset.type === 'Video') {\n  console.log(asset.duration);\n} else if (asset.type === 'Image') {\n  console.log(asset.format);\n} else {\n  ...\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHow do we achieve this? We used a separate Prisma schema to generate our \"logical\" `PrismaClient` typing, and nothing is stopping us from post-processing the generated types. We can customize the types either with TypeScript's type manipulation or just directly \"edit\" the \".d.ts\" files using \"ts-morph\".\n\n## [](#wrap-up)Wrap up\n\nPolymorphism is a long-standing feature request, and I'm excited about addressing this issue from an external perspective. Do you find the proposed design here plausible? The feature is in the POC stage, and we're confident about landing it in ZenStack within Q1 of 2024. Please leave your thoughts about the proposal in the following GitHub issue or simply join our [Discord](https://discord.gg/Ykhr738dUe) to chat. It's always easier to make changes before a feature is released.\n\n#  [![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) \\[Feature Request\\] Support for Polymorphic Associations #430](https://github.com/zenstackhq/zenstack/issues/430)\n\n[![jiashengguo avatar](https://res.cloudinary.com/practicaldev/image/fetch/s--6DGXjq7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://avatars.githubusercontent.com/u/16688722%3Fv%3D4)](https://github.com/jiashengguo)\n\n**[jiashengguo](https://github.com/jiashengguo)** posted on [May 25, 2023](https://github.com/zenstackhq/zenstack/issues/430)\n\n## [](#background)Background\n\n*   [https://github.com/prisma/prisma/issues/2505](https://github.com/prisma/prisma/issues/2505)\n*   [https://github.com/prisma/prisma/issues/1644](https://github.com/prisma/prisma/issues/1644)\n\nThis is probably one of the Prisma feature requests that got the most likes üòÑ. The name \"polymorphic association\" may sound a bit \"obscure\". Other terms can be union support, generic foreign key, abstract relation, etc.\n\nIt's an extremely useful feature for many applications, and from ZenStack (access control) point of view, it's even more useful, as it'll allow you to more easily consolidate access policies at an abstract level while still being able to make refinements at concrete levels. Here's an example for modeling a CMS (note ZenStack already has the `abstract` syntax today):\n\n```\nmodel User {\n  id Int\n  contents Content\\[\\]\n}\n\nabstract model Content {\n  id Int\n  owner User @relation(fields: \\[ownerId\\], references: \\[id\\])\n  ownerId Int\n  deleted Boolean [@default](https://dev.to/default)(false)\n\n  @@deny('read', deleted)\n  @@allow('all', auth().role == 'ADMIN')\n}\n\nmodel Post extends Content {\n  published Boolean\n\n  @@deny('delete', published)\n}\n\nmodel Video extends Content {\n  ...\n}\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#proposed-solution)Proposed Solution\n\nTo be honest, we haven't thought deeply about the design and implementation, but I think the general approach would be to provide a concise syntax to model it in ZModel and transpile such relations into Prisma Schema using a `[relationId, relationType]` tuple. The downside is we lose native fk constraint support for integrity and need to compensate for it using transactions.\n\nIt's possible that addressing it from ZenStack side is easier than adding such support in Prisma. But there are still many details to consider and feedback to collect, and it'll be quite some work.\n\nRelated: #613\n\n[View on GitHub](https://github.com/zenstackhq/zenstack/issues/430)\n\nIf you use Prisma in a non-trivial way, [ZenStack](https://zenstack.dev) is worth your time for a closer look. You may find some of its enhancements to Prisma beneficial to your project.\n\n**Author**: [ymc9](https://dev.to/ymc9)",
    "shortDescription": "Prisma is a beloved ORM for NodeJS developers. As with every popular open-source project, it has a...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Tackling Polymorphism in Prisma\">\n<meta property=\"og:description\" content=\"Prisma is a beloved ORM for NodeJS developers. As with every popular open-source project, it has a...\">\n<meta name=\"keywords\" content=\"webdev, prisma, typescript, database, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gtm5C9mc--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmf4f8jlm9madn8ly459.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Tackling-Polymorphism-in-Prisma",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmf4f8jlm9madn8ly459.png"
  },
  {
    "title": "TypeScript vs JavaScript - A Detailed Comparison",
    "url": "https://dev.to/refine/typescript-vs-javascript-a-detailed-comparison-479f",
    "tags": [
      "javascript",
      "webdev",
      "typescript",
      "beginners"
    ],
    "published_at": 1703240195000,
    "markdownContent": "[  \n![refine repo](https://res.cloudinary.com/practicaldev/image/fetch/s--KEj2odbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://refine.ams3.cdn.digitaloceanspaces.com/blog-banners/retool-alternative.png)  \n](https://github.com/refinedev/refine)\n\n* * *\n\n## [](#introduction)Introduction\n\nTypeScript is a statically typed superset of JavaScript, the inherently **dynamically typed**, high-level scripting language of the web. It bases itself on the core features of JavaScript and -- as the primary mission -- extends them with compile time **static typing**. It also comes with several feature extensions: perhaps most notably [enums](https://www.typescriptlang.org/docs/handbook/enums.html), [class instance types](https://www.typescriptlang.org/docs/handbook/2/classes.html#constructors), [class member privacy](https://www.typescriptlang.org/docs/handbook/2/classes.html#member-visibility) and [class decorators](https://www.typescriptlang.org/docs/handbook/decorators.html). TypeScript offers more advanced additions and considerations with respect to iterators, generators, mixins, modules, namespacing, JSX support, etc., which JavaScript developers would find different and more nuanced towards static typing -- as they get familiar with them over time.\n\nIn this post, we first shed some light on important concepts related to static typing and learn about the capabilities and advantages they offer TypeScript over JavaScript. We gained insight into the role of type definitions, type annotations and type checking using the \\*\\* _structural type system_\\*\\*. While doing so, we recall primitive types (`number`, `string`, `boolean`) in JavaScript that lay the foundations of more complex type definitions in TypeScript. We also get to hear about literal types (string, array and object) and additional types (`any`, `unknown`, `void`, etc.) that TypeScript adds to its typing toolbelt and a host of type utilities (`Awaited<>`, `Pick<>`, `Omit<>`, `Partial<>`, `Record<>`, etc.) that are used to derive new types from existing ones.\n\nTowards the latter half, we explore the tools that run the processes that facilitate static typing in TypeScript. We get a brief account of how TypeScript code is transpiled with the **TypeScript compiler (_`tsc`_)** to runtime JavaScript code. We also get to understand that TypeScript's **type checker** is integrated to the `tsc` for performing type checking and emitting errors that help developers write type-safe code by fixing type related bugs early in development phase.\n\nWe get a quick rundown of the TS type checker's tooling roles: namely editor and linguistics support with code completion, quick fix suggestions, code formatting / reorganizing, code refactoring, and code navigation. We also find out how all the features of the TypeScript compiler is integrated in **VS Code** with the help of background task runners -- something that offers better developer experience by helping to avoid running the `tsc` repeatedly.\n\nTowards the end, we explore notable feature extensions that TypeScript brings to the table -- particularly **enums**, **class instance types**, **class member privacy** and **decorators**. Finally, we point to implementations of more advanced features such as iterators, generators, mixins, etc.\n\n## [](#typescript-concepts)TypeScript Concepts\n\n### [](#typescript-concepts-static-vs-dynamic-typing)TypeScript Concepts - Static vs Dynamic Typing\n\nJavaScript is inherently dynamically typed. It means that types of **values** of expressions in JavaScript are set at _runtime_, not before that. Dynamic typing leads to different kinds of type errors and unaccounted for behaviors in JavaScript code, especially at the hands of inexperienced developers tasked with scaling an application. And as a codebase grows, maintainability becomes a major concern.\n\nMicrosoft created TypeScript to add a static typing system on top of JavaScript. It was open sourced in 2012 to help write error-prone, stable, maintainable and scalable web applications. Static typing is an implementation where types of expressions are determined before runtime. Particularly in TypeScript, static typing takes place before compilation carried out by `tsc`, the TypeScript compiler.\n\nStatic typing involves three major steps: **_type declaration_**, **_type annotation_** and **_type checking_**. Type checking refers to matching and validating type conformance of the value of an expression to its annotated / inferred type with the help of TypeScript's **static type checker**.\n\n### [](#typescript-concepts-type-definitions)TypeScript Concepts - Type Definitions\n\nIntegral to static typing is declaring proper type definitionss for entities in an application. Generally, a type can be declared with an [alias](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases) or it can be an [interface](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces). Types are also generated from TypeScript [enums](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#enums) as well as [classes](https://www.typescriptlang.org/docs/handbook/2/classes.html#constructors). These options allow developers to declare and assign consistent types to expressions in a web application and help prevent type errors and unanticipated bugs at runtime.\n\nPrimitive data types (`number`, `string` `boolean`, `null` and `undefined`) that are already part of JavaScript usually lay the foundations of more complex, nested type definitions in TypeScript. TypeScript adds some more static types to its toolbelt like `any`, `unknown`, `void`, `never`, etc., to account for different scenarios.\n\nApart from these, TypeScript also offers a swathe of type utilities that help transform one type to another. Example type utilities include `Awaited<>`, `Pick<>`, `Omit<>`, `Partial<>`, `Record<>`, etc. Such utilities are not relevant in JavaScript but in TypeScript, they are handy for deriving useful variants from a base type. Using them adds stability to an otherwise brittle JavaScript codebase and helps make large web applications easily tweakable and maintainable.\n\n### [](#typescript-concepts-type-annotation-and-inference)TypeScript Concepts - Type Annotation and Inference\n\nAdding proper **type annotations** to expressions is perhaps the most crucial part of static typing in TypeScript. It is necessary for subsequent verification of **type conformance** performed by TypeScript's type checker.\n\n**Type Annotations in TypeScript**\n\nType annotations are done explicitly on expressions using primitive data types and / or -- as mentioned above -- types defined using aliases, interfaces, enums and classes.\n\nTarget expressions for type annotation are variable declarations, function declarations, function parameters, and function return types. Annotations are also made to class fields and other members such as methods and accessors -- along with their associated parameters and return types.\n\n**Type Inference in TypeScript**\n\nWhere type annotations are not explicitly added, TypeScript **_infers_** the type from the primitive type, literals or its object shape of the value itself.\n\nType inference may follow the below two principles:\n\n*   **Best common type:** where TypeScript assigns a common type that encompasses all items. This is useful when inferring a common type from an array literal with items composed of primitives. For example, for an array with items of type `number` and `string`, the inferred type is the following best common type:\n\n```typescript\nconst x = [0, 1, \"two\"]; // const x: (number | string)[]\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n*   **Contextual typing:** where the type of the expression is inferred from the lexical context in which it is being declared. See an example [here](https://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-typing)\n\n### [](#typescript-concepts-type-checking-and-the-structural-type-system)TypeScript Concepts - Type Checking and the Structural Type System\n\nA particular value of an expression is checked for validity against its annotated or inferred type by TypeScript's type checker. Type compatibility depends on whether the **_structure_** or **_shape_** of the value matches that of the annotated one. In other words, TypeScript has a **structural type system**.\n\nIn structural type systems, the shape of the value of an expression must conform to that of the annotated type. Besides, it can be compatible with another type that is **identical** or **equivalent** in shape.\n\nFor example, `stereoTypicalJoe` below is typed to `User`:  \n\n```typescript\ntype User = {\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n};\n\ntype Person = {\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n};\n\ntype Admin = {\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role?: string;\n};\n\n// `stereotypicalJoe` is compatible with `User`\nconst stereoTypicalJoe: User = {\n  username: \"stereotypical_joe\",\n  email: \"joe_stereo@typed.com\",\n  firstName: \"Joe Stereo\",\n  lastName: \"Typed\",\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThanks to TypeScript's structural type system, it is also compatible with `Person` because `Person` is structurally identical to `User`:  \n\n```typescript\n// It is also compatible with `Person` which is identically typed to `User`\nconst stereoTypicalJoe: Person = {\n  username: \"stereotypical_joe\",\n  email: \"joe_stereo@typed.com\",\n  firstName: \"Joe Stereo\",\n  lastName: \"Typed\",\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nTypeScript also allows `stereoTypicalJoe` to be compatible with `Admin` type, because equivalent types ( `role` being an optional property in `Admin`) are compatible:  \n\n```typescript\n// Structural Type System allows `stereoTypicalJoe` to be compatible with `Admin` which is equivalently typed to `User`\nconst stereoTypicalJoe: Admin = {\n  username: \"stereotypical_joe\",\n  email: \"joe_stereo@typed.com\",\n  firstName: \"Joe Stereo\",\n  lastName: \"Typed\",\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nStructural compatibility in TypeScript is practically the appropriate option for annotating and validating the types of JavaScript expressions, because shapes of objects in web applications remain identical or similar while their composition varies greatly. This is in contrast to the **nominal type system**, which decides type conformance strictly based on specifically **named types**.\n\nIn JavaScript, since types are **tagged** to a value at runtime, there is no static type annotation involved. Hence the need for it in TypeScript.\n\n## [](#typescript-tools)TypeScript Tools\n\n### [](#-raw-tsc-endraw-the-typescript-compiler)`tsc`, the TypeScript Compiler\n\nThe central tool that TypeScript uses for running processes related to static typing is the TypeScript compiler, `tsc`. The ultimate job of the TS compiler is to transform statically typed code to execution-ready pure JavaScript code. This means that the type definitions and annotations that we add inside a `.ts` or `.tsx` file, are **_erased_** after compilation. In other words, the output `.js` or `.jsx` files are **not** passed the static typing we add to corresponding TS files in the first place.\n\nFor example, the following TypeScript code:  \n\n```typescript\nfunction greet(person: string, date: Date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`);\n}\n\ngreet(\"Joe\", new Date());\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\ncompiles to the JS script below:  \n\n```javascript\n\"use strict\";\nfunction greet(person, date) {\n  console.log(\"Hello \".concat(person, \", today is \").concat(date.toDateString(), \"!\"));\n}\ngreet(\"Joe\", new Date());\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNotice that the type annotations applied in the `.ts` file are not output to the `.js` version. But we would know from TypeScript type checker that they were type validated.\n\nIn the interim, what we get is a chance to apply a consistent type system to validate the type safety and stability of our code -- something we cannot perform with JavaScript alone.\n\n**TS Compiler Configuration**\n\nThe TS compiler is generally configured with a default set of standard options inside the `tsconfig.json` file. And we can tailor it according to our needs and preferences. Particularly from the `compilerOptions` object, we can set options for a target ECMAScript version, type checking, modules scanning, experimental features, etc.  \n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"experimentalDecorators\": true\n  },\n  \"include\": [\"src\"]\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#typescript-type-checker)TypeScript Type Checker\n\nThe `tsc` is equipped with a static type checker that checks the value of an expression against its annotated or inferred type. It emits type error(s) in the event of failed matches. The primary goal of the type checker is to check for type conformance. It's broader goal is to ensure type safety of a code base by catching and suggesting corrections for all possible kinds of type errors during development.\n\nType errors can originate from typos, change of API interfaces, incomplete/inaccurate type definitions, incorrect annotations, incorrect assertions, etc.\n\nThe errors are output by the compiler to the command line console when a file is run with `tsc` command:  \n\n```shell\ntsc hello.ts\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe TS type checker keeps track of the information from type definitions and annotations in our codebase. It then uses these descriptions to validate structural/shape conformance or otherwise throw an error. Type checking is performed during code changes and before compilation runs.\n\n### [](#ts-type-checker-linguistic-tooling)TS Type Checker - Linguistic Tooling\n\nThe TS type checker keeps track of updated types information while we write our code. This allows it to catch bugs and also help us prevent them in the first place. We can correct typos, type errors and possible non-exception failures as they get caught and emitted by the type checker.\n\nBased on the type descriptions it keeps, the type checker can also help us with code completion, quick fix suggestions, refactoring, formatting/reorganization, code navigation, etc.\n\n### [](#typescript-support-in-vs-code)TypeScript Support in VS Code\n\nMicrosoft's Visual Studio Code, or VS Code in short, comes with integrated support for the TypeScript compiler, its static type checker, and other linguistic tooling mentioned above. It runs the `tsc` and the static type checker with the help of watch mode background task runners in the code editor.\n\nFor example, VS Code's IntelliSense runs the TypeScript static type checker in the background to provide code completion on typed expressions:\n\n[![TypeScript vs JavaScript](https://res.cloudinary.com/practicaldev/image/fetch/s--pN7KAtIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-11-21-js-vs-ts/intellisense.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--pN7KAtIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-11-21-js-vs-ts/intellisense.png)\n\nBelow are a list of other major VS Code features that aid everyday TS developers:\n\n*   **Type errors:** type errors are highlighted inside the editor. When hovered over, we can see the error warnings. Error highlighting helps us to investigate and fix the errors easily.\n    \n*   **Quick fix suggestions:** associated quick fix suggestions are provided when hovered on a error. We can use the editor's automatic fix or fix them ourselves.\n    \n*   **Syntax errors and warnings:** syntax errors are highlighted by VS Code's lingguistic support for TypeScript. It helps fix them instantly.\n    \n*   **Code navigation:** we can quickly navigate a particular code snippet by looking it up using shortcuts. Code navigation helps us avoid errors by gaining clarity on lookup.\n    \n\nVS Code also provides formatting/reorganizing, refactoring debugging features as well. All these features help us write error-prone, stable code that contributes to an application's maintainability and scalability.\n\n## [](#typescript-type-definitions-declaration-packages)TypeScript Type Definitions / Declaration Packages\n\nTypeScript comes with built-in definitions for all standard JavaScript APIs. They include type definitions for objects types like `Math`, `Object`, browser related DOM APIs, etc. These can be accessed from anywhere in the project without the need to import the types.\n\nApart from built-in types, application specific entities have to be typed properly. It is a convention to use separate type declaration files in order to differentiate type definitions from features code.\n\n### [](#typescript-type-declaration-raw-dts-endraw-files)TypeScript Type Declaration - `.d.ts` Files\n\nApplication specific type declarations are usually collected in a file suffixed with `.d.ts`. It is common to declare all types and interfaces inside a single `index.d.ts` file and export them from there.  \n\n```typescript\nexport interface User {\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface Person {\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface Admin {\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role?: string;\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWhile annotating, we have to import each type inside the file we are using it:  \n\n```typescript\n// highlight-next-line\nimport { User, Person, Admin } from \"src/interfaces/index.d.ts\";\n\nconst anyUser: User = {\n  username: \"stereo_joe\",\n  email: \"joe@typed.com\",\n  firstName: \"Joe\",\n  lastName: \"Typed\",\n};\n\nconst typicalJoe: Person = {\n  username: \"typical_joe\",\n  email: \"joe_typical@typed.com\",\n  firstName: \"Joe Structure\",\n  lastName: \"Typed\",\n};\n\nconst stereoTypicalJoe: Admin = {\n  username: \"stereotypical_joe\",\n  email: \"joe_stereo@typed.com\",\n  firstName: \"Joe Stereo\",\n  lastName: \"Typed\",\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#typescript-type-packages-definitelytyped-raw-types-endraw-)TypeScript Type Packages - DefinitelyTyped `@types`\n\nExisting JavaScript libraries that support a TypeScript version offer type definition packages for use with TypeScript. [DefinitelyTyped](https://definitelytyped.github.io) is a popular type definition repository that hosts collections of type definition packages for major JS libraries that also support TypeScript.\n\nType definition packages hosted by DefinitelyTyped are scoped under the `@types/` directory. We can get the necessary definition packages with `npm` or `yarn`. For example, the `react` type definitions can be included inside `node_modules` with the following scoped package:  \n\n```shell\nnpm install --save-dev @types/react\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThen, we can use the types inside our app. It is important to notice that unlike in the case of using `.d.ts` declaration files, we don't need to import the types from their `node_modules` files. That's because they are made available automatically by `npm`.\n\n## [](#typescripts-extended-features)TypeScript's Extended Features\n\nApart from implementing a static type system to produce error-prone, maintainable and scalable codebase, TypeScript extends the language with additional features with their respective syntax. TypeScript `enum`s are such an addition that injects type objects to JavaScript runtime. **TypeScript classes** are implemented in a way that produces types. Some aspects of TS classes, such as member privacy and decorators are implemented in different ways than in JavaScript.\n\nIn the following sections, we try to understand how they contrast.\n\n### [](#typescript-extensions-enums)TypeScript Extensions - Enums\n\nTypeScript adds a special data structure called `enum` to address the need for data organization around an intent -- like defining a set of categories or a strict set of subscription options. `enum`s are not available in JavaScript. In TypeScript, an [**enum**](https://www.typescriptlang.org/docs/handbook/enums.html#enums-at-compile-time) introduces a representative JavaScript object to runtime. It can then be accessed by subsequent code to get its values or that of its properties.\n\nEnums serve as efficient replacement of objects that would otherwise be stored and accessed from a database table. They inherently generate types that can be used to annotate expressions or object properties. You can find an in-depth example of TS Enums in [this refine.dev blog post](https://refine.dev/blog/typescript-enum/#using-typescript-enums-in-classes).\n\n### [](#typescript-extended-features-classes-as-types)TypeScript Extended Features - Classes as Types\n\nIn TypeScript, classes also generate types from its constructor function. An instance of a given class is by default inferred during static type checking the type generated from the class. For a detailed example, check [this refine.dev blog post.](https://refine.dev/blog/typescript-classes/#typescript-classes---constructor-functions)\n\nIn contrast, class instances in JavaScript are tagged their types during runtime.\n\n### [](#typescript-extended-features-class-member-visibility)TypeScript Extended Features - Class Member Visibility\n\nTypeScript supports class member visibility since ES2015. It implements member privacy at three levels: `public`, `protected` and `private`. Privacy of class members in TypeScript is modeled according to prototypal inheritance based object oriented concepts.\n\nFor example, `public` members are accessible from everywhere, as in instances, the class itself as well as subclasses. `protected` members are not accessible from instances, they are only accessible from the class and its subclasses. `private` members are only accessible from inside the class.\n\nIn contrast, starting ES2022, JavaScript implements class property privacy using the `#` syntax. Property access in JavaScript classes can either be totally public or totally private. In addition, a class property's privacy in JavaScript is not inheritable, because [it is not accessible from the prototypal chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#private_methods) of the class instance.\n\n### [](#typescript-extended-features-class-decorators)TypeScript Extended Features - Class Decorators\n\nDecorators are a design pattern in programming. In any programming language, the decorator pattern gives an interface to add behavior to a class instance dynamically without affecting other instances. It is possible to easily implement decorators with JavaScript, especially with clever functional programming. Not to mention with TypeScript.\n\nHowever, TypeScript has a Stage 3 proposal that brings class decorators with a special `@` syntax. It is quite distinct from conventional decorator implementation with JavaScript and TypeScript. [Class decorators](https://www.typescriptlang.org/docs/handbook/decorators.html) in TypeScript allow classes and their members to be decorated with runtime behaviors. The class itself can be decorated, so can fields, methods and accessors be. For a comprehensive example of class decoratiors, please check [this blog post on refine.dev.](https://refine.dev/blog/typescript-decorators/#class-decoration-in-typescript)\n\n### [](#typescript-advanced-features)TypeScript Advanced Features\n\nOther extended features in TypeScript are related to [iterators and generators](https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html), [mixins](https://www.typescriptlang.org/docs/handbook/mixins.html), [modules](https://www.typescriptlang.org/docs/handbook/modules/introduction.html), [namespacing](https://www.typescriptlang.org/docs/handbook/namespaces.html), [JSX support](https://www.typescriptlang.org/docs/handbook/jsx.html), etc.\n\nMost of these advanced concepts require special considerations to facilitate relevant static typing. For example, TypeScript iterators and generators have to implement the `Symbol.iterator` property and they should be annotated the `Iterable` interface. TypeScript mixins make use of complex relationships between class instance types, subtypes, multiple interface implementations, class member privacy, prototypal inheritance and class expressions. Too much, yet too good...\n\nGetting a good grasp of these advanced TypeScript features require gradual adoption of the language as a whole, as we aim to keep our codebase type-safe, stable and our web application maintainable and scalable.\n\n## [](#summary)Summary\n\nIn this post, we compared TypeScript with JavaScript. While trying to make the comparisons, we gained useful insights into how the two types of systems and their implementations differ. We got a high-level view of the role of the TypeScript compiler, the mechanisms of the static type checker in catching and preventing type errors, and the linguistic tooling that helps developers write error-prone and highly stable application code. We also contextualized some of TypeScript's notable extended features that differ from those in JavaScript in light of TypeScript's static type system.\n\n**Author: [Abdullah Numan](https://refine.dev/blog/author/abdullah_numan/)**\n\n**Author**: [Necati √ñzmen](https://dev.to/necatiozmen)",
    "shortDescription": "Introduction   TypeScript is a statically typed superset of JavaScript, the...",
    "htmlMeta": "<meta property=\"og:title\" content=\"TypeScript vs JavaScript - A Detailed Comparison\">\n<meta property=\"og:description\" content=\"Introduction   TypeScript is a statically typed superset of JavaScript, the...\">\n<meta name=\"keywords\" content=\"javascript, webdev, typescript, beginners, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FrZorxXu--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48in7p6q0390hromtzr3.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "TypeScript-vs-JavaScript-A-Detailed-Comparison",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48in7p6q0390hromtzr3.jpg"
  },
  {
    "title": "Tech Talk: React in the Terminal? Hold my Beer üç∫",
    "url": "https://dev.to/manuartero/tech-talk-react-in-the-terminal-hold-my-beer-2pnf",
    "tags": [
      "react",
      "node",
      "javascript",
      "typescript"
    ],
    "published_at": 1703078618000,
    "markdownContent": "My company organizes a big event once per year. Around ~600 attendees. There are five simultaneous tracks for keynotes; Product, Project management, Design, Dev, Devops... It's the main event of the season for us.\n\nYou get the idea.\n\n* * *\n\nThis year i decided to present a tech talk. 45 min long. The complete thing: slides & live coding.\n\nI named it: ¬´React in the Terminal? Hold my beer üç∫¬ª\n\n* * *\n\nWhile the slides are in English, i'm afraid the talk itself was in my mother language (üá™üá∏) and i won't share the recording.\n\nHowever, here are the resources I used for the talk:\n\n1.  [**The slides**: up & running hosted at Vercel](https://react-in-the-terminal-hold-my-beer.vercel.app/1); I used [SliDev](https://sli.dev/), a framework that turns markdown into a web app which behaves like a Keynote. It's pretty cool.  \n    I genuinely think SliDev deserves its own post someday ü§î.\n    \n2.  [**my-react-dom**: Repository with a custom implementation of `react-dom`](https://github.com/manuartero/my-react-dom) used to live coding. Two branches: `playground` and `main`\n    \n3.  [**ink-world**: Repository for a tiny-tiny-tiny game using Ink + React on the terminal](https://github.com/manuartero/ink-world) again, used to live coding. Two branches: `playground` and `main`.\n    \n\n* * *\n\n## [](#talk-recap)Talk Recap\n\nI led a quick journey, starting with the simplest ¬´Hello World¬ª in React...\n\n...But unrolling the `jsx` syntax, making more obvious where we're invoking `react` and where we are calling `react-dom`\n\n[![Slide no 7](https://res.cloudinary.com/practicaldev/image/fetch/s--t8uLyNpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt0t85k8bqte0papqdeb.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--t8uLyNpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt0t85k8bqte0papqdeb.png)\n\nThis led us to the question: why are `react` and `react-dom` separated into two different packages?\n\nWe discussed the philosophy that React embraces; they mention \"_interfaces_\" and how React is **designed to plug into any interface**.\n\n[![Slide no. 8](https://res.cloudinary.com/practicaldev/image/fetch/s--Q3NZPrpZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhpyew3aaf6d9qwjmdkc.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--Q3NZPrpZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhpyew3aaf6d9qwjmdkc.png)\n\nNext step: `react-reconciler`: the package the React team provides to create your custom renderer.\n\n[![Slide no. 9](https://res.cloudinary.com/practicaldev/image/fetch/s--lHMEoCox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbxspmanrrqoeateetd1.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--lHMEoCox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbxspmanrrqoeateetd1.png)\n\nTime to live coding session ([`my-react-dom`](https://github.com/manuartero/my-react-dom))\n\nThis is the goal: replace the `ReactDOM` object with one of our own and keeping the Counter APP running.  \n\n```diff\nimport React from 'react';\n-import ReactDOM from 'react-dom';\n+import ReactDOM from './my-custom-react-dom';\nimport './styles.css';\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n‚ú® Ah! and that's also deployed at Vercel: [https://my-react-hvpqtmgva-manu-artero.vercel.app/](https://my-react-hvpqtmgva-manu-artero.vercel.app/)\n\n[![Screenshot for https://my-react-hvpqtmgva-manu-artero.vercel.app/](https://res.cloudinary.com/practicaldev/image/fetch/s--dwMi21QU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wegkej7ppn6x8pxg5aag.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--dwMi21QU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wegkej7ppn6x8pxg5aag.png)\n\nIf you open de dev tools, you may check the console:\n\n[![Screenshot of the console](https://res.cloudinary.com/practicaldev/image/fetch/s--woot5LVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4s87sr3j8op6fgipxr2.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--woot5LVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4s87sr3j8op6fgipxr2.png)\n\n* * *\n\nAt this point, I took a small leap: while implementing a tiny `react-dom` is one thing, crafting the plugin for the terminal is a different tale.\n\nSo i introduced the **solution by Vadim Demedes**: [Ink](https://github.com/vadimdemedes/ink).\n\nInk is a React renderer for the terminal.\n\nI did prepare a playground ([check the `playground` branch](https://github.com/manuartero/ink-world/tree/playground)) with just 2 dependencies: `ink` and `react`\n\nYou can check the [final code at GitHub](https://github.com/manuartero/ink-world/blob/main/index.js). Anyway, in a nutshell:  \n\n```javascript\n...\n\nfunction useWorld({ onGameOver, onGameWin }) {\n  const [world, setWorld] = useState([\n    \"tree\",\n    \"character\",\n    \"tree\",\n    \"tree\",\n    \"tree\",\n    \"enemy\",\n  ]);\n\n  useEffect(() => {\n     ...\n      if (random > 0.5) {\n        return moveEnemyRight();\n      }\n      if (random < 0.5) {\n        return moveEnemyLeft();\n      }\n    }\n  });\n\n  const moveEnemyRight = () => {\n    setWorld((currentWorld) => {\n      ... bla bla\n    });\n  };\n\n  const moveEnemyLeft = () => {\n    setWorld((currentWorld) => {\n      ... bla bla\n    });\n  };\n\n  const moveCharacterRight = () => ...\n\n  const moveCharacterLeft = () => ...\n\n  return { world, moveCharacterRight, moveCharacterLeft };\n}\n\nfunction App() {\n  const { exit } = useApp();\n  const { world, moveCharacterRight, moveCharacterLeft } = useWorld({...});\n\n  useInput((input, key) => {\n    if (input === \"q\") {\n      exit();\n    }\n    if (key.leftArrow) {\n      setDisplayText(\"<-\");\n      return moveCharacterLeft();\n    }\n    if (key.rightArrow) {\n      setDisplayText(\"->\");\n      return moveCharacterRight();\n    }\n  });\n\n  return (\n    <>\n      <Ground>\n        {world.map((type, i) => (\n          <WorldElement key={`${type}-${i}`} type={type} />\n        ))}\n      </Ground>\n      <Text>{displayText}</Text>\n    </>\n  );\n}\n\n...\n\nrender(<App />);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nResulting in this little fella:\n\n* * *\n\nHonestly, it was a tremendous success; many people congratulated me.\n\n* * *\n\nthanks for reading üíõ.\n\n**Author**: [Manuel Artero Anguita üü®](https://dev.to/manuartero)",
    "shortDescription": "My company organizes a big event once per year. Around ~600 attendees. There are five simultaneous...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Tech Talk: React in the Terminal? Hold my Beer üç∫\">\n<meta property=\"og:description\" content=\"My company organizes a big event once per year. Around ~600 attendees. There are five simultaneous...\">\n<meta name=\"keywords\" content=\"react, node, javascript, typescript, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DA3IEXu1--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o4fhayt1ypnbz58z8wu.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Tech-Talk:-React-in-the-Terminal-Hold-my-Beer",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o4fhayt1ypnbz58z8wu.png"
  },
  {
    "title": "Data Structures Implementation in JavaScript or TypeScript",
    "url": "https://dev.to/bugudiramu/data-structures-implementation-in-javascript-or-typescript-4h3c",
    "tags": [
      "javascript",
      "typescript",
      "datastructures",
      "programming"
    ],
    "published_at": 1702319902000,
    "markdownContent": "## [](#introduction)Introduction\n\nThis article is your guide to understanding and implementing Data Structures & Algorithms (DSA) using JavaScript and TypeScript. Whether you're a seasoned developer or a beginner, we'll cover practical examples of arrays, linked lists, stacks, queues, trees, and graphs. What's more, all TypeScript examples are available, and if you're a JavaScript enthusiast, the code is right there in my GitHub repository [Code Samples](https://github.com/bugudiramu/dev-to-articles/blob/master/data-structures). Get ready to strengthen your coding skills, as we unravel the power of DSA in the friendly world of JavaScript and TypeScript.\n\n* * *\n\n__Note: This article excludes explanations and implementations of `Heap` and `Trie`. We'll cover these topics in detail when we delve into problem-solving associated with these concepts. Stay tuned for their inclusion!__\n\n## [](#stack)Stack\n\n### [](#definition)Definition:\n\nA **Stack** is a data structure that follows the Last In, First Out (LIFO) principle, where the last element added is the first one to be removed. It supports fundamental operations such as pushing (adding) an element to the top, popping (removing) the top element, checking if it's empty, obtaining the size, and peeking (viewing) the top element without removal.\n\n### [](#algorithmic-steps)Algorithmic Steps:\n\n```javascript\n/**\n * Stack Class Definition:\n * - Initialize an empty array to store items and a variable to track size.\n * - Push: Add an element to the front of the array and increment size.\n * - Pop: Remove the first element if the stack is not empty and decrement size.\n * - isEmpty: Check if the size is zero to determine if the stack is empty.\n * - getSize: Return the current size of the stack.\n * - Peek: Return the first element if the stack is not empty.\n * - Clear: Reset the array and size if the stack is not empty.\n * - Contains: Check if the stack includes a specific value.\n * - ToString: Return a string representation of the stack.\n * - Clone: Perform a shallow clone of the stack's items.\n */\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#complexity-analysis)Complexity Analysis:\n\n*   **Insertion (Push):** O(1)\n    \n    *   Adding an element to the top of the stack takes constant time.\n*   **Removal (Pop):** O(1)\n    \n    *   Removing the top element from the stack also takes constant time.\n*   **Searching (Contains):** O(n)\n    \n    *   Checking if a specific value is present involves a linear search through the stack.\n*   **Access (Peek, Get Size, Is Empty):** O(1)\n    \n    *   Accessing the top element, getting the size, and checking for emptiness are constant-time operations.\n\n### [](#implementation)Implementation:\n\n```typescript\nclass Stack<T> {\n  private size: number;\n  private items: T[];\n\n  constructor() {\n    this.size = 0;\n    this.items = [];\n  }\n\n  push(value: T): void {\n    this.items.push(value);\n    this.size++;\n  }\n\n  pop(): void {\n    if (this.isEmpty()) {\n      throw new Error(\"Stack underflow: cannot pop from an empty stack\");\n    }\n    this.items.pop();\n    this.size--;\n  }\n\n  isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  getSize(): number {\n    return this.size;\n  }\n\n  peek(): T | undefined {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[this.items.length - 1];\n  }\n\n  clear(): void {\n    if (this.isEmpty()) {\n      throw new Error(\"Stack empty: Can not clear empty stack\");\n    }\n    this.items = [];\n    this.size = 0;\n  }\n\n  contains(value: T): boolean {\n    if (this.isEmpty()) {\n      return false;\n    }\n    return this.items.includes(value);\n  }\n\n  toString(): string {\n    return JSON.stringify(this.items);\n  }\n\n  clone(): T[] {\n    return [...this.items]; // shallow cloning\n  }\n}\n\nconst stack = new Stack<number>(); // Generic type in this case it is number type\n\nstack.push(1);\nstack.push(2);\nconsole.log(\"Stack Size:\", stack.getSize());\nconsole.log(\"Stack Peek:\", stack.peek());\nconsole.log(\"Stack Contains 2:\", stack.contains(2));\nconsole.log(\"Stack Contents:\", stack.toString());\n\nstack.pop();\nconsole.log(\"Stack Size after Pop:\", stack.getSize());\nconsole.log(\"Is Stack Empty:\", stack.isEmpty());\n\nstack.clear();\nconsole.log(\"Stack Size after Clear:\", stack.getSize());\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#queue)Queue\n\n### [](#definition)Definition:\n\nA **Queue** is a data structure that follows the First In, First Out (FIFO) principle, where the first element added is the first one to be removed. It supports essential operations such as enqueue (adding) an element to the back, dequeue (removing) the front element, checking if it's empty, obtaining the size, and peeking (viewing) the front element without removal.\n\n### [](#algorithmic-steps)Algorithmic Steps:\n\n```typescript\n/**\n * Queue Class Definition:\n * - Initialize an empty array to store items and a variable to track size.\n * - Enqueue: Add an element to the end of the array and increment size.\n * - Dequeue: Remove the first element if the queue is not empty and decrement size.\n * - isEmpty: Check if the size is zero to determine if the queue is empty.\n * - getSize: Return the current size of the queue.\n * - Peek: Return the first element if the queue is not empty.\n */\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#complexity-analysis)Complexity Analysis:\n\n*   **Insertion (Enqueue):** O(1)\n    \n    *   Adding an element to the back of the queue takes constant time.\n*   **Removal (Dequeue):** O(1)\n    \n    *   Removing the front element from the queue also takes constant time.\n*   **Searching (N/A):** N/A\n    \n    *   Queues typically do not support searching for specific values.\n*   **Access (Peek, Get Size, Is Empty):** O(1)\n    \n    *   Accessing the front element, getting the size, and checking for emptiness are constant-time operations.\n\n### [](#implementation)Implementation:\n\n```typescript\nclass Queue<T> {\n  private items: T[];\n  private size: number;\n\n  constructor() {\n    this.items = [];\n    this.size = 0;\n  }\n\n  enqueue(value: T): void {\n    this.items.push(value);\n    this.size++;\n  }\n\n  dequeue(): void {\n    if (this.isEmpty()) {\n      throw new Error(\"Dequeue operation on an empty queue\");\n    }\n    this.items.shift();\n    this.size--;\n  }\n\n  isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  getSize(): number {\n    return this.size;\n  }\n\n  peek(): T | undefined {\n    return this.isEmpty() ? undefined : this.items[0];\n  }\n}\n\nconst queue = new Queue<number>(); // Generic type in this case it is number type\n\nqueue.enqueue(1);\nqueue.enqueue(2);\nconsole.log(\"Front of the queue:\", queue.peek());\nconsole.log(\"Queue size:\", queue.getSize());\n\nqueue.dequeue();\nconsole.log(\"Front of the queue after dequeue:\", queue.peek());\nconsole.log(\"Is the queue empty?\", queue.isEmpty());\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#priority-queue)Priority Queue\n\n### [](#definition)Definition:\n\nA **Priority Queue** is a data structure that maintains a collection of elements, each associated with a priority. The element with the highest priority is served before others. It supports operations such as enqueueing (adding) an element with a priority, dequeueing (removing) the element with the highest priority, checking if it's empty, obtaining the size, and peeking (viewing) the element with the highest priority without removal.\n\n### [](#algorithmic-steps)Algorithmic Steps:\n\n```javascript\n/**\n * Priority Queue Class Definition:\n * - Initialize an empty array to store items as priority-value pairs and a variable to track size.\n * - Enqueue: Add an element with a priority, maintaining order based on priorities.\n * - Dequeue: Remove the element with the highest priority if the queue is not empty and decrement size.\n * - isEmpty: Check if the size is zero to determine if the priority queue is empty.\n * - getSize: Return the current size of the priority queue.\n * - Peek: Return the element with the highest priority without removal if the priority queue is not empty.\n */\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#complexity-analysis)Complexity Analysis:\n\n*   **Insertion (Enqueue):** O(n) in the worst case\n    \n    *   Enqueueing involves finding the correct position based on priorities, which may require traversing the entire queue.\n*   **Removal (Dequeue):** O(1)\n    \n    *   Dequeueing the element with the highest priority is a constant-time operation.\n*   **Searching (Contains):** O(n)\n    \n    *   Checking if a specific value is present involves a linear search through the priority queue.\n*   **Access (Peek, Get Size, Is Empty):** O(1)\n    \n    *   Accessing the element with the highest priority, getting the size, and checking for emptiness are constant-time operations.\n\n### [](#implementation)Implementation\n\n```typescript\ntype PriorityQueueItem<T> = [number, T];\n\nclass PriorityQueue<T> {\n  private items: PriorityQueueItem<T>[];\n  private size: number;\n\n  constructor() {\n    this.items = [];\n    this.size = 0;\n  }\n\n  enqueue(item: PriorityQueueItem<T>) {\n    if (this.isEmpty()) {\n      this.items.push(item);\n    } else {\n      let added = false;\n      for (let i = 0; i < this.items.length; i++) {\n        if (item[0] < this.items[i][0]) {\n          this.items.splice(i, 0, item);\n          added = true;\n          break;\n        }\n      }\n      if (!added) {\n        this.items.push(item);\n      }\n    }\n    this.size++;\n  }\n\n  dequeue() {\n    if (this.isEmpty()) {\n      throw new Error(\"Dequeue operation on an empty queue\");\n    }\n    this.items.shift();\n    this.size--;\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  getSize() {\n    return this.size;\n  }\n\n  peek(): T | undefined {\n    return this.isEmpty() ? undefined : this.items[0][1];\n  }\n}\n\nconst priorityQueue = new PriorityQueue<string>(); // Generic type in this case it is string type\n\npriorityQueue.enqueue([1, \"Ramu\"]);\npriorityQueue.enqueue([2, \"Kumar\"]);\nconsole.log(\"Front of the priorityQueue:\", priorityQueue.peek());\nconsole.log(\"Queue size:\", priorityQueue.getSize());\n\npriorityQueue.dequeue();\nconsole.log(\"Front of the priorityQueue after dequeue:\", priorityQueue.peek());\nconsole.log(\"Is the priorityQueue empty?\", priorityQueue.isEmpty());\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#linked-list)Linked List\n\n### [](#definition)Definition:\n\nA **Linked List** is a linear data structure consisting of nodes, where each node points to the next one in the sequence. It provides dynamic memory allocation and efficient insertion and deletion operations compared to arrays. The linked list can be singly or doubly linked, and in our case, it is a singly linked list.\n\n### [](#algorithmic-steps)Algorithmic Steps:\n\n```typescript\n/**\n * LNode Class Definition:\n * - Represents a node with a value and a reference to the next node.\n *\n * LinkedList Class Definition:\n * - Initialize the head as null.\n * - Push: Add a new node with the given value to the end of the list.\n * - Pop: Remove and return the value of the last node in the list.\n * - ToArray: Convert the linked list to an array.\n * - Delete: Remove the first occurrence of a node with the given value.\n * - Print: Output the values of all nodes in the list.\n * - Find: Check if a node with the given value exists in the list.\n * - Reverse: Reverse the order of nodes in the list.\n * - Size: Return the number of nodes in the list.\n */\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#complexity-analysis)Complexity Analysis:\n\n*   **Insertion (Push):** O(n)\n    \n    *   Adding a new node to the end of the linked list requires traversing the entire list, resulting in a linear time complexity.\n*   **Deletion (Pop, Delete):** O(n)\n    \n    *   Removing the last node or a specific value involves traversing the list, leading to a linear time complexity.\n*   **Searching (Find):** O(n)\n    \n    *   Checking for the existence of a specific value requires a linear search through the list.\n*   **Access (ToArray, Print):** O(n)\n    \n    *   Converting the linked list to an array or printing its values involves traversing the entire list, resulting in linear time complexity.\n*   **Size:** O(n)\n    \n    *   Calculating the size of the linked list requires traversing all nodes, resulting in linear time complexity.\n*   **Reversal (Reverse):** O(n)\n    \n    *   Reversing the linked list involves traversing it once, resulting in linear time complexity.\n\n### [](#implementation)Implementation:\n\n```typescript\nclass LNode<T> {\n  value: T;\n  next: LNode<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass LinkedList<T> {\n  head: LNode<T> | null;\n\n  constructor() {\n    this.head = null;\n  }\n\n  push(value: T): void {\n    const newLNode = new LNode(value);\n    if (!this.head) {\n      this.head = newLNode;\n    } else {\n      let current = this.head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = newLNode;\n    }\n  }\n\n  pop(): T | null {\n    let current = this.head;\n    let prev: LNode<T> | null = null;\n\n    if (!current) {\n      return null;\n    }\n\n    while (current.next) {\n      prev = current;\n      current = current.next;\n    }\n\n    if (!prev) {\n      this.head = null;\n    } else {\n      prev.next = null;\n    }\n\n    return current.value;\n  }\n\n  toArray(): T[] {\n    let current = this.head;\n    const result: T[] = [];\n\n    while (current) {\n      result.push(current.value);\n      current = current.next;\n    }\n\n    return result;\n  }\n\n  delete(value: T): T | null {\n    let current = this.head;\n    let prev: LNode<T> | null = null;\n\n    while (current && current.value !== value) {\n      prev = current;\n      current = current.next;\n    }\n\n    if (current) {\n      if (!prev) {\n        this.head = current.next;\n      } else {\n        prev.next = current.next;\n      }\n\n      return current.value;\n    }\n\n    return null;\n  }\n\n  print(): void {\n    let current = this.head;\n\n    while (current) {\n      console.log(current.value);\n      current = current.next;\n    }\n  }\n\n  find(value: T): boolean {\n    let current = this.head;\n\n    while (current) {\n      if (current.value === value) {\n        return true;\n      }\n      current = current.next;\n    }\n\n    return false;\n  }\n\n  reverse(): void {\n    let current = this.head;\n    let prev: LNode<T> | null = null;\n\n    while (current) {\n      const next = current.next;\n      current.next = prev;\n      prev = current;\n      current = next;\n    }\n\n    this.head = prev;\n  }\n\n  size(): number {\n    let count = 0;\n    let current = this.head;\n\n    while (current) {\n      count++;\n      current = current.next;\n    }\n\n    return count;\n  }\n}\n\nconst linkedList = new LinkedList<number>();\n\nlinkedList.push(1);\nlinkedList.push(2);\nlinkedList.push(3);\n\nconsole.log(\"Original Linked List:\");\nlinkedList.print();\n\nconst poppedValue = linkedList.pop();\nconsole.log(`Popped Value: ${poppedValue}`);\n\nconsole.log(\"\\nLinked List After Pop:\");\nlinkedList.print();\n\nconst arrayRepresentation = linkedList.toArray();\nconsole.log(\"\\nArray Representation of Linked List:\", arrayRepresentation);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#binary-search-tree)Binary Search Tree\n\n### [](#definition)Definition:\n\nA **Binary Search Tree (BST)** is a hierarchical data structure that follows the binary tree property: for each node, all elements in its left subtree are less than the node, and all elements in its right subtree are greater. It allows for efficient search, insertion, and deletion operations.\n\n### [](#algorithmic-steps)Algorithmic Steps:\n\n```typescript\n/**\n * TreeNode Class Definition:\n * - Define a class for tree nodes with left, right, and value properties.\n *\n * BinarySearchTree Class Definition:\n * - Initialize the tree with a null root.\n * - Insert: Add a new node with the given value while maintaining the BST property.\n * - Find: Search for a node with the given value and return the value if found, else -1.\n * - GetMin: Find and return the minimum value in the BST.\n * - GetMax: Find and return the maximum value in the BST.\n * - Remove: Remove a node with the given value while maintaining the BST property.\n * - BreadthFirstSearch: Traverse the tree in breadth-first order and return an array of values.\n * - DepthFirstSearchPreOrder: Traverse the tree in pre-order and return an array of values.\n * - DepthFirstSearchInOrder: Traverse the tree in in-order and return an array of values.\n * - DepthFirstSearchPostOrder: Traverse the tree in post-order and return an array of values.\n */\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#complexity-analysis)Complexity Analysis:\n\n*   **Insertion:** O(log n) on average, O(n) in the worst case\n    \n    *   Adding a node involves traversing the height of the tree, which is logarithmic on average, but in the worst case (unbalanced tree), it becomes linear.\n*   **Search (Find):** O(log n) on average, O(n) in the worst case\n    \n    *   Searching for a value involves traversing the height of the tree, which is logarithmic on average, but becomes linear in the worst case.\n*   **GetMin and GetMax:** O(log n) on average, O(n) in the worst case\n    \n    *   Finding the minimum or maximum value involves traversing the left or right subtree, respectively, which is logarithmic on average, but becomes linear in the worst case.\n*   **Removal:** O(log n) on average, O(n) in the worst case\n    \n    *   Removing a node involves traversing the height of the tree, which is logarithmic on average, but becomes linear in the worst case.\n*   **Traversal (BFS, DFS):** O(n)\n    \n    *   Traversing the entire tree requires visiting each node once, resulting in linear time complexity.\n\n### [](#implementation)Implementation:\n\n```typescript\nclass TreeNode<T> {\n  left: TreeNode<T> | null;\n  right: TreeNode<T> | null;\n  value: T;\n\n  constructor(value: T) {\n    this.left = null;\n    this.right = null;\n    this.value = value;\n  }\n}\n\nclass BinarySearchTree<T> {\n  root: TreeNode<T> | null;\n\n  constructor() {\n    this.root = null;\n  }\n\n  insert(value: T): BinarySearchTree<T> | undefined {\n    const newNode = new TreeNode(value);\n    if (!this.root) {\n      this.root = newNode;\n      return this;\n    }\n    let current: TreeNode<T> | null = this.root;\n\n    while (true) {\n      if (value === current.value) return undefined;\n      if (value < current.value) {\n        if (!current.left) {\n          current.left = newNode;\n          return this;\n        }\n        current = current.left;\n      } else {\n        if (!current.right) {\n          current.right = newNode;\n          return this;\n        }\n        current = current.right;\n      }\n    }\n  }\n\n  find(value: T): T | -1 {\n    let current: TreeNode<T> | null = this.root;\n    if (!current) return -1;\n\n    while (current) {\n      if (value === current.value) return current.value;\n      if (value < current.value) {\n        current = current.left;\n      } else {\n        current = current.right;\n      }\n    }\n    return -1;\n  }\n\n  getMin(): T | undefined {\n    let current: TreeNode<T> | null = this.root;\n\n    while (current?.left) {\n      current = current.left;\n    }\n    return current?.value;\n  }\n\n  getMax(): T | undefined {\n    let current: TreeNode<T> | null = this.root;\n\n    while (current?.right) {\n      current = current.right;\n    }\n    return current?.value;\n  }\n\n  remove(value: T): void {\n    let current: TreeNode<T> | null = this.root;\n    this.root = this.removeNode(current, value) as TreeNode<T>;\n  }\n\n  removeNode(node: TreeNode<T> | null, value: T): TreeNode<T> | null {\n    if (!node) return null;\n\n    if (value < node.value) {\n      node.left = this.removeNode(node.left, value);\n    } else if (value > node.value) {\n      node.right = this.removeNode(node.right, value);\n    } else {\n      if (!node.left) {\n        return node.right;\n      } else if (!node.right) {\n        return node.left;\n      }\n\n      node.value = this.getMinValue(node.right) as T;\n\n      node.right = this.removeNode(node.right, node.value);\n    }\n    return node;\n  }\n\n  private getMinValue(node: TreeNode<T>): T | undefined {\n    let current: TreeNode<T> = node;\n    while (current.left) {\n      current = current.left;\n    }\n    return current.value;\n  }\n\n  breadthFirstSearch(): T[] {\n    const queue: TreeNode<T>[] = [];\n    const visited: T[] = [];\n    let current: TreeNode<T> | null = this.root;\n\n    if (!current) return visited;\n\n    queue.push(current);\n\n    while (queue.length) {\n      current = queue.shift() as TreeNode<T>;\n      visited.push(current.value);\n\n      if (current.left) queue.push(current.left);\n      if (current.right) queue.push(current.right);\n    }\n    return visited;\n  }\n\n  depthFirstSearchPreOrder(): T[] {\n    const visited: T[] = [];\n    this.traversePreOrder(this.root, visited);\n    return visited;\n  }\n\n  private traversePreOrder(node: TreeNode<T> | null, visited: T[]): void {\n    if (node) {\n      visited.push(node.value);\n      this.traversePreOrder(node.left, visited);\n      this.traversePreOrder(node.right, visited);\n    }\n  }\n\n  depthFirstSearchInOrder(): T[] {\n    const visited: T[] = [];\n    this.traverseInOrder(this.root, visited);\n    return visited;\n  }\n\n  private traverseInOrder(node: TreeNode<T> | null, visited: T[]): void {\n    if (node) {\n      this.traverseInOrder(node.left, visited);\n      visited.push(node.value);\n      this.traverseInOrder(node.right, visited);\n    }\n  }\n\n  depthFirstSearchPostOrder(): T[] {\n    const visited: T[] = [];\n    this.traversePostOrder(this.root, visited);\n    return visited;\n  }\n\n  private traversePostOrder(node: TreeNode<T> | null, visited: T[]): void {\n    if (node) {\n      this.traversePostOrder(node.left, visited);\n      this.traversePostOrder(node.right, visited);\n      visited.push(node.value);\n    }\n  }\n}\n\nconst tree = new BinarySearchTree<number>(); // Generic type in this case it is number type\ntree.insert(5);\ntree.insert(3);\ntree.insert(1);\ntree.insert(7);\ntree.insert(2);\n\ntree.breadthFirstSearch(); // [ 5, 3, 7, 1, 2 ]\ntree.depthFirstSearchPreOrder(); // [ 5, 3, 1, 2, 7 ]\ntree.depthFirstSearchInOrder(); // [ 1, 2, 3, 5, 7 ]\ntree.depthFirstSearchPostOrder(); // [ 2, 1, 3, 7, 5 ]\n\ntree.getMin(); // 1\ntree.getMax(); // 7\n\n// Tree representation\n/*\n            5\n        3       7\n    2\n1\n*/\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#graph)Graph\n\n### [](#definition)Definition:\n\nA **Graph** is a data structure that consists of a set of vertices and edges, where each edge connects two vertices. It models relationships and connections between entities. Graphs can be directed (edges have a specific direction) or undirected, and they may include weighted edges.\n\n### [](#algorithmic-steps)Algorithmic Steps:\n\n```typescript\n/**\n * Graph Class Definition:\n * - Initialize an adjacency list using a Map to store vertices and their neighbors.\n * - Add Vertex: Add a new vertex to the graph.\n * - Add Edge: Connect two vertices by adding edges.\n * - Remove Vertex: Remove a vertex and its associated edges.\n * - Remove Edge: Remove an edge between two vertices.\n * - Get Vertices: Return an array of all vertices in the graph.\n * - Get Edges: Return an array of all edges in the graph.\n * - Has Vertex: Check if a vertex exists in the graph.\n * - Has Edge: Check if an edge exists between two vertices.\n * - Get Neighbors: Return an array of neighbors for a given vertex.\n * - Is Empty: Check if the graph is empty.\n * - Clear: Remove all vertices and edges from the graph.\n * - Size: Return the number of vertices in the graph.\n * - Depth-First Search: Traverse the graph using depth-first search.\n * - Breadth-First Search: Traverse the graph using breadth-first search.\n */\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#complexity-analysis)Complexity Analysis:\n\n*   **Add Vertex (AddVertex):** O(1)\n    \n    *   Adding a vertex to the graph takes constant time.\n*   **Add Edge (AddEdge):** O(1)\n    \n    *   Connecting two vertices with an edge takes constant time.\n*   **Remove Vertex (RemoveVertex):** O(V + E)\n    \n    *   Removing a vertex involves removing its associated edges. The time complexity is proportional to the number of vertices (V) and edges (E) in the graph.\n*   **Remove Edge (RemoveEdge):** O(1)\n    \n    *   Removing an edge between two vertices takes constant time.\n*   **Get Vertices (GetVertices):** O(V)\n    \n    *   Obtaining an array of all vertices takes linear time.\n*   **Get Edges (GetEdges):** O(V + E)\n    \n    *   Obtaining an array of all edges takes time proportional to the number of vertices (V) and edges (E) in the graph.\n*   **Has Vertex (HasVertex):** O(1)\n    \n    *   Checking if a vertex exists in the graph takes constant time.\n*   **Has Edge (HasEdge):** O(1)\n    \n    *   Checking if an edge exists between two vertices takes constant time.\n*   **Get Neighbors (GetNeighbors):** O(1)\n    \n    *   Obtaining the neighbors of a vertex takes constant time.\n*   **Is Empty (IsEmpty):** O(1)\n    \n    *   Checking if the graph is empty takes constant time.\n*   **Clear (Clear):** O(1)\n    \n    *   Clearing the graph (removing all vertices and edges) takes constant time.\n*   **Size (Size):** O(1)\n    \n    *   Obtaining the number of vertices in the graph takes constant time.\n*   **Depth-First Search (DepthFirstSearch):** O(V + E)\n    \n    *   Traversing the graph using depth-first search takes time proportional to the number of vertices (V) and edges (E) in the graph.\n*   **Breadth-First Search (BreadthFirstSearch):** O(V + E)\n    \n    *   Traversing the graph using breadth-first search takes time proportional to the number of vertices (V) and edges (E) in the graph.\n\n### [](#implementation)Implementation:\n\n```typescript\nclass Graph<T> {\n  private adjacencyList: Map<T, Set<T>>;\n\n  constructor() {\n    this.adjacencyList = new Map();\n  }\n\n  addVertex(vertex: T): this {\n    if (!this.adjacencyList.has(vertex)) {\n      this.adjacencyList.set(vertex, new Set());\n    }\n    return this;\n  }\n\n  addEdge(vertex1: T, vertex2: T): this {\n    this.addVertex(vertex1).addVertex(vertex2);\n\n    this.adjacencyList.get(vertex1)!.add(vertex2);\n    this.adjacencyList.get(vertex2)!.add(vertex1);\n    return this;\n  }\n\n  removeVertex(vertex: T): this {\n    if (this.adjacencyList.has(vertex)) {\n      for (const adjacentVertex of this.adjacencyList.get(vertex)!) {\n        this.removeEdge(vertex, adjacentVertex);\n      }\n      this.adjacencyList.delete(vertex);\n    }\n    return this;\n  }\n\n  removeEdge(vertex1: T, vertex2: T): this {\n    if (this.adjacencyList.has(vertex1) && this.adjacencyList.has(vertex2)) {\n      this.adjacencyList.get(vertex1)!.delete(vertex2);\n      this.adjacencyList.get(vertex2)!.delete(vertex1);\n    }\n    return this;\n  }\n\n  getVertices(): T[] {\n    return [...this.adjacencyList.keys()];\n  }\n\n  getEdges(): [T, T][] {\n    const edges: [T, T][] = [];\n    for (const [vertex, neighbors] of this.adjacencyList) {\n      for (const neighbor of neighbors) {\n        edges.push([vertex, neighbor]);\n      }\n    }\n    return edges;\n  }\n\n  hasVertex(vertex: T): boolean {\n    return this.adjacencyList.has(vertex);\n  }\n\n  hasEdge(vertex1: T, vertex2: T): boolean {\n    return (\n      this.adjacencyList.has(vertex1) &&\n      this.adjacencyList.get(vertex1)!.has(vertex2)\n    );\n  }\n\n  getNeighbors(vertex: T): T[] {\n    return [...this.adjacencyList.get(vertex)!];\n  }\n\n  isEmpty(): boolean {\n    return this.adjacencyList.size === 0;\n  }\n\n  clear(): this {\n    this.adjacencyList.clear();\n    return this;\n  }\n\n  size(): number {\n    return this.adjacencyList.size;\n  }\n\n  depthFirstSearch(startVertex: T, callback: (vertex: T) => void): this {\n    const visited = new Set<T>();\n\n    function traverse(vertex: T): void {\n      visited.add(vertex);\n      callback(vertex);\n\n      for (const neighbor of this.adjacencyList.get(vertex)!) {\n        if (!visited.has(neighbor)) {\n          traverse.call(this, neighbor);\n        }\n      }\n    }\n\n    traverse.call(this, startVertex);\n    return this;\n  }\n\n  breadthFirstSearch(startVertex: T, callback: (vertex: T) => void): this {\n    const visited = new Set<T>();\n    const queue: T[] = [startVertex];\n    visited.add(startVertex);\n\n    while (queue.length > 0) {\n      const currentVertex = queue.shift()!;\n      callback(currentVertex);\n\n      for (const neighbor of this.adjacencyList.get(currentVertex)!) {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      }\n    }\n\n    return this;\n  }\n}\n\nconst graph = new Graph<string>(); // Generic type in this case it is number type\n\ngraph\n  .addVertex(\"A\")\n  .addVertex(\"B\")\n  .addVertex(\"C\")\n  .addEdge(\"A\", \"B\")\n  .addEdge(\"B\", \"C\")\n  .depthFirstSearch(\"A\", (vertex) => console.log(`Visited ${vertex} in DFS`))\n  .breadthFirstSearch(\"A\", (vertex) => console.log(`Visited ${vertex} in BFS`));\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n* * *\n\nThank you for reading this far; your support means a lot! If you have any questions, please don't hesitate to ask in the comments. Don't forget to like and share the article ‚Äì your appreciation is highly valued. Your feedback and suggestions are also more than welcome. üôèüëçüòä\n\n**Author**: [bugudiramu](https://dev.to/bugudiramu)",
    "shortDescription": "Introduction   This article is your guide to understanding and implementing Data Structures...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Data Structures Implementation in JavaScript or TypeScript\">\n<meta property=\"og:description\" content=\"Introduction   This article is your guide to understanding and implementing Data Structures...\">\n<meta name=\"keywords\" content=\"javascript, typescript, datastructures, programming, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AyfllRY9--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5f7c5j7sac1pehkhs2cc.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Data-Structures-Implementation-in-JavaScript-or-TypeScript",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5f7c5j7sac1pehkhs2cc.jpg"
  }
]