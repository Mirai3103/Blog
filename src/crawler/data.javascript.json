[
  {
    "title": "Sharing a state between windows without a server",
    "url": "https://dev.to/notachraf/sharing-a-state-between-windows-without-a-serve-23an",
    "tags": [
      "webdev",
      "javascript",
      "programming",
      "tutorial"
    ],
    "published_at": 1703342872000,
    "markdownContent": "Recently, there was a gif trending on social networks displaying an [amazing piece of art made by Bjorn Staal](https://twitter.com/_nonfigurativ_/status/1727322594570027343).\n\n[![Bjorn Staal art piece](https://res.cloudinary.com/practicaldev/image/fetch/s--NZTOoCoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AvCKb_XLed3eD9y4h-yjdKQ.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--NZTOoCoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AvCKb_XLed3eD9y4h-yjdKQ.gif)\n\nI wanted to recreate it, but lacking the 3D skills for the sphere, particles, and physics, I aimed to understand how to make a window react to the position of another window.\n\nEssentially, sharing a state between multiple windows, which I find to be one of the coolest aspects of Bjorn’s project!  \nUnable to find a good article or tutorial on the topic, I decided to share my findings with you.\n\n> Let’s attempt to create a simplified Proof of Concept (POC) based on Bjorn’s work!\n\n[![What we’ll try to create ( ofc it’s way less sexy than Bjorn’s work )](https://res.cloudinary.com/practicaldev/image/fetch/s--mG4QZD-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AKJHO9DmEDcTISWuCcvDpMQ.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--mG4QZD-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AKJHO9DmEDcTISWuCcvDpMQ.gif)\n\nThe first thing I did was to list all the ways I know for sharing information between multiple clients:\n\n## [](#duh-a-server)Duh: A server\n\nObviously, having a server (either with polling or websockets) would simplify the problem. However, since Bjorn achieved his result without using a server, this was out of the question.\n\n## [](#local-storage)Local Storage\n\nLocal Storage is essentially a browser key-value store, commonly used for persisting information between browser sessions. While typically used for storing Auth Tokens or Redirect URLs, it can store anything serializable. [You can learn more about it here](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage).\n\nI recently discovered some fun APIs of Local Storage, including the _`storage`_ event, which fires whenever the Local Storage is changed by another session of the same website.\n\n_Wanna Discover new APIs ?_  \n[Subscribe to my Newsletter ( for free ! )](https://notachraf.substack.com)\n\n[![How the storage event works ( simplified of course )](https://res.cloudinary.com/practicaldev/image/fetch/s--ao1AcQ-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/4048/1%2Aotw7fDvd-XFjj9yVBxn5zg.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ao1AcQ-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/4048/1%2Aotw7fDvd-XFjj9yVBxn5zg.png)\n\nWe can leverage this by storing the state of each window in the local storage. Whenever a window changes its state, other windows will be updated via the storage event.\n\nThis was my initial idea, and it seems to be the solution Bjorn chose, as he shared his LocalStorage manager code along with an example of using it with threeJs [here](https://github.com/bgstaal/multipleWindow3dScene).\n\nBut once I found out that there was code solving this problem, I wanted to see if there was another way… and spoiler alert: Yes, there is!\n\n## [](#shared-workers)Shared Workers\n\nBehind this flashy terminology is a fascinating concept — the concept of WebWorkers.\n\nIn simple terms, a worker is essentially a second script running on another thread. While they don’t have access to the DOM as they exist outside the HTML Document, they can still communicate with your main script.  \nThey are mostly used to offload the main script by handling background jobs, such as pre-fetching information or handling less critical tasks like streaming logs and polling.\n\n[![Simplified explanation of the mechanisms of communication between a script and a worker](https://res.cloudinary.com/practicaldev/image/fetch/s--E6EbB0o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/3548/1%2AizcnWc_p13m8pZy5d49mVw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--E6EbB0o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/3548/1%2AizcnWc_p13m8pZy5d49mVw.png)\n\nShared workers are a special kind of WebWorkers that can communicate with multiple instances of the same script, making them interesting for our use case! Okay, let’s dive right into the code!\n\n[![Shared workers can send information to multiple sessions of the same script](https://res.cloudinary.com/practicaldev/image/fetch/s--UjLFBmE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/5428/1%2AA7ObCM2OjojgfFP57ankyw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--UjLFBmE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/5428/1%2AA7ObCM2OjojgfFP57ankyw.png)\n\n### [](#setting-up-the-worker)Setting up the worker\n\nAs mentioned, workers are a “second script” with their own entry points. Depending on your setup (TypeScript, bundler, development server), you may need to tweak your tsconfig, add directives, or use specific import syntax.\n\nI can’t cover all the possible ways to use a web worker , but you can find the informations on MDN or the internet.  \nIf needed, I’d happily do a prequel to this article detailing all the ways to set them up!\n\nIn my case, I’m using Vite and TypeScript, so I need a `worker.ts` file and installing the `@types/sharedworker` as a dev dependency. We can create our connection in our main script using this syntax:  \n\n```typescript\nnew SharedWorker(new URL(\"worker.ts\", import.meta.url));\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nBasically, we need to:\n\n*   Identify each window\n    \n*   Keep track of all window states\n    \n*   Alert other windows to redraw once a window changes its state\n    \n\nOur state will be quite simple:  \n\n```typescript\ntype WindowState = {\n      screenX: number; // window.screenX\n      screenY: number; // window.screenY\n      width: number; // window.innerWidth\n      height: number; // window.innerHeight\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe most crucial information is, of course, `window.screenX` and `window.screenY` as they tell us where the window is relative to the top-left corner of your monitor.\n\nWe’ll have two types of messages:\n\n*   Each window, whenever it changes its state, will publish a `windowStateChangedmessage` with its new state.\n    \n*   The worker will send updates to all other windows to alert them that one of them has changed. The worker will send a `syncmessage` with the state of all windows.\n    \n\nWe can start with a plain worker looking a bit like this:  \n\n```typescript\n    // worker.ts \n    let windows: { windowState: WindowState; id: number; port: MessagePort }[] = [];\n\n    onconnect = ({ ports }) => {\n      const port = ports[0];\n\n      port.onmessage = function (event: MessageEvent<WorkerMessage>) {\n        console.log(\"We'll do something\");\n      };\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd our basic connection to the SharedWorker will look something like this. I have some basic functions that will generate an id, and calculate the current window state, also I did some typing on the kind of Message that we can use called WorkerMessage:  \n\n```typescript\n    // main.ts\n    import { WorkerMessage } from \"./types\";\n    import {\n      generateId,\n      getCurrentWindowState,\n    } from \"./windowState\";\n\n    const sharedWorker = new SharedWorker(new URL(\"worker.ts\", import.meta.url));\n    let currentWindow = getCurrentWindowState();\n    let id = generateId();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nOnce we start the application, we should alert the worker that there is a new window, so we send immediately a message:  \n\n```plaintext\n    // main.ts \n    sharedWorker.port.postMessage({\n      action: \"windowStateChanged\",\n      payload: {\n        id,\n        newWindow: currentWindow,\n      },\n    } satisfies WorkerMessage);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe can listen to this message on our worker side and change the onmessage accordingly. Basically, once the worker receives the windowStateChanged message, either it's a new window, and we append it to the state, or it's an old one that changed. Then we should alert everybody that the state has changed:  \n\n```typescript\n    // worker.ts\n    port.onmessage = function (event: MessageEvent<WorkerMessage>) {\n      const msg = event.data;\n      switch (msg.action) {\n        case \"windowStateChanged\": {\n          const { id, newWindow } = msg.payload;\n          const oldWindowIndex = windows.findIndex((w) => w.id === id);\n          if (oldWindowIndex !== -1) {\n            // old one changed\n            windows[oldWindowIndex].windowState = newWindow;\n          } else {\n            // new window \n            windows.push({ id, windowState: newWindow, port });\n          }\n          windows.forEach((w) =>\n            // send sync here \n          );\n          break;\n        }\n      }\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nTo send the sync, I actually need a bit of a hack, because the “port” property cannot be serialized, so I stringify it and parse it back. Because I’m lazy and I don’t just map the windows to a more serializable array:  \n\n```typescript\n    w.port.postMessage({\n      action: \"sync\",\n      payload: { allWindows: JSON.parse(JSON.stringify(windows)) },\n    } satisfies WorkerMessage);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow it’s time to draw stuff!\n\n## [](#the-fun-part-drawing-)The Fun Part : Drawing !\n\nOf course, we won’t be doing complicated 3D spheres : we’ll just draw a circle in the center of each window and a line linking between the spheres!\n\nI’ll be using the basic 2D Context of the HTML Canvas to draw, but you can use whatever you want. To draw a circle, it’s pretty simple:  \n\n```typescript\n    const drawCenterCircle = (ctx: CanvasRenderingContext2D, center: Coordinates) => {\n      const { x, y } = center;\n      ctx.strokeStyle = \"#eeeeee\";\n      ctx.lineWidth = 10;\n      ctx.beginPath();\n      ctx.arc(x, y, 100, 0, Math.PI * 2, false);\n      ctx.stroke();\n      ctx.closePath();\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd to draw the lines, we need to do a bit of math (I promise, it’s not a lot 🤓) by converting the relative position of the center of another window to coordinates on our current window.  \nBasically, we are changing bases. I do this using this bit of math. First, we will change the base to have coordinates on the monitor and offset that by the current window screenX/screenY\n\n[![Basically we are looking for the target position after base change](https://res.cloudinary.com/practicaldev/image/fetch/s--iFXSNnwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/5056/1%2AZg_z1aZxUE1WP-uOk1owdw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--iFXSNnwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://cdn-images-1.medium.com/max/5056/1%2AZg_z1aZxUE1WP-uOk1owdw.png)  \n\n```typescript\n    const baseChange = ({\n      currentWindowOffset,\n      targetWindowOffset,\n      targetPosition,\n    }: {\n      currentWindowOffset: Coordinates;\n      targetWindowOffset: Coordinates;\n      targetPosition: Coordinates;\n    }) => {\n      const monitorCoordinate = {\n        x: targetPosition.x + targetWindowOffset.x,\n        y: targetPosition.y + targetWindowOffset.y,\n      };\n\n      const currentWindowCoordinate = {\n        x: monitorCoordinate.x - currentWindowOffset.x,\n        y: monitorCoordinate.y - currentWindowOffset.y,\n      };\n\n      return currentWindowCoordinate;\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd as you know, now we have two points on the same relative coordinates system, we can now draw the line !  \n\n```typescript\n    const drawConnectingLine = ({\n      ctx,\n      hostWindow,\n      targetWindow,\n    }: {\n      ctx: CanvasRenderingContext2D;\n      hostWindow: WindowState;\n      targetWindow: WindowState;\n    }) => {\n      ctx.strokeStyle = \"#ff0000\";\n      ctx.lineCap = \"round\";\n      const currentWindowOffset: Coordinates = {\n        x: hostWindow.screenX,\n        y: hostWindow.screenY,\n      };\n      const targetWindowOffset: Coordinates = {\n        x: targetWindow.screenX,\n        y: targetWindow.screenY,\n      };\n\n      const origin = getWindowCenter(hostWindow);\n      const target = getWindowCenter(targetWindow);\n\n      const targetWithBaseChange = baseChange({\n        currentWindowOffset,\n        targetWindowOffset,\n        targetPosition: target,\n      });\n\n      ctx.strokeStyle = \"#ff0000\";\n      ctx.lineCap = \"round\";\n      ctx.beginPath();\n      ctx.moveTo(origin.x, origin.y);\n      ctx.lineTo(targetWithBaseChange.x, targetWithBaseChange.y);\n      ctx.stroke();\n      ctx.closePath();\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd now, we just need to react to state changes.  \n\n```typescript\n    // main.ts\n    sharedWorker.port.onmessage = (event: MessageEvent<WorkerMessage>) => {\n        const msg = event.data;\n        switch (msg.action) {\n          case \"sync\": {\n            const windows = msg.payload.allWindows;\n            ctx.reset();\n            drawMainCircle(ctx, center);\n            windows\n              .forEach(({ windowState: targetWindow }) => {\n                drawConnectingLine({\n                  ctx,\n                  hostWindow: currentWindow,\n                  targetWindow,\n                });\n              });\n          }\n        }\n    };\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd as a final step, we just need to periodically check if our window changed and send a message if that’s the case  \n\n```typescript\n      setInterval(() => {\n        const newWindow = getCurrentWindowState();\n        if (\n          didWindowChange({\n            newWindow,\n            oldWindow: currentWindow,\n          })\n        ) {\n          sharedWorker.port.postMessage({\n            action: \"windowStateChanged\",\n            payload: {\n              id,\n              newWindow,\n            },\n          } satisfies WorkerMessage);\n          currentWindow = newWindow;\n        }\n      }, 100);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[You can find the whole code for this on this repository](https://github.com/achrafl0/multi-window-article). I actually made it a bit more abstract as I did a lot of experiments with it, but the gist of it is the same.\n\nAnd if you run it on multiple windows, hopefully, you can get the same thing as this!\n\n[![The full result](https://res.cloudinary.com/practicaldev/image/fetch/s--mG4QZD-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AKJHO9DmEDcTISWuCcvDpMQ.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--mG4QZD-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://cdn-images-1.medium.com/max/2000/1%2AKJHO9DmEDcTISWuCcvDpMQ.gif)\n\nThanks for reading !\n\nIf you found this article helpful, intersting or just fun, you can share it to your friends/coworkers/community  \n[You can also subscribe to my newsletter](https://notachraf.substack.com/) It's free !\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--ea2pXlMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://substackcdn.com/image/fetch/f_auto%2Cq_auto:best%2Cfl_progressive:steep/https%253A%252F%252Fnotachraf.substack.com%252Ftwitter%252Fsubscribe-card.jpg%253Fv%253D-764170094%2526version%253D9)](https://notachraf.substack.com/embed)\n\n## [The Degenerate Engineer | Achraf | Substack](https://notachraf.substack.com/embed)\n\nshitty newsletter by a braindead engineer: basically 60% Tech / 30% Human interactions / 10% internet lore. Click to read The Degenerate Engineer, by Achraf, a Substack publication with hundreds of subscribers.\n\n![favicon](https://res.cloudinary.com/practicaldev/image/fetch/s--o9OwR9CS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://substackcdn.com/icons/substack/favicon.ico) notachraf.substack.com\n\n## [](#edit)Edit:\n\nSome of you proposed another solution to this problem, namely using `BroadcastChannel API` and I wanted to give them a shoutout, mainly [@framemuse](https://dev.to/framemuse) and [@axiol](https://dev.to/axiol)  \nActually [@axiol](https://dev.to/axiol) did a full write up of the solution using the BroadcastChannel API that you can find here: [https://github.com/Axiol/linked-windows-broadcast-api](https://github.com/Axiol/linked-windows-broadcast-api)\n\nHuge thanks to them to help everyone else learn something new (starting from me)\n\n**Author**: [notachraf](https://dev.to/notachraf)",
    "shortDescription": "Recently, there was a gif trending on social networks displaying an amazing piece of art made by...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Sharing a state between windows without a server\">\n<meta property=\"og:description\" content=\"Recently, there was a gif trending on social networks displaying an amazing piece of art made by...\">\n<meta name=\"keywords\" content=\"webdev, javascript, programming, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cQDSy8qA--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8skuyne3l6gum3eud20z.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Sharing-a-state-between-windows-without-a-server",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8skuyne3l6gum3eud20z.gif"
  },
  {
    "title": "🔥 Top 12 libraries for your NextJS project 🏆",
    "url": "https://dev.to/nevodavid/top-12-libraries-for-your-nextjs-project-1oob",
    "tags": [
      "webdev",
      "javascript",
      "tutorial",
      "react"
    ],
    "published_at": 1702381659000,
    "markdownContent": "[![Save](https://res.cloudinary.com/practicaldev/image/fetch/s--vWMU1ERd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szi0gw4l049yctxjeu1p.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--vWMU1ERd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szi0gw4l049yctxjeu1p.png)\n\nI have been a full-stack developer for the last decade, building smaller projects like [gitup](https://gitup.dev/) and bigger projects like [crosspublic](https://github.com/github-20k/crosspublic).\n\nOver the years, I have tested different tools to:\n\n1.  Be more productive\n2.  Have fewer bugs\n3.  Write less code\n\nI have curated a list of libraries to help you develop great NextJS stuff that I am using daily with an explanation of what you can do with them. **Let's dig in.**\n\n[![Be Better](https://res.cloudinary.com/practicaldev/image/fetch/s---FtvPJ1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap38q1ej3tqypjuebg3u.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s---FtvPJ1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap38q1ej3tqypjuebg3u.gif)\n\n* * *\n\n# [](#1-triggerdev)1\\. [Trigger.dev](https://github.com/triggerdotdev/trigger.dev)\n\nWith NextJS, I always needed help with everything connected to background jobs.\n\nIt can be a cron job running in the background to send emails or process new users’ funnels in the system.\n\nThat caused me to run another server to process those jobs, either an external EC2 server or a serverless function with an event bridge.  \nIt would cause me to pay for extra services (manage more services) and manage horizontal scaling myself (at some point).\n\n[Trigger.dev](http://Trigger.dev) changed that, offering background jobs on top of NextJS (and many others).  \nThey also know how to tackle NextJS serverless timeout limit to process long-running jobs.\n\n[Star Trigger.dev if you can 🥰](https://github.com/triggerdotdev/trigger.dev)\n\n[![TriggerDev](https://res.cloudinary.com/practicaldev/image/fetch/s--YgxRdEr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/triggertop.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--YgxRdEr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/triggertop.gif)\n\n* * *\n\n## [](#2-prisma)2\\. [Prisma](https://www.prisma.io)\n\nPrisma is not NextJS-specific. It's an ORM to work with your database.\n\nORM is a unified wrapper for DB queries.  \nIt keeps a good structure and lets you quickly change between different database providers.\n\nWhile there are a lot of ORMs you can use, Prisma is unique by offering Typescript support for your queries, making everything 100x faster. NextJS imbraced typescript in their default configuration, making it a perfect match.\n\n[Star Prisma if you can 🥰](https://github.com/prisma/prisma)\n\n[![prisma.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--jLFf_WGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/prisma.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--jLFf_WGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/prisma.gif)\n\n* * *\n\n## [](#3-nextauthjs)3\\. [NextAuth.js](https://next-auth.js.org)\n\nSuppose you want to implement any service provider authentication, such as Facebook / Google / GitHub (oAuth).\n\nIn that case, you must create your implementation for each provider or use an external service like [Auth0](https://auth0.com/) or [Clerk](https://clerk.com/).\n\nIf you are going to do it yourself, NextAuth provides a prosperous implementation so that you can easily add them by only providing the correct keys.\n\nThey also take care of authorization once you are logged in.  \n_Next.JS auth can work with Prisma out-of-the-box._\n\n[Star NextAuth if you can 🥰](https://github.com/nextauthjs/next-auth)\n\n[![authjs.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--rhQif20I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/authjs.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--rhQif20I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/authjs.gif)\n\n* * *\n\n## [](#4-nextsitemap)4\\. [Next-Sitemap](https://github.com/iamvishnusankar/next-sitemap)\n\nOnce you have deployed NextJS on your server, you need to help google index all the pages.\n\nIt's better if you can tell Google about all the pages on your website.\n\nFor that, you can create a sitemap.xml file listing all your pages.\n\nYou can easily use Next-Sitemap for that.\n\n[Star Next-Sitemap if you can 🥰](https://github.com/iamvishnusankar/next-sitemap)\n\n[![sitemap.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--mZCzzNhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/sitemap.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--mZCzzNhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/sitemap.gif)\n\n* * *\n\n## [](#5-next-seo)5\\. [Next SEO](https://github.com/garmeeh/next-seo)\n\nSEO is the process of making your website appear on the google feed for different queries by providing keywords, descriptions, and images to your website preview.\n\nIf you use the new NextJS app router, you might not need to use it.\n\nYou can use their `export metadata` approach or `generateMetadata`,  \nbut if you use the old app router, that's the best way to add SEO to your website.\n\n[Star Next SEO if you can 🥰](https://github.com/garmeeh/next-seo)\n\n[![seo.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--rbpSJ27_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/seo.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--rbpSJ27_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/seo.gif)\n\n* * *\n\n## [](#6-zod)6\\. [Zod](https://github.com/colinhacks/zod)\n\nZod is an object validator (both server and client).  \nYou can put different rules on an object and validate it later, such as username and password, or more complex things like the array length or conditions on other keys. _Zod is not NextJS specific._\n\nOver the years, I have seen a lot of object validators, such as [Yup](https://github.com/jquense/yup) and [class-validator](https://github.com/typestack/class-validator).\n\nYup, it looks not as maintained as Zod, and the class-validator is powerful when using things like NestJS - so you best go with Zod.\n\n[Star Zod if you can 🥰](https://github.com/colinhacks/zod)\n\n[![zod.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--zU3OvUff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/zod.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--zU3OvUff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/zod.gif)\n\n* * *\n\n## [](#7-reacthookform)7\\. [React-hook-form](https://github.com/react-hook-form/react-hook-form)\n\nWhile Zod can validate objects, it will not affect your client and backend without customized logic.\n\nReact-hook-form is an excellent project for client validation (showing errors on inputs, managing the input state, and submitting).\n\nOf course, you can use Zod as a validator for React-hook-form.\n\n[Star React Hook Form if you can 🥰](https://github.com/react-hook-form/react-hook-form)\n\n[![hookform.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4omIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/hookform.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4omIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/hookform.gif)\n\n* * *\n\n## [](#8-trpc)8\\. [tRPC](https://github.com/trpc/trpc)\n\nI would admit that I have never used tRPC before, but it looks like it's getting a lot of eyes today.\n\nIt has a similar concept as Prisma; they generate an interface for your request and response, so when you use frontend calls, you get that autocomplete.\n\nThat's great because it reduces the chance of bugs - let's say you modified a backend route, you won't be able to compile the project - the client will return an error of nonexisting parameters or response keys.\n\n[Star tRPC if you can 🥰](https://github.com/trpc/trpc)\n\n[![trpc.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--PVUrR9Qo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/trpc.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--PVUrR9Qo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/trpc.gif)\n\n* * *\n\n## [](#9-swr-and-reactquery)9\\. [SWR](https://swr.vercel.app) and [React-Query](https://github.com/TanStack/query)\n\nI have used Axios and fetch as base libraries for sending requests for years.\n\nSWR and React-Query enhance those libraries and offer hooks, caching, transformation, etc.\n\nHighly recommended for every project. Pay attention that those libraries are for client components (`use client`), not server components.\n\n[Star React Query if you can 🥰](https://github.com/TanStack/query)\n\n[![query.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--_HyPWCab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/query.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--_HyPWCab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/query.gif)\n\n* * *\n\n## [](#10-lodash)10\\. [lodash](https://lodash.com)\n\nThis is not a NextJS-specific library.  \nIt's a library for mutating data, and while JavaScript progressed a lot during the years with excellent native functions like flatMap, there are still things that are missing, such as unique array by key or chunking and array.\n\nI find myself using lodash for almost any project.\n\n[Star lodash if you can 🥰](https://github.com/lodash/lodash)\n\n[![lodash.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--FZox9NTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/lodash.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--FZox9NTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/lodash.gif)\n\n* * *\n\n## [](#11-dayjs)11\\. [dayjs](https://day.js.org/)\n\nday.js is a library for everything related to dates, formatting, timezones, etc.\n\nI might get roasted for that one. I have been working with `moment.js` for years.\n\nNow that it's not maintained anymore, dayjs is a good alternative.\n\nSome people prefer the new JS functions to deal with dates, but I still feel a significant gap exists between the dayjs options and the native JS date functions.\n\n[Star dayjs if you can 🥰](https://github.com/iamkun/dayjs)\n\n[![scrolldown.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--hpXRJWhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/scrolldown.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--hpXRJWhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/scrolldown.gif)\n\n* * *\n\n## [](#12-jsdom)12\\. [jsdom](https://github.com/jsdom/jsdom)\n\nThis is not a must, but I have been using it lately for many projects as an alternative to [cheerio](https://github.com/cheeriojs/cheerio).\n\nYou can take an entire page content (`<html><body>….</html>)` and turn it into an object you can manipulate later with the “native” javascript dom functions `querySelector`, `innerHTML`, etc…\n\nGreat for projects that require some scraping.\n\n[Star jsdom if you can 🥰](https://github.com/jsdom/jsdom)\n\n[![jsdomer.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--A6y-G2oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/jsdomer.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--A6y-G2oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/jsdomer.gif)\n\n* * *\n\nLet's connect on X? :)  \n[I'm here](https://twitter.com/nevodavid)\n\nDo you use some other cool libraries for NextJS?\n\nLet me know about them in the comments :)\n\n**Author**: [Nevo David](https://dev.to/nevodavid)",
    "shortDescription": "I have been a full-stack developer for the last decade, building smaller projects like gitup and...",
    "htmlMeta": "<meta property=\"og:title\" content=\"🔥 Top 12 libraries for your NextJS project 🏆\">\n<meta property=\"og:description\" content=\"I have been a full-stack developer for the last decade, building smaller projects like gitup and...\">\n<meta name=\"keywords\" content=\"webdev, javascript, tutorial, react, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iwBV--KU--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9b8cdyzavq8i52rf0rz.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Top-12-libraries-for-your-NextJS-project",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9b8cdyzavq8i52rf0rz.gif"
  },
  {
    "title": "12 Senior Developer Traits Juniors Need To Master 🔥",
    "url": "https://dev.to/dragosnedelcu/12-senior-developer-traits-junior-developers-need-to-master-285m",
    "tags": [
      "javascript",
      "career",
      "productivity",
      "react"
    ],
    "published_at": 1702481891000,
    "markdownContent": "The fastest way to get to the top in any field, whether it is arts, sports or software development is to study the people that are already at the top… And do what they are doing that you are not.\n\nIf you write code for a living, this means taking a look at Senior Developers. It means identifying what skills, habits, and traits they possess that you don’t. \n\nAfter spending thousands of hours in the last 3 years working with top-notch Software Engineers worldwide, I found out that there are 12 Senior Developer traits that you can put in place right now to fast-track your growth to the next level. \n\nLet’s start with number one…\n\n## [](#1-focus)1\\. Focus\n\nFocus means saying no to some things, so we can do others. \n\nIdeally, saying no to the things that don’t matter. And saying yes to the stuff that makes a difference. The stuff that moves the boat faster. \n\nThis is really hard for many developers because it goes against our natural instinct. It means accepting that you can’t do everything. And that not every opportunity is created equal.\n\nYou can’t learn every new framework out there. You can’t read every newsletter. You can’t attend every conference. And you don’t have to.\n\nYour time is limited. So is your energy. \n\nBeing a Senior Developer means picking your battles. \n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--7LonvABd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wftnt9w68gjflh2yghs0.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--7LonvABd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wftnt9w68gjflh2yghs0.png)\n\n> “People think focus means saying yes to the thing you've got to focus on. But that's not what it means at all. It means saying no to the hundred other good ideas that there are.” - Steve Jobs\n\nFunny enough, the better you can pick, the faster you will progress. Senior Developers have the same 24 hours in the day that you have. But they get more done.\n\nHow?\n\nBy doing less.\n\nWhen a new thing comes your way, ask yourself \"Does this really matter?\" Or is it just another trend? Chances are it is just another distraction disguised as an opportunity. \n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--vqyn8dkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgqenoavc69esm48yf06.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--vqyn8dkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgqenoavc69esm48yf06.png)\n\nSenior Developers say more no’s than yeses. They finish more projects than they start. And they master the framework they already work with, before learning a new one. If you want to get to Senior faster, the first trait you need to develop is focus. \n\n## [](#2-second-order-thinking)2\\. Second Order Thinking\n\nOne thing that screams \"Junior dev\" is the attitude of \"let’s build it and we will find out\". Juniors have a bias for coding first and thinking second. \n\nThat can be a good attitude if you are just starting out, but when you are working on production-ready software, some technical decisions you won’t be able to change. Or change easily. \n\nFor example, you choose Vue as a front-end framework.\n\nThen, requirements change. You start thinking React would be a better option. Sure, you can switch to React. But it will be neither easy nor cheap.\n\nSenior Developers know it is easy to get high on your own supply. But if you fall in love with the frameworks and libraries you know best, you will start making poor technical decisions.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--nyFwH6ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eb6xwgv7jhmn4p7qcq1.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--nyFwH6ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eb6xwgv7jhmn4p7qcq1.png)\n\nThey think twice about the consequences of their choices. This can mean asking the “five whys” when trying to understand a problem.\n\nOr thinking about the possible drawbacks their solution could have.\n\nFor example, now that we have added Redux, global state might be a bit easier to manage. But we will have to onboard new developers on Redux. The learning curve is high.\n\nAnd, guess what, our JavaScript bundle will get bigger which is not good for performance.\n\nConsidering second-order circumstances will make you a much better developer. It will also help you during technical interviews.\n\n🚨 P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) 🚨\n\n## [](#3-pragmatism)3\\. Pragmatism\n\nWhen Junior Developers read a book on best practices, they jump and try to apply them to every line of code in any release. They follow them religiously. \n\nIf you can't make technical decisions by yourself, it is much easier to stick to predefined rules. But software development is not a religion.\n\nA good example is Testing.\n\nWhen a Junior dev reads about TDD (Test Driven Development), they will start trying to test everything. Aiming for full code coverage. When in fact, complete code coverage gives diminishing results and will turn out to be a waste of time.\n\n[![Every Junior Developer that discovered TDD](https://res.cloudinary.com/practicaldev/image/fetch/s--MPjz6m9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do0uxbjna2alz58b3mvg.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--MPjz6m9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do0uxbjna2alz58b3mvg.png)\n\nSenior Devs know how to balance best practices and time to market. When to take shortcuts and when not to. \n\nHacking things quickly will generate bugs and technical debt. Always sticking by the rules when the context of your code changes will result in bad decisions.\n\nYou need a balance. \n\nBe open to reconsidering your technical choices based on circumstances.\n\n## [](#4-nothing-to-prove)4\\. Nothing To Prove\n\nBecause of lack of confidence, Junior devs find themselves constantly trying to prove themselves to others. Same with Senior developers who are insecure about their value and skills. \n\nThey base their confidence on the validation they receive from others.\n\nThis is a losing game.\n\nThey will try to show how much they know in a certain technical discussion, talking over others, or pushing code late at night or over the weekend.\n\nIn reality, all these behaviors create a toxic team environment and backfire. In the best case, they will make you look less Senior than you actually are. \n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--OMq9X8RD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sfp7p24zru1r9zafd05.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--OMq9X8RD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sfp7p24zru1r9zafd05.png)  \nThe Cheetah doesn’t have to prove itself in the race, it only runs to hunt.\n\nThere are two ways to deal with this. \n\nThe first one is to stop spending so much on external validation. Because the truth is you don’t need to prove yourself to anyone. Only to yourself.\n\nThe second is making peace with the negative voices in your head.\n\nYou can be your worst critic. Perfectionism, fear of failure, and a mistaken idea of what a \"real\" developer is are destroying your self-esteem. That’s why no matter how hard you work you always feel like falling short. \n\nIt’s time to get out of your head.\n\nFocus on mastering your craft and the rest will follow. You will instantly become more confident in yourself and your skills. And you will stop trying to prove yourself to strangers.\n\n## [](#5-master-the-fundamentals)5\\. Master The Fundamentals\n\nWhenever I bump into a LinkedIn profile of a developer and they describe themselves as a \"React\" developer, or an \"Angular\" developer, I know they are not Senior. They might be Senior in that framework, but not Senior overall.\n\nA Framework developer will never be a Senior Developer.\n\nFrameworks don’t make you Senior because frameworks are only the icing on the cake. Not the cake itself. The tip of the iceberg, versus its bottom.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--CBMvBobU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chomoxfdvoemx4m4n15o.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--CBMvBobU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chomoxfdvoemx4m4n15o.png)\n\nI would even speculate that behind the current epidemic of Impostor Syndrome among software developers, even Senior ones is not a lack of talent or lack of hard work. \n\nIt is weak fundamentals.\n\nThis is also why topics like debugging or performance optimization are a guessing game for most developers. They are not used to digging below the surface of the libraries and tools they are working with.\n\nTo become a Senior Developer you must not only understand the “What” but also the “Why” behind things.\n\nA Senior developer would, for example, not only be able to build a React application. But they would also understand why React has been built in a certain way. And how it blends with the language it’s been written in (JavaScript/TypeScript) and the platform it runs on (the Web Browser).\n\nThe good news is that once you get the fundamentals handled, the level of everything will rise.\n\n🚨 P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) 🚨\n\n## [](#6-deliver-endtoend%C2%A0)6\\. Deliver End-to-end \n\nThe #1 reason why companies avoid Junior developers is that they need a lot of external help to get things done. External help means you will be bothering a Senior developer to get your stuff done. \n\nJunior developers are considered “expensive” because they can’t deliver independently.\n\nInstead, Senior developers can deliver end-to-end. Give them a bunch of requirements and they will figure out the rest. This doesn’t mean they are lone wolves, they are usually great at working in a team. \n\nIt doesn't mean Senior devs hack things quickly just to push them forward.\n\nThat’s not a “real” Senior.\n\nAnd it doesn’t mean that they know every part of the software development lifecycle in depth. \n\nBut, Senior developers understand all the major pieces across the software development life cycle. And can contribute to each of them (frontend, backend, deployment).\n\nIf you are a Junior/Mid developer looking to level up, end-to-end delivery is one trait you need to put your eyes on.\n\n## [](#7-mental-models%C2%A0)7\\. Mental Models \n\nOne of the main things that sets Senior devs apart from more Junior ones is the amount of complexity they can handle.\n\nSeniors can understand more complex codebases and requirements. \n\nThey can understand second-order circumstances. How changes in the codebase will affect performance, costs, and even the team. \n\nAnd they do that not because they memorise every implementation detail. That's impossible because human memory is very limited.\n\nThey do that because they abstract the complexity of the code into mental models. These are simple ways of representing reality.\n\nHow can developers build quality Mental Models?\n\nBy looking behind frameworks and libraries and learning the design patterns behind them. There is a lot of noise out there depending on your tech stack. Things like SOLID principles, or MVC…\n\nBut I think the best way to start is by picking whatever framework you are working with and trying to look beyond the code.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--skGNbI-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk2opgm1njc76p0a6k0n.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--skGNbI-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk2opgm1njc76p0a6k0n.png)\n\nStart asking yourself, why did the creators of the framework build it this way? Is it built on new concepts or is it just an implementation of age-old principles (which is usually the case)? \n\nBy answering these questions you will build your mental models on software development, and be able to handle more complexity. That’s one of the most effective ways to fast-track your growth to Senior Developer.  \n\n🚨 P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) 🚨\n\n## [](#8-senior-developers-control-the-story)8\\. Senior Developers Control The Story\n\nOne thing Senior Developers can do extremely well is lead technical discussions and influence other people around them. Be it business stakeholders, product managers or fellow developers, Senior devs know how to guide them in the right direction.\n\nThey do this using a mix of assertiveness, technical expertise, and communication skills. \n\nSenior developers are also able to set strong boundaries. \n\nThey can disagree without getting emotional. They can stand up for themselves (and others) during meetings. They negotiate their salary aggressively. \n\nAnd they tell their own story.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--jueySC2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd8vutmtz3wbxas13ey1.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--jueySC2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd8vutmtz3wbxas13ey1.png)  \nSenior Developers know how and when to draft a line in the sand and say \"enough is enough\".\n\nIf another developer starts blaming others during a code review, Seniors know how to stop them. If higher management tries to get into a developer’s work and micromanage, Seniors know how to push them back without damaging the relationship. \n\nThere is no step-by-step guide on how to become more assertive as a developer. \n\nIt takes repetition and practice. The first step is to stop saying “Yes” all the time. And to start trying to get your way in salary negotiations. \n\n## [](#9-long-term-thinking)9\\. Long Term Thinking\n\nJunior developers think for “now”. They think short term. That is true for their code when they take shortcuts. A Junior Developer will extend a piece of code without thinking about refactoring it properly or simply ignore testing and performance.\n\nBut Juniors also think short term about their careers. \n\nThis can mean job hopping too much or burning bridges. It can mean neglect. \n\nLike not improving your skills or the way you sell yourself because right now your job is stable. Just to regret it six months later after getting laid off.\n\nPart of becoming a more Senior developer is starting to think long-term.\n\nThe first way to do that is by changing your mindset. Most short-term thinking that Junior devs have is not caused by laziness but by self-doubt.\n\nDeep inside they are still thinking whether being a developer is the right thing for them. Or whether they picked the right career.\n\nThese doubts stop them from committing long-term.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--A6tltXNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw1r4ng1hoyigg3e0z6v.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--A6tltXNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw1r4ng1hoyigg3e0z6v.png)  \nGood things take time, Senior developers know this and adjust their thinking accordingly.\n\nAnd now with AI threatening the end of software development, this short-term thinking is more frequent than ever. Why commit to something anyway if it is going to be gone soon?\n\nTrust me on this, it is only when I made a full commitment to my career as a developer that things started to take off. \n\nI said, “this is it”.\n\nI stopped looking outside. I told myself: this is my job now and it will be my job for the next decade so let me do it well. \n\nI started investing in my skills because now I know they will pay off. \n\nEven if you are not going to write code for the next 20 years, having a long-term mindset will bring you great benefits. Senior developers got to Senior level because they committed to their craft. If you aspire to get there, you should do the same. \n\n🚨 P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) 🚨\n\n## [](#10-excellence-is-a-habit)10\\. Excellence Is A Habit\n\nI think it was Kent Beck who said the famous phrase \"I am not a great programmer, just a good programmer with great habits\". Habits are important because they stand the test of time. \n\nBecause any kind of knowledge you have about a JavaScript framework will sooner or later become obsolete. Technology changes. But your habits will stay with you forever. \n\nThe good news is that humans are creatures of habit.\n\nIt is not easy to set new routines in our brains.\n\nBut once we interiorise them as habits, we have an easy time following through. The best way to take advantage of this is to get whatever goal you have and break it into daily actions. Then turn those actions into habits through repetition.\n\nFor example, if you want to get better at testing, write one unit test every day. \n\nIf you want to be more prepared in the daily meeting, and think clearly, keep a journal. If you want to find a new developer job, and you have to send 100 applications, send 10 applications every day. \n\nSet up new habits and your progress towards the Senior level will be constant and steady. \n\n## [](#11-protect-your-most-important-asset)11\\. Protect Your Most Important Asset\n\nBeing a Senior Developer means thinking long-term not only about your code and technical decisions but also about your health.\n\nBecause health is wealth.\n\nI talk about this again and again in my videos.\n\nDeveloper jobs are extremely sedentary. You spend most of your day sitting in a chair in front of a computer. That is very bad for your health. \n\nThen, there is all the trash food, like chips, soda, and candy in the office. This means unless you make a conscious effort, it will be hard for you to stay healthy and in shape.   \n\nBut if you want to have a long and productive career writing software, and you don’t want to end up with back problems, diabetes, or even something worse, you need to start taking care of your health.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--lfsPwdtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsdohne0ydvireyloigf.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--lfsPwdtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsdohne0ydvireyloigf.png)\n\nIf you want the golden eggs, don't kill the goose. If you want more productivity, take care of yourself first.\n\nThis doesn’t mean you have to start hitting the gym 5 times a week. \n\nOr go on some crazy diet. But do sports at least 2 to 3 times a week. You can hit the gym, go for a run, or do a team sport. Right now I am doing \n\nOn the diet side, cut on sugar and refined carbs. Don’t overdo it with the meat either. \n\nConsider your mental health as well.\n\nIgnore advice like “eat, sleep code, repeat” and build a life outside of work.\n\nStart a new hobby. Reach out to a friend. Take breaks. \n\nIn the short run, you might progress a bit slower. But in the long run, you will be able to stay in the game for a longer time.\n\n🚨 P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) 🚨\n\n## [](#12-close-the-circle)12\\. Close The Circle\n\nFinally, Senior Devs understand how karma works. They know that no matter how hard they work, or how smart they are, dozens of people helped them on their way to the top. \n\nThis doesn’t take away their merit but acknowledges other people as well. \n\nSo they close the circle. \n\nThey help other developers out. And they do it without expectations. \n\nNot because it might get you a promotion. Or status, or admiration. They do it because it is the right thing to do. \n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--JLteCl_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urp75psyn2lz8oah3cq7.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--JLteCl_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urp75psyn2lz8oah3cq7.png)  \nEven Kobe Bryant found the time to mentor young kids and get them into basketball. You can also find the time to help a fresh developer out.\n\nHelping someone who is just starting out will give you back part of the spark. The passion and curiosity that a beginner feels when they see things for the first time is so contagious.\n\nAnother thing you can turn into a daily habit! \n\nOkay, this is it. Put in place these 12 traits and you will fast-track your growth to a Senior level and beyond. \n\nMoving forward, here are 2 things I want you to do:   \n**1\\. What are some traits you’ve seen in Senior Developers that you think we should add to the list? Comment below, and I will try to answer all your comments!**\n\n**2\\. If you are an ambitious developer trying to level up and you are searching for a community of like-minded people, [click here to join our free community for JavaScript developers looking to fast-track to Senior level](https://bit.ly/3GJuOjr).**\n\n**Author**: [Dragos Nedelcu](https://dev.to/dragosnedelcu)",
    "shortDescription": "The fastest way to get to the top in any field, whether it is arts, sports or software development is...",
    "htmlMeta": "<meta property=\"og:title\" content=\"12 Senior Developer Traits Juniors Need To Master 🔥\">\n<meta property=\"og:description\" content=\"The fastest way to get to the top in any field, whether it is arts, sports or software development is...\">\n<meta name=\"keywords\" content=\"javascript, career, productivity, react, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gsqL7P6w--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4ajwny1h3upzbd4y711.jpeg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "12-Senior-Developer-Traits-Juniors-Need-To-Master",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4ajwny1h3upzbd4y711.jpeg"
  },
  {
    "title": "Design Patterns in JavaScript: A Comprehensive Guide",
    "url": "https://dev.to/topefasasi/js-design-patterns-a-comprehensive-guide-h3m",
    "tags": [
      "javascript",
      "programming",
      "frontend",
      "webdev"
    ],
    "published_at": 1703524998000,
    "markdownContent": "JavaScript, with its widespread adoption and versatility, has become a cornerstone of modern web development. As you delve deeper into JavaScript development, understanding and utilizing patterns becomes crucial. In this article, we will embark on a journey to demystify JavaScript patterns and explore how they can enhance your coding practices.\n\n## [](#prerequisite)Prerequisite\n\nTo understand the concepts and techniques discussed in this article, you are expected to have an understanding of the fundamentals of JavaScript. Familiarity with concepts like variables, functions, data types, object-oriented programming, etc. is essential.\n\nBefore we move on, let's take a moment to understand the importance of JavaScript as a programming language.\n\n### [](#javascript-as-a-programming-language)JavaScript as a programming language\n\nJavaScript, often referred to as the \"language of the web,\" is a dynamic, high-level programming language. It is primarily used for client-side scripting in web browsers, but it has also gained traction on the server-side with the advent of Node.js. JavaScript's key features include its ability to manipulate the DOM, handle events, provide interactivity, etc. to web pages.\n\nThat being said, let's briefly discuss the importance and purpose of Patterns in JavaScript.\n\n### [](#importance-of-patterns-in-javascript-development)Importance of patterns in JavaScript development\n\nPatterns in JavaScript serve as proven solutions to recurring problems encountered during software development. They provide structure, improve code organization, enhance maintainability, and promote reusability. By understanding and applying patterns, developers can write cleaner, more efficient code and effectively tackle complex challenges.\n\n### [](#purpose-of-understanding-javascript-patterns)Purpose of understanding JavaScript patterns\n\nUnderstanding JavaScript patterns goes beyond memorizing syntax or following best practices. It empowers developers to think critically about software design, choose appropriate solutions, and build scalable applications. By mastering JavaScript patterns, you gain valuable insights into the language and its ecosystem, enabling you to write robust and maintainable code.\n\nNow that we know the importance and purpose of JavaScript Patterns, let's delve into the fundamentals of JS Design Patterns.\n\n## [](#the-fundamentals-of-design-patterns)The Fundamentals of Design Patterns\n\nIn this section, we lay the groundwork for understanding design patterns in the context of JavaScript development.\n\n### [](#definition-and-characteristics-of-design-patterns)Definition and characteristics of design patterns\n\nDesign patterns are reusable templates that encapsulate best practices for solving recurring software design problems. They offer a structured approach to designing software systems and promote modular, flexible, and maintainable code. Common characteristics of design patterns include their purpose, structure, participants, and collaborations.\n\n### [](#types-of-design-patterns)Types of design patterns\n\nDesign patterns can be categorized into three main types:\n\n*   Creational\n    \n*   Structural\n    \n*   Behavioral\n    \n\nUnderstanding these categories helps identify the appropriate pattern for a given problem.\n\n*   **Creational Patterns**\n\nCreational patterns focus on object creation mechanisms, providing ways to instantiate objects in a flexible and controlled manner. Some commonly used creational patterns in JavaScript include:\n\n*   Singleton\n    \n*   Factory\n    \n*   Constructor\n    \n*   Prototype\n    \n*   Builder\n    \n*   Module\n    \n\n**Singleton Pattern**\n\nThe Singleton Pattern ensures that a class has only one instance and provides a global point of access to it. This pattern is useful when you want to limit the number of instances of a class and ensure a single shared instance is accessible throughout the application.  \n\n```javascript\n// Implementation example of the Singleton Pattern\nclass Singleton {\n  constructor() {\n    if (!Singleton.instance) {\n      // Initialize the instance\n      Singleton.instance = this;\n    }\n    return Singleton.instance;\n  }\n}\n\nconst instance1 = new Singleton();\nconst instance2 = new Singleton();\n\nconsole.log(instance1 === instance2); // Output: true\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the Singleton class has a constructor that checks if an instance of the class already exists. If an instance doesn't exist (`!Singleton.instance` condition), it initializes the instance by assigning this to `Singleton.instance`. This ensures that subsequent calls to the constructor will return the same instance.\n\nWhen instance1 and instance2 are created using the new Singleton() syntax, both variables refer to the same instance of the Singleton class. Hence, when comparing instance1 === instance2 using the strict equality operator, it evaluates to true.\n\n**Factory Pattern**\n\nThe Factory Pattern provides a way to create objects without specifying their concrete classes. It encapsulates the object creation logic in a separate factory method, allowing flexibility and decoupling between the creator and the created objects.  \n\n```javascript\n// Implementation example of the Factory Pattern\nclass Car {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n  }\n}\n\nclass CarFactory {\n  createCar(make, model) {\n    return new Car(make, model);\n  }\n}\n\nconst factory = new CarFactory();\nconst myCar = factory.createCar(\"Tope\", \"Model 1\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, a `CarFactory` instance is created using `new CarFactory()`, and then the `createCar` method is invoked on the factory with the arguments \"Tope\" and \"Model 1\". This creates a new Car object with the make \"Tope\" and model \"Model 1\", which is assigned to the `myCar` variable.\n\n**Constructor Pattern**\n\nThe Constructor Pattern creates objects from a constructor function using the `new` keyword. It allows you to define and initialize object properties within the constructor function.  \n\n```javascript\n// Implementation example of the Constructor Pattern\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nconst tope = new Person(\"Tope\", 24);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe above code defines a constructor function called Person that takes two parameters: name and age. Inside the function, the name and age values are assigned to the respective properties of the newly created object using the this keyword.\n\nLater, a new instance of the Person object is created by invoking the Person function with the arguments \"Tope\" and 24. This creates a new object with the name property set to \"Tope\" and the age property set to 24, which is then assigned to the variable tope. The output of this code is that Tope holds an object representing a person with the name \"Tope\" and the age of 24.\n\n**Prototype Pattern**\n\nThe Prototype pattern in JavaScript focuses on creating objects by cloning or extending existing objects as prototypes. It allows us to create new instances without explicitly defining their classes. In this pattern, objects act as prototypes for creating new objects, enabling inheritance and the sharing of properties and methods among multiple objects.  \n\n```javascript\n// Prototype object\nconst carPrototype = {\n  wheels: 4,\n  startEngine() {\n    console.log(\"Engine started.\");\n  },\n  stopEngine() {\n    console.log(\"Engine stopped.\");\n  }\n};\n\n// Create new car instance using the prototype\nconst car1 = Object.create(carPrototype);\ncar1.make = \"Toyota\";\ncar1.model = \"Camry\";\n\n// Create another car instance using the same prototype\nconst car2 = Object.create(carPrototype);\ncar2.make = \"Honda\";\ncar2.model = \"Accord\";\n\ncar1.startEngine(); // Output: \"Engine started.\"\ncar2.stopEngine(); // Output: \"Engine stopped.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, car instances car1 and car2 are created using a prototype object carPrototype. car1 has the make \"Toyota\" and model \"Camry\", while car2 has the make \"Honda\" and model \"Accord\". When `car1.startEngine()` is called, it outputs \"Engine started.\", and when `car2.stopEngine()` is called, it outputs \"Engine stopped.\". This demonstrates the utilization of a prototype object to share properties and methods among multiple instances.\n\n**Builder Pattern**\n\nIn the Builder pattern, a builder class or object is responsible for constructing the final object. It provides a set of methods to configure and set the properties of the object being built. The construction process typically involves invoking these methods in a specific order to gradually build the object.  \n\n```javascript\nclass CarBuilder {\n  constructor() {\n    this.car = new Car();\n  }\n\n  setMake(make) {\n    this.car.make = make;\n    return this;\n  }\n\n  setModel(model) {\n    this.car.model = model;\n    return this;\n  }\n\n  setEngine(engine) {\n    this.car.engine = engine;\n    return this;\n  }\n\n  setWheels(wheels) {\n    this.car.wheels = wheels;\n    return this;\n  }\n\n  build() {\n    return this.car;\n  }\n}\n\nclass Car {\n  constructor() {\n    this.make = \"\";\n    this.model = \"\";\n    this.engine = \"\";\n    this.wheels = 0;\n  }\n\n  displayInfo() {\n    console.log(`Make: ${this.make}, Model: ${this.model}, Engine: ${this.engine}, Wheels: ${this.wheels}`);\n  }\n}\n\n// Usage\nconst carBuilder = new CarBuilder();\nconst car = carBuilder.setMake(\"Toyota\").setModel(\"Camry\").setEngine(\"V6\").setWheels(4).build();\ncar.displayInfo(); // Output: Make: Toyota, Model: Camry, Engine: V6, Wheels: 4\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `CarBuilder` class allows for the construction of Car objects with different properties. By calling `setMake`, `setModel`, `setEngine`, `setWheels` methods, the properties of the Car object are set. The build method finalizes the construction and returns the fully built Car object. The Car class represents a car and includes a `displayInfo` method to log its details. By creating a `carBuilder` instance and chaining the property-setting methods, a car object is constructed with specific make, model, engine, and wheel values. Invoking `car.displayInfo()` displays the car's information.\n\n**Module Pattern**\n\nThe Module Pattern encapsulates related methods and properties into a single module, providing a clean way to organize and protect the code. It allows for private and public members, enabling information hiding and preventing global namespace pollution.  \n\n```javascript\nconst MyModule = (function() {\n  // Private members\n  let privateVariable = \"I am private\";\n\n  function privateMethod() {\n    console.log(\"This is a private method\");\n  }\n\n  // Public members\n  return {\n    publicVariable: \"I am public\",\n\n    publicMethod() {\n      console.log(\"This is a public method\");\n      // Accessing private members within the module\n      console.log(privateVariable);\n      privateMethod();\n    }\n  };\n})();\n\n// Usage\nconsole.log(MyModule.publicVariable); // Output: \"I am public\"\nMyModule.publicMethod(); // Output: \"This is a public method\" \"I am private\" \"This is a private method\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the code uses an immediately invoked function expression [(IIFE)](https://www.udacity.com/blog/2023/03/immediately-invoked-function-expressions-iife-in-javascript.html#:~:text=An%20immediately%20invoked%20function%20expression,the%20code%20that%20we%20write.) to encapsulate private and public members. The module has private variables and methods, as well as public variables and methods. When accessed, the public members provide the expected output. This pattern allows for controlled access to encapsulated private members while exposing selected public members.\n\n*   **Structural patterns**\n\nStructural patterns focus on organizing and composing objects to form larger structures. They facilitate the composition of objects, defining relationships between them and providing flexible ways to manipulate their structure. Some commonly used structural patterns in JavaScript include:\n\n*   Decorator Pattern\n    \n*   Facade Pattern\n    \n*   Adapter\n    \n*   Bridge\n    \n*   Composite\n    \n\n**Decorator Pattern**\n\nThe Decorator Pattern allows you to add behavior or modify the existing behavior of an object dynamically. It enhances the functionality of an object by wrapping it with one or more decorators without modifying its structure.  \n\n```javascript\n// Implementation example of the Decorator Pattern\nclass Coffee {\n  getCost() {\n    return 1;\n  }\n}\n\nclass CoffeeDecorator {\n  constructor(coffee) {\n    this.coffee = coffee;\n  }\n\n  getCost() {\n    return this.coffee.getCost() + 0.5;\n  }\n}\n\nconst myCoffee = new Coffee();\nconst coffeeWithMilk = new CoffeeDecorator(myCoffee);\nconsole.log(coffeeWithMilk.getCost()); // Output: 1.5\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `CoffeeDecorator` class wraps a base `Coffee` object and adds additional functionality. It has a `getCost` method that calculates the total cost by combining the cost of the base coffee with an additional cost of 0.5.\n\nIn the usage section, a `myCoffee` instance of the `Coffee` class is created. Then, a `coffeeWithMilk` instance of the `CoffeeDecorator` class is instantiated, passing `myCoffee` as an argument. When `coffeeWithMilk.getCost()` is called, it returns the total cost of the coffee with the added cost from the decorator, resulting in an output of 1.5. This example illustrates how the decorator pattern can extend the functionality of an object by dynamically adding or modifying its properties or methods.\n\n**Facade Pattern**\n\nThe Facade Pattern provides a simplified interface to a complex subsystem, acting as a front-facing interface that hides the underlying implementation details. It offers a convenient way to interact with a complex system by providing a high-level interface.  \n\n```javascript\n// Implementation example of the Facade Pattern\nclass SubsystemA {\n  operationA() {\n    console.log(\"Subsystem A operation.\");\n  }\n}\n\nclass SubsystemB {\n  operationB() {\n    console.log(\"Subsystem B operation.\");\n  }\n}\n\nclass Facade {\n  constructor() {\n    this.subsystemA = new SubsystemA();\n    this.subsystemB = new SubsystemB();\n  }\n\n  operation() {\n    this.subsystemA.operationA();\n    this.subsystemB.operationB();\n  }\n}\n\nconst facade = new Facade();\nfacade.operation(); // Output: \"Subsystem A operation.\" \"Subsystem B operation.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the code consists of three classes: `SubsystemA`, `SubsystemB`, and `Facade`. The `SubsystemA` and `SubsystemB` classes represent independent subsystems and have their respective `operationA` and `operationB` methods. The `Facade` class serves as a simplified interface that aggregates the functionality of the subsystems.\n\nIn the usage section, a `facade` instance of the `Facade` class is created. Invoking `facade.operation()` triggers the execution of `operationA` from `SubsystemA` and `operationB` from `SubsystemB`. As a result, the output displays \"Subsystem A operation.\" followed by \"Subsystem B operation.\" This demonstrates how the Facade pattern provides a unified and simplified interface to interact with complex subsystems, abstracting their complexities and making them easier to use.\n\n**Adapter Pattern**\n\nThe Adapter pattern is a structural design pattern that allows objects with incompatible interfaces to collaborate by acting as a bridge between them. It provides a way to convert the interface of one object into another interface that clients expect.  \n\n```javascript\n// Implementation \nclass LegacyPrinter {\n  printLegacy(text) {\n    console.log(`Legacy Printing: ${text}`);\n  }\n}\n\n// Target interface\nclass Printer {\n  print(text) {}\n}\n\n// Adapter\nclass PrinterAdapter extends Printer {\n  constructor() {\n    super();\n    this.legacyPrinter = new LegacyPrinter();\n  }\n\n  print(text) {\n    this.legacyPrinter.printLegacy(text);\n  }\n}\n\n// Usage\nconst printer = new PrinterAdapter();\nprinter.print(\"Hello, World!\"); // Output: \"Legacy Printing: Hello, World!\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this code, the Adapter pattern is used to bridge the gap between the `LegacyPrinter` class and a desired `Printer` interface. The `PrinterAdapter` extends the `Printer` class and internally utilizes the `LegacyPrinter` to adapt the `print` method. When `printer.print(\"Hello, World!\")` is called, it effectively triggers the legacy printing functionality with the output \"Legacy Printing: Hello, World!\". This shows how the Adapter pattern enables the integration of incompatible components by providing a standardized interface.\n\n**Bridge Pattern**\n\nThe Bridge pattern is a structural design pattern that separates the abstraction and implementation of a system, allowing it to evolve independently. It introduces a bridge between the two by using an interface or abstract class. Here's an example code snippet to illustrate the Bridge pattern:  \n\n```javascript\n// Example \nclass Shape {\n  constructor(color) {\n    this.color = color;\n  }\n\n  draw() {}\n}\n\n// Concrete Abstractions\nclass Circle extends Shape {\n  draw() {\n    console.log(`Drawing a ${this.color} circle`);\n  }\n}\n\nclass Square extends Shape {\n  draw() {\n    console.log(`Drawing a ${this.color} square`);\n  }\n}\n\n// Implementor\nclass Color {\n  getColor() {}\n}\n\n// Concrete Implementors\nclass RedColor extends Color {\n  getColor() {\n    return \"red\";\n  }\n}\n\nclass BlueColor extends Color {\n  getColor() {\n    return \"blue\";\n  }\n}\n\n// Usage\nconst redCircle = new Circle(new RedColor());\nredCircle.draw(); // Output: \"Drawing a red circle\"\n\nconst blueSquare = new Square(new BlueColor());\nblueSquare.draw(); // Output: \"Drawing a blue square\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we have the Abstraction represented by the Shape class, which has a color property and a draw method. The Concrete Abstractions, Circle and Square, inherit from the Shape class and implement their specific draw behavior. The `Implementor` is represented by the Color class, which declares the `getColor` method. The Concrete `Implementors`, `RedColor`, and `BlueColor`, inherit from the Color class and provide their respective color implementations.\n\nIn the usage section, we create instances of the Concrete Abstractions, passing the appropriate Concrete Implementor objects. This allows the Abstraction to delegate the color-related functionality to the Implementor. When we invoke the draw method, it accesses the color from the Implementor and performs the drawing operation accordingly.\n\n**Composite Pattern**\n\nThe Composite pattern is a structural design pattern that allows you to treat individual objects and compositions of objects uniformly. It enables you to create hierarchical structures where each element can be treated as a single object or a collection of objects. The pattern uses a common interface to represent both individual objects (leaf nodes) and compositions (composite nodes), allowing clients to interact with them uniformly.  \n\n```javascript\n// Implementation \nclass Employee {\n  constructor(name) {\n    this.name = name;\n  }\n\n  print() {\n    console.log(`Employee: ${this.name}`);\n  }\n}\n\n// Composite\nclass Manager extends Employee {\n  constructor(name) {\n    super(name);\n    this.employees = [];\n  }\n\n  add(employee) {\n    this.employees.push(employee);\n  }\n\n  remove(employee) {\n    const index = this.employees.indexOf(employee);\n    if (index !== -1) {\n      this.employees.splice(index, 1);\n    }\n  }\n\n  print() {\n    console.log(`Manager: ${this.name}`);\n    for (const employee of this.employees) {\n      employee.print();\n    }\n  }\n}\n\n// Usage\nconst john = new Employee(\"John Doe\");\nconst jane = new Employee(\"Jane Smith\");\n\nconst mary = new Manager(\"Mary Johnson\");\nmary.add(john);\nmary.add(jane);\n\nconst peter = new Employee(\"Peter Brown\");\n\nconst bob = new Manager(\"Bob Williams\");\nbob.add(peter);\nbob.add(mary);\n\nbob.print();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we have the Component class Employee, which represents individual employees. The Composite class Manager extends the Employee class and can contain a collection of employees. It provides methods to add and remove employees from the collection and overrides the print method to display the manager's name and the employees under them.\n\nIn the usage section, we create a composite hierarchy where Manager objects can contain both individual employees (Employee) and other managers (Manager). We add employees to managers, constructing a hierarchical structure. Finally, we invoke the print method on the top-level manager, which recursively prints the hierarchy, showing the managers and their respective employees.\n\n*   **Behavioral patterns**\n\nBehavioral patterns focus on the interaction between objects and the distribution of responsibilities. They provide solutions for communication, coordination, and collaboration among objects. The following are types of behavioral patterns.\n\n*   Observer Pattern\n    \n*   Strategy Pattern\n    \n*   Command Pattern\n    \n*   Iterator Pattern\n    \n*   Mediator Pattern\n    \n\n**Observer Pattern**\n\nThe Observer Pattern establishes a one-to-many relationship between objects, where multiple observers are notified of changes in the subject's state. It enables loose coupling between objects and promotes event-driven communication.  \n\n```javascript\n// Implementation example of the Observer Pattern\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n\n  addObserver(observer) {\n    this.observers.push(observer);\n  }\n\n  removeObserver(observer) {\n    const index = this.observers.indexOf(observer);\n    if (index !== -1) {\n      this.observers.splice(index, 1);\n    }\n  }\n\n  notifyObservers() {\n    this.observers.forEach((observer) => observer.update());\n  }\n}\n\nclass Observer {\n  update() {\n    console.log(\"Observer is notified of changes.\");\n  }\n}\n\nconst subject = new Subject();\nconst observer1 = new Observer();\nconst observer2 = new Observer();\n\nsubject.addObserver(observer1);\nsubject.addObserver(observer2);\nsubject.notifyObservers(); // Output: \"Observer is notified of changes.\" \"Observer is notified of changes.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `Subject` class represents a subject that maintains a list of observers and provides methods to add, remove, and notify observers. The `Observer` class defines the behavior of an observer with its `update` method. In the usage section, a `subject` instance of the `Subject` class is created. Two `observer` instances are also created and added to the subject using the `addObserver` method.\n\nWhen `subject.notifyObservers()` is invoked, it triggers the `update` method for each observer. As a result, the output \"Observer is notified of changes.\" is logged twice, indicating that the observers have been notified of the changes in the subject.\n\n**Strategy Pattern**\n\nThe Strategy Pattern allows you to encapsulate interchangeable algorithms within separate strategy objects. It enables dynamic selection of algorithms at runtime, promoting flexibility and extensibility.  \n\n```javascript\n// Implementation example of the Strategy Pattern\nclass Context {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n\n  executeStrategy() {\n    this.strategy.execute();\n  }\n}\n\nclass ConcreteStrategyA {\n  execute() {\n    console.log(\"Strategy A is executed.\");\n  }\n}\n\nclass ConcreteStrategyB {\n  execute() {\n    console.log(\"Strategy B is executed.\");\n  }\n}\n\nconst contextA = new Context(new ConcreteStrategyA());\ncontextA.executeStrategy(); // Output: \"Strategy A is executed.\"\n\nconst contextB = new Context(new ConcreteStrategyB());\ncontextB.executeStrategy(); // Output: \"Strategy B is executed.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `Context` class represents a context that encapsulates different strategies, with a `strategy` property and an `executeStrategy` method. There are two concrete strategy classes, `ConcreteStrategyA` and `ConcreteStrategyB`, each with its own `execute` method that outputs a specific message.\n\nIn the usage section, a `contextA` instance of the `Context` class is created with `ConcreteStrategyA` as the strategy. Calling `contextA.executeStrategy()` invokes the `execute` method of `ConcreteStrategyA`, resulting in the output \"Strategy A is executed.\" Similarly, a `contextB` instance is created with `ConcreteStrategyB` as the strategy, and invoking `contextB.executeStrategy()` triggers the `execute` method of `ConcreteStrategyB`, resulting in the output \"Strategy B is executed.\" This demonstrates how the Strategy pattern allows for dynamic selection of behavior at runtime by encapsulating it in different strategy objects.\n\n**Command Pattern**\n\nThe Command Pattern encapsulates a request as an object, allowing you to parameterize clients with different requests, queue or log requests, and support undo operations. It decouples the sender of a request from the receiver, promoting loose coupling and flexibility.  \n\n```javascript\n// Implementation \nclass Receiver {\n  execute() {\n    console.log(\"Receiver executes the command.\");\n  }\n}\n\nclass Command {\n  constructor(receiver) {\n    this.receiver = receiver;\n  }\n\n  execute() {\n    this.receiver.execute();\n  }\n}\n\nclass Invoker {\n  setCommand(command) {\n    this.command = command;\n  }\n\n  executeCommand() {\n    this.command.execute();\n  }\n}\n\nconst receiver = new Receiver();\nconst command = new Command(receiver);\nconst invoker = new Invoker();\n\ninvoker.setCommand(command);\ninvoker.executeCommand(); // Output: \"Receiver executes the command.\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the `Receiver` class executes the command when called, and the `Command` class encapsulates a command and delegates execution to the receiver. The `Invoker` class sets and executes a command. In the usage section, a receiver, command, and invoker are created. The command is set for the invoker, and invoking `invoker.executeCommand()` executes the command, resulting in the output \"Receiver executes the command.\"\n\n**Iterator Pattern**\n\nThe Iterator pattern is a behavioral design pattern that provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. It allows you to traverse a collection of objects in a uniform manner, regardless of the specific implementation of the collection. The pattern separates the traversal logic from the collection, promoting a clean and flexible approach to iterating over elements.  \n\n```javascript\n// Implementation \nclass Collection {\n  constructor() {\n    this.items = [];\n  }\n\n  addItem(item) {\n    this.items.push(item);\n  }\n\n  createIterator() {}\n}\n\n// Concrete Aggregate\nclass ConcreteCollection extends Collection {\n  createIterator() {\n    return new ConcreteIterator(this);\n  }\n}\n\n// Iterator\nclass Iterator {\n  constructor(collection) {\n    this.collection = collection;\n    this.index = 0;\n  }\n\n  hasNext() {}\n\n  next() {}\n}\n\n// Concrete Iterator\nclass ConcreteIterator extends Iterator {\n  hasNext() {\n    return this.index < this.collection.items.length;\n  }\n\n  next() {\n    return this.collection.items[this.index++];\n  }\n}\n\n// Usage\nconst collection = new ConcreteCollection();\ncollection.addItem(\"Item 1\");\ncollection.addItem(\"Item 2\");\ncollection.addItem(\"Item 3\");\n\nconst iterator = collection.createIterator();\nwhile (iterator.hasNext()) {\n  console.log(iterator.next());\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this code, we have the Aggregate represented by the Collection class, which defines the interface for creating an iterator object. The Concrete Aggregate, `ConcreteCollection`, extends the Collection class and provides a concrete implementation of the iterator creation.\n\nThe Iterator is represented by the Iterator class, which defines the interface for accessing and traversing elements. The Concrete Iterator, `ConcreteIterator`, extends the Iterator class and provides a concrete implementation of the iteration logic. In the usage section, we create an instance of the Concrete Aggregate, `ConcreteCollection`, and add items to it. We then create an iterator using the `createIterator` method. By using the iterator's `hasNext` and next methods, we iterate over the collection and print each item.\n\n**Mediator Pattern**\n\nThe Mediator pattern simplifies object communication by introducing a mediator object that serves as a central hub for coordinating interactions between objects. It encapsulates the communication logic and provides methods for objects to register, send, and receive messages.  \n\n```javascript\n// Implementation \nclass Mediator {\n  constructor() {\n    this.colleague1 = null;\n    this.colleague2 = null;\n  }\n\n  setColleague1(colleague) {\n    this.colleague1 = colleague;\n  }\n\n  setColleague2(colleague) {\n    this.colleague2 = colleague;\n  }\n\n  notifyColleague1(message) {\n    this.colleague1.receive(message);\n  }\n\n  notifyColleague2(message) {\n    this.colleague2.receive(message);\n  }\n}\n\nclass Colleague {\n  constructor(mediator) {\n    this.mediator = mediator;\n  }\n\n  send(message) {\n    // Send a message to the mediator\n    this.mediator.notifyColleague2(message);\n  }\n\n  receive(message) {\n    console.log(`Received message: ${message}`);\n  }\n}\n\n// Usage\nconst mediator = new Mediator();\n\nconst colleague1 = new Colleague(mediator);\nconst colleague2 = new Colleague(mediator);\n\nmediator.setColleague1(colleague1);\nmediator.setColleague2(colleague2);\n\ncolleague1.send(\"Hello Colleague 2!\"); // Output: \"Received message: Hello Colleague 2!\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we have a Mediator class that acts as an intermediary between two Colleague objects. The Mediator holds references to the colleagues and provides methods to send messages between them.\n\nEach Colleague object has a reference to the mediator and can send messages by notifying the mediator. The mediator, in turn, relays the messages to the appropriate colleagues. In this case, Colleague 1 sends a message to Colleague 2, and the latter receives and logs the message.\n\n### [](#conclusion)Conclusion\n\nWe have explored a range of essential design patterns in JavaScript, encompassing creational, structural, and behavioral patterns. The creational patterns allow us to create objects in a flexible and efficient manner. Structural patterns aid in organ flexibility and scalability. Behavioral patterns enable effective communication and interaction between JavaScript objects. By leveraging these design patterns, JavaScript developers can improve code reusability, maintainability, and overall system performance. Armed with this knowledge, we can architect robust and efficient JavaScript applications that meet the demands of modern software development.\n\n**Author**: [Tope Fasasi](https://dev.to/topefasasi)",
    "shortDescription": "JavaScript, with its widespread adoption and versatility, has become a cornerstone of modern web...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Design Patterns in JavaScript: A Comprehensive Guide\">\n<meta property=\"og:description\" content=\"JavaScript, with its widespread adoption and versatility, has become a cornerstone of modern web...\">\n<meta name=\"keywords\" content=\"javascript, programming, frontend, webdev, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qOfN9i-Z--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0e7ebslr9av7tc6fedu.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Design-Patterns-in-JavaScript:-A-Comprehensive-Guide",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0e7ebslr9av7tc6fedu.png"
  },
  {
    "title": "📚 8 repos used by the top 1% of React devs 🏆",
    "url": "https://dev.to/quine/8-repos-used-by-the-top-1-of-react-devs-2758",
    "tags": [
      "webdev",
      "javascript",
      "programming",
      "react"
    ],
    "published_at": 1703157344000,
    "markdownContent": "Hi there 👋\n\nToday, let's look into 8 React repos that **the top 1% of developers use** (and those you have likely never heard of).\n\nReady?\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--FEiYJkW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yehweju0i54ov2n6bwt.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--FEiYJkW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yehweju0i54ov2n6bwt.gif)\n\n* * *\n\n# [](#how-do-we-find-the-repos-used-by-the-top-1-of-devs)How do we find the repos used by the top 1% of devs? 🔦\n\nOur story behind how we find what the best developers use is anchored in a lot of data digging and some non-trivial modelling.\n\nNow, at Quine, we rank developers based on their **[DevRank](https://docs.quine.sh/for-developers/devrank)**.\n\nIn simple terms, DevRank uses [Google’s PageRank algorithm](https://en.wikipedia.org/wiki/PageRank) to measure how important a developer is in open source based on their contributions to open source repos.\n\nTo create this list, we looked at the repos that the top 1% have starred. 🌟\n\nThen, we calculated the likelihood that the top 1% of developers will star a repo compared to the likelihood that the bottom 50% won’t.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--1ln_DIwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miugcnqpataix1fsq6hb.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--1ln_DIwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miugcnqpataix1fsq6hb.png)\n\nLastly, after a little hand-picking, we found the 8 repos below. 👇\n\nThese repos will be **particularly useful when you want to build cool web apps.**\n\nIf you are interested in working on building small apps, and you enjoy the applied AI side, we recommend you check out Creator Quests, an **open-source challenge that rewards developers for creating cool GenerativeAI apps** with ChatGPT, Claude, Gemini and more. 🙃 💰\n\nThe latest Creator Quest challenges you to build developer tools using Generative AI. To participate, simply sign up to [Quine](https://quine.sh/?utm_source=devto&utm_campaign=best_react_repos) and head to _Quests_.\n\n**The current prize pool is $2028**, and it will increase as more participants join! Click on the image below and give it a try! ⬇️\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--3NK9neq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akiuhk62zctvf3b9gilx.png)](https://quine.sh/?utm_source=devto&utm_campaign=best_react_repos)\n\n* * *\n\n# [](#%F0%9F%AA%AE-jsxstylejsxstyle)🪮 jsxstyle/jsxstyle\n\n**No more JS to CSS jumping**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--OyPkXp16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h75mskqja5bcwst05e93.png)](https://github.com/jsxstyle/jsxstyle)\n\n**Why should you care?** In web development, with React or Preact, you must style your components (like buttons, menus, etc.). Traditionally, this is done using separate CSS files or complex styling systems, which can be time-consuming and cumbersome to manage. jsxstyle simplifies this process by letting you define styles directly within your JavaScript code, alongside the components. In other words, this means you would no longer need to jump between JS and CSS files.\n\n**Set up**: `npm install jsxstyle`  \n**Example use case**: Your code can look like this. 👇  \n\n```javascript\n<Row padding={15}>\n  <Block\n    backgroundColor=\"#EEE\"\n    boxShadow=\"inset 0 0 0 1px rgba(0,0,0,0.15)\"\n    borderRadius={5}\n    height={64}\n    width={64}\n    marginRight={15}\n    backgroundSize=\"contain\"\n    backgroundImage=\"url(http://graph.facebook.com/justinbieber/picture?type=large)\"\n  />\n  <Col fontFamily=\"sans-serif\" fontSize={16} lineHeight=\"24px\">\n    <Block fontWeight={600}>Justin Bieber</Block>\n    <Block fontStyle=\"italic\">Canadian</Block>\n  </Col>\n</Row>\n\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/jsxstyle/jsxstyle](https://github.com/jsxstyle/jsxstyle)\n\n* * *\n\n# [](#alangpiercesucrase)💨 alangpierce/sucrase\n\n**A super-fast alternative to Babel**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--hPW7eYzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk9ceq6mlw8ya0f2icb8.png)](https://github.com/alangpierce/sucrase)\n\n**Why should you care?** Babel is a widely used tool in web development that converts modern JavaScript code into a format that older browsers can understand. Sucrase is a faster alternative to Babel.\n\n**Set up**:  \n\n```plaintext\nyarn add --dev sucrase  # Or npm install --save-dev sucrase\nnode -r sucrase/register main.ts\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Example use case**: Sucrase can be called from JS directly:  \n\n```javascript\n\nimport {transform} from \"sucrase\";\nconst compiledCode = transform(code, {transforms: [\"typescript\", \"imports\"]}).code;\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/alangpierce/sucrase](https://github.com/alangpierce/sucrase)\n\n* * *\n\n# [](#wooormrefractor)🎨 wooorm/refractor\n\n**I colour your web page code to make your life easier**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--1wGxg-zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzwpgi5t47o93kvcbtdq.png)](https://github.com/wooorm/refractor)\n\n**Why should you care?** Refractor is important because it allows you to add highlighting, which enhances readability to your project; especially when you add code snippets to a web application. It allows you to express code in more than 270 programming languages ​​and is especially useful in areas where traditional HTML-based highlighting ​​is not ideal, such as CLI forms.\n\n**Set up**: `npm install refractor`\n\n**Example use case**:  \n\n```javascript\n\nimport {refractor} from 'refractor'\n\nconst tree = refractor.highlight('\"use strict\";', 'js')\n\nconsole.log(tree)\n\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Yields**:  \n\n```plaintext\n{\n  type: 'root',\n  children: [\n    {\n      type: 'element',\n      tagName: 'span',\n      properties: {className: ['token', 'string']},\n      children: [{type: 'text', value: '\"use strict\"'}]\n    },\n    {\n      type: 'element',\n      tagName: 'span',\n      properties: {className: ['token', 'punctuation']},\n      children: [{type: 'text', value: ';'}]\n    }\n  ]\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/wooorm/refractor](https://github.com/wooorm/refractor)\n\n* * *\n\n# [](#transitivebullshitreactstatictweets)🐦 transitive-bullshit/react-static-tweets\n\n**Your best choice for adding Tweets on your website.**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--mCE95g2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lvul78znx84ph479fa1.png)](https://github.com/transitive-bullshit/react-static-tweets)\n\n**Why should you care?** Adding Tweets to your website is a cool feature you see on many landing pages. React Static Tweets is important because it provides a highly efficient way to embed tweets in your web projects, offering much faster load times and better performance compared to Twitter's standard embedding method.\n\n**Set up**:  \n\n```plaintext\nnpm install react-static-tweets static-tweets date-fns\n# or\nyarn add react-static-tweets static-tweets date-fns\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Example Use Case:**  \n\n```javascript\nimport React from 'react'\nimport { fetchTweetAst } from 'static-tweets'\nimport { Tweet } from 'react-static-tweets'\n\nconst tweetId = '1358199505280262150'\n\nexport const getStaticProps = async () => {\n  try {\n    const tweetAst = await fetchTweetAst(tweetId)\n\n    return {\n      props: {\n        tweetAst\n      },\n      revalidate: 10\n    }\n  } catch (err) {\n    console.error('error fetching tweet', err)\n\n    throw err\n  }\n}\n\nexport default function Example({ tweetAst }) {\n  return <Tweet ast={tweetAst} />\n}\n\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/transitive-bullshit/react-static-tweets](https://github.com/transitive-bullshit/react-static-tweets)\n\n* * *\n\n# [](#preactjspreactrendertostring)🖨️ preactjs/preact-render-to-string\n\n**Render your components in HTML**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--lycOtRfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7djwj6w7nqwfnifc43c.png)](https://github.com/preactjs/preact-render-to-string)\n\n**Why should you care?**  \n\"preact-render-to-string\" is a tool that helps websites load faster and display better in search engines. Websites built using JS frameworks like Preact take a while to display content because the browser must run JavaScript first. This repository does the heavy lifting on the server side by converting the components into ready-to-use HTML. So when someone visits the website, they will see the content immediately, even if the Internet is slow.\n\n**Set up**: `npm install preact-render-to-string`\n\n**Example use case:**  \n\n```javascript\n\nimport { render } from 'preact-render-to-string';\nimport { h, Component } from 'preact';\n/** @jsx h */\n\n// Classical components work\nclass Fox extends Component {\n    render({ name }) {\n        return <span class=\"fox\">{name}</span>;\n    }\n}\n\n// ... and so do pure functional components:\nconst Box = ({ type, children }) => (\n    <div class={`box box-${type}`}>{children}</div>\n);\n\nlet html = render(\n    <Box type=\"open\">\n        <Fox name=\"Finn\" />\n    </Box>\n);\n\nconsole.log(html);\n// <div class=\"box box-open\"><span class=\"fox\">Finn</span></div>\n\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/preactjs/preact-render-to-string](https://github.com/preactjs/preact-render-to-string)\n\n* * *\n\n# [](#bikeshavingcrank)🏆 bikeshaving/crank\n\n**The Just JavaScript Framework**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--aL7Z6Syd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8hp1ex1qh1sv6isksaq.png)](https://github.com/bikeshaving/crank)\n\n**Why should you care?** In a traditional web framework like React, web components are configured once and changed only when explicitly specified. They look like static images that need to be updated manually. Crank.js changes this by allowing the widget to update itself in response to new data, similar to a news ticker refreshing with new news. This is especially useful for web applications that manage real-time data such as live sports scores or product updates.\n\nThis repo would need more people migrating to this to gain traction, but it is still a very cool repo to keep an eye on. 👀\n\n**Set up**: `$ npm i @b9g/crank`\n\n**Example Use Case**:  \n\n```javascript\n\nimport {renderer} from \"@b9g/crank/dom\";\n\nfunction Greeting({name = \"World\"}) {\n  return (\n    <div>Hello {name}</div>\n  );\n}\n\nrenderer.render(<Greeting />, document.body);\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/bikeshaving/crank](https://github.com/bikeshaving/crank)\n\n* * *\n\n# [](#evoluhqevolu)🎯 evoluhq/evolu\n\n**I'm a local-first kind of person**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--blZVabp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k15m25pi0w9pk0g54zrn.png)](https://github.com/evoluhq/evolu)\n\n**Why should you care?** Web applications typically rely on storing user data on servers, which requires constant internet connectivity and raises concerns about privacy and data security. This server-based approach also means slower performance and potential data loss if the server goes down or a company ceases operations.\n\nEvolu introduces a \"local-first\" approach, where data is stored directly on the user's device. This means your applications can work offline, have faster access to data, and offer enhanced privacy and security. This will be useful if you’re building offline Chrome/browser apps.\n\n**Set up**: `npm install @evolu/react`\n\nTo start using it, you can find this great guide [here](https://www.evolu.dev/docs/quickstart).\n\n[https://github.com/evoluhq/evolu](https://github.com/evoluhq/evolu)\n\n* * *\n\n# [](#jestcommunitysnapshotdiff)📸 jest-community/snapshot-diff\n\n**I compare your components and highlight the difference**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--owfdgaVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy76comkwkqkt0d5qn8z.png)](https://github.com/jest-community/snapshot-diff)\n\n**Why should you care?** When testing React components or other JavaScript values, developers typically compare entire states or outputs. This means dealing with large chunks of data where finding specific changes is like searching for a needle in a haystack. Snapshot-diff is a focused comparison tool that allows you to take two different states of a component (or any two JavaScript values) and directly compare them, highlighting only the differences.\n\nThis is especially helpful in testing React components, as it pinpoints exactly what changed between two states, making it much easier to identify and understand the impact of your code changes.\n\n**Set up**: `yarn add --dev snapshot-diff`\n\n**Example Use Case:** Default Jest Matcher  \n\n```javascript\n\nconst snapshotDiff = require('snapshot-diff');\n\ntest('snapshot difference between 2 strings', () => {\n  expect(snapshotDiff(a, b)).toMatchSnapshot();\n});\n\nconst React = require('react');\nconst Component = require('./Component');\n\ntest('snapshot difference between 2 React components state', () => {\n  expect(\n    snapshotDiff(<Component test=\"say\" />, <Component test=\"my name\" />)\n  ).toMatchSnapshot();\n});\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/jest-community/snapshot-diff](https://github.com/jest-community/snapshot-diff)\n\n* * *\n\n**I hope these discoveries are valuable to you and will help build a more robust React toolkit!⚒️**\n\nIf you want to leverage these tools today to earn rewards, we have just launched a challenge to build a developer tool using Generative AI.\n\nIf that's of interest, log into [Quine](https://quine.sh/?utm_source=devto&utm_campaign=best_react_repos) and discover Quests! 💰\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--cqGC-YVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5drisgbolxfnzfvtwzw.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--cqGC-YVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5drisgbolxfnzfvtwzw.gif)\n\nLastly, please **consider supporting these projects by starring them. ⭐️**\n\nPS: We are not affiliated with them. We just think that great projects deserve great recognition.\n\nSee you next week,\n\nYour Dev.to buddy 💚\n\nBap\n\n* * *\n\nIf you want to join the self-proclaimed \"coolest\" server in open source 😝, you should join our [discord server](https://discord.com/invite/ChAuP3SC5H/?utm_source=devto&utm_campaign=). We are here to help you on your journey in open source. 🫶\n\n[\n\n![quine image](https://res.cloudinary.com/practicaldev/image/fetch/s--FMdzWAj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--RPRzp5ys--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4224/9191d30a-cfa3-4f20-804a-ab1beeddec8e.gif)\n\n](/quine)\n\n## [Quine](/quine) Follow\n\n[For each open GitHub Issue, there’s a developer waiting to solve it 💘](/quine)\n\n**Author**: [Bap](https://dev.to/fernandezbaptiste)",
    "shortDescription": "Hi there 👋  Today, let's look into 8 React repos that the top 1% of developers use (and those you...",
    "htmlMeta": "<meta property=\"og:title\" content=\"📚 8 repos used by the top 1% of React devs 🏆\">\n<meta property=\"og:description\" content=\"Hi there 👋  Today, let's look into 8 React repos that the top 1% of developers use (and those you...\">\n<meta name=\"keywords\" content=\"webdev, javascript, programming, react, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zGpWnV6i--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4q8ij6q9u10kjgucufw.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "8-repos-used-by-the-top-1percent-of-React-devs",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4q8ij6q9u10kjgucufw.gif"
  },
  {
    "title": "I Build a GitHub Worth Estimate Generator",
    "url": "https://dev.to/random_ti/i-build-a-github-worth-estimate-generator-4jjd",
    "tags": [
      "webdev",
      "javascript",
      "programming",
      "github"
    ],
    "published_at": 1703790333000,
    "markdownContent": "**Hellooo Developers** 👋 Welcome to my another blog post .\n\nIn the fast-paced world of software development, GitHub has become the epicenter of collaboration, innovation, and code-sharing among developers worldwide.\n\nYesterday, i was scrolling on a twitter and i saw one tweet discussing about this **project idea** on making with nextjs and shadcnui.\n\n> And don't forget to Drop a \"💖🦄🔥🙌🤯\" .\n\nThe Project name is GitEstimate - A github worth estimate calculator. And i am **Inspired by** 👇\n\n// Detect dark theme var iframe = document.getElementById('tweet-1739187814569476232-167'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1739187814569476232&theme=dark\" }\n\n* * *\n\n## [](#gitestimate)[GitEstimate](https://gitestimate.vercel.app/)\n\n[![demo](https://res.cloudinary.com/practicaldev/image/fetch/s--8J3dzlCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnjq183icsnil4r6slfl.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--8J3dzlCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnjq183icsnil4r6slfl.gif)\n\n[Live Demo 🟢](https://gitestimate.vercel.app/)\n\nGitEstimate is an fun innovative project hosted at `https://gitestimate.vercel.app/`. Code by me [Md Taqui Imam](//mdtaquiimam.vercel.app), Just enter your **Github username** and it will fetch your data and calculate your estimated worth and you can **also download it** as JPEG and share it to others .\n\n**Download Result be like :**\n\n[![result](https://res.cloudinary.com/practicaldev/image/fetch/s--gkVkypHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7adkmgmjdp1q8prkyuep.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--gkVkypHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7adkmgmjdp1q8prkyuep.png)\n\n[Give a Star⭐](https://github.com/taqui-786/GitEstimate)\n\n* * *\n\n## [](#tech-stack-i-used-)Tech stack i used 👇 ?\n\n*   Nextjs 14\n*   Shadcn Ui\n*   Html-to-canvas\n*   github-contributions-canvas\n*   lodash\n*   cheerio\n*   typescript\n*   Zod\n*   Reach-hook-form.\n\n* * *\n\n## [](#how-gitestimate-works-)How GitEstimate Works 🤔?\n\nUpon visiting the GitEstimate website, users are prompted to enter their valid GitHub username. It fetch user **Total Contribuitions, Total Stars got on repositories and Followers** , and to generate an estimate of the GitHub profile's worth i created this function :  \n\n```javascript\n  function calculateGitHubWorth(\n    contributions: number,\n    followers: number,\n    stars: number\n  ) {\n    // You can adjust the weights as per your preference\n    const contributionWeight = 0.5;\n    const followerWeight = 0.1;\n    const starWeight = 0.3;\n\n    // Calculate the estimated worth using the formula\n    const estimatedWorth =\n      contributions * contributionWeight +\n      followers * followerWeight +\n      stars * starWeight;\n\n    return estimatedWorth.toFixed(1);\n  }\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n* * *\n\n## [](#what-is-devletter-)What is Devletter 📩 ?\n\nDevletter is a great weekly newsletter for all things tech.  \nYou'll get the latest coding news and insights to stay ahead of trends.\n\nDevletter is a perfect way to learn about **upcoming hackathons** and events in your area too.\n\nMake sure to **Join Devletter now** so you never miss out on amazing opportunities and discovery in the tech space.\n\n[Join Devletter 💌](https://devletter.vercel.app)\n\n* * *\n\n## [](#thats-it)That's it 😅\n\nThank you for reading till here, i hope you find this blog post interesting and helpful.\n\nSee you next week 👋\n\nHappy Coding 😊\n\n* * *\n\n[\n\n![random_ti image](https://res.cloudinary.com/practicaldev/image/fetch/s--C0fn9l5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--wmMoJNxk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1193992/1091549e-d581-4faf-81d9-e2e1f8e82ab1.png)\n\n](/random_ti)\n\n## [Random](/random_ti)Follow\n\n[I'm a self-taught Web developer who is always learning and creating cool Project stuffs.](/random_ti)\n\n  \n  \n[![github](https://res.cloudinary.com/practicaldev/image/fetch/s--X0Hgo7Mj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://img.shields.io/badge/GitHub-100000%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dwhite)](https://github.com/taqui-786)\n\n[![twitter](https://res.cloudinary.com/practicaldev/image/fetch/s--6ibmId_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://img.shields.io/badge/Twitter-1DA1F2%3Fstyle%3Dfor-the-badge%26logo%3Dtwitter%26logoColor%3Dwhite)](https://twitter.com/Taquiimam14)\n\n[![portfolio](https://res.cloudinary.com/practicaldev/image/fetch/s--Iv4Wuhxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://img.shields.io/badge/Portfolio-255E63%3Fstyle%3Dfor-the-badge%26logo%3DAbout.me%26logoColor%3Dwhite)](https://mdtaquiimam.vercel.app)\n\n[![buymeacoffee](https://res.cloudinary.com/practicaldev/image/fetch/s--MoWemOxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://img.shields.io/badge/Buy_Me_A_Coffee-FFDD00%3Fstyle%3Dfor-the-badge%26logo%3Dbuy-me-a-coffee%26logoColor%3Dblack)](https://www.buymeacoffee.com/taquiDevloper)\n\n**Author**: [Random](https://dev.to/random_ti)",
    "shortDescription": "Hellooo Developers 👋 Welcome to my another blog post .  In the fast-paced world of software...",
    "htmlMeta": "<meta property=\"og:title\" content=\"I Build a GitHub Worth Estimate Generator\">\n<meta property=\"og:description\" content=\"Hellooo Developers 👋 Welcome to my another blog post .  In the fast-paced world of software...\">\n<meta name=\"keywords\" content=\"webdev, javascript, programming, github, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4kdd90Oi--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v61c80mmgbaj0t4fol9r.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "I-Build-a-GitHub-Worth-Estimate-Generator",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v61c80mmgbaj0t4fol9r.gif"
  },
  {
    "title": "🚨 🚀 25 Reasons (You MUST Know!!) Why *Some* “Listicles” Are BAD for dev.to 🤯 👿 🚨",
    "url": "https://dev.to/best_codes/25-reasons-you-must-know-why-listicles-are-bad-for-devto-1hok",
    "tags": [
      "webdev",
      "sad",
      "help",
      "javascript"
    ],
    "published_at": 1702263201000,
    "markdownContent": "Yes, the title of this post is an example of something like one of the many so called “Listicles” that have been littering the dev.to feed. With their titles full of emoji and words like “you must know” or “essential for any developer”, they entice our natural human curiosity.\n\n## [](#important)Important!\n\n### [](#not-all-listicles-are-bad)Not all listicles are bad!\n\nFollow these guidelines to create a good one:\n\n*   Determine the purpose: Clearly define the purpose and objective of the listicle. What information or value are you trying to provide to the readers?\n    \n*   Select relevant emojis: Choose emojis that align with the content and contribute to the message you want to convey. Ensure that they are not overwhelming or distracting.\n    \n*   Provide meaningful content: Focus on creating informative and well-written text that provides value to the readers. The emojis should supplement the content rather than overshadow it.\n    \n*   Evaluate the overall impact: Before publishing, review the listicle to ensure that the use of emojis or potential clickbait text in the title enhances the reader's experience and supports the intended purpose of the article.\n    \n\nBy following these steps, you can create a listicle that effectively incorporates as many emojis and “you must know” text as you want while maintaining the quality and substance of the content.\n\n[![Clickbait on dev.to](https://res.cloudinary.com/practicaldev/image/fetch/s--4hKlX1XL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5tcsqtizqxzg10tvo1l.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--4hKlX1XL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5tcsqtizqxzg10tvo1l.png)\n\n[![More](https://res.cloudinary.com/practicaldev/image/fetch/s--O87514Ot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90n3gpjrhz13i0w17z5o.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--O87514Ot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90n3gpjrhz13i0w17z5o.png)\n\nEssentially, they are clickbait. These post appeal to something in human nature called “FOMO”.\n\n## [](#what-is-fomo)What is FOMO?\n\nFOMO stands for “Fear of Missing Out.” It is a phenomenon characterized by a feeling of anxiety or unease that comes from the belief that others might be having rewarding experiences or opportunities that one is not a part of. FOMO is commonly associated with social media and the constant stream of updates and activities shared by others.\n\n## [](#what-is-emoji-baiting)What is “Emoji Baiting”?\n\nAnother thing that these posts are exploiting is something called “emoji baiting”. This concept is only recently being explored. It involves manipulating people's emotions on social media platforms with emojis like 🤯, 🚨, 👿, and 🚀. Artificial Intelligence (AI) is an expert at this.\n\n**Why are these posts bad?**  \nBecause it is nearly impossible to find any good content!\n\nAs content creators, it's our duty to support the growth of our fellow developers in every way possible. In the comments below, let's discuss how we can accomplish this on platforms like DEV. I'd love to hear your perspective on this matter. How can we enhance the value of the DEV community and make it less overwhelming for all developers?  \nRemember, being an exceptional developer goes beyond having knowledge of every tool or resource available. It's about honing problem-solving abilities, fostering creativity, and embracing lifelong learning. Let's prioritize these fundamental skills, and the rest will naturally fall into place.\n\nAnd, as promised, here are the 🚀 🚨 25 Reasons That “Listicles” Are BAD 👿 for dev.to 🤯 🚨. As you read the listicle, consider how it reflects what it is saying (it is, after all, a listicle itself)  \n\nClick to Expand & View List\n\n1.  Shallow Content: Listicles and clickbait often prioritize brevity over depth, resulting in superficial coverage of topics.\n2.  Lack of Context: They provide limited context or background information, leaving readers with a fragmented understanding.\n3.  Oversimplification: Complex subjects may be oversimplified to fit within the list format, leading to misconceptions and misunderstandings.\n4.  Clickbait Titles: Sensational or misleading titles are used to attract clicks, compromising the integrity of the content.\n5.  Misleading Information: Listicles and clickbait may contain inaccurate or outdated information, leading readers astray.\n6.  Lack of Credibility: Some lack reliable sources or references, making it difficult to verify the accuracy of the information presented.\n7.  Content Repetition: Listicles on similar topics frequently have repetitive content, offering little value to readers seeking fresh insights.\n8.  Lack of Depth: Due to space constraints, listicles rarely delve into complex or nuanced aspects of a subject.\n9.  Discourages Critical Thinking: Listicles and clickbait offer spoon-fed information, discouraging readers from engaging in critical thinking and analysis.\n10.  Neglects Alternative Perspectives: They typically present a single viewpoint, excluding diverse or conflicting opinions.\n11.  Monetization Over Quality: Some prioritize generating revenue through ads rather than producing high-quality, informative content.\n12.  Unrealistic Expectations: Listicles and clickbait can create unrealistic expectations by making broad claims or promises without proper support.\n13.  Poorly Researched Content: Due to the rush to produce content quickly, some lack thorough research and fact-checking.\n14.  Lack of Originality: Many recycle content from other sources without adding any unique value or insights.\n15.  Oversaturation of Topics: Popular topics are often covered repeatedly, saturating the community with redundant content.\n16.  Neglects Long-Form Writing: Listicles and clickbait overshadow long-form articles, diminishing the importance of in-depth analysis.\n17.  Disincentivizes Learning: The bite-sized nature of listicles and clickbait can discourage readers from seeking comprehensive learning experiences.\n18.  Decreased Attention Span: Constant consumption of listicles and clickbait can contribute to shorter attention spans and decreased focus on detailed content.\n19.  Wasted Clicks: Listicles and clickbait may lure readers with enticing titles, only to provide shallow or unhelpful content.\n20.  Loss of Nuance: Complex topics lose nuance when reduced to a numbered list, oversimplifying important details.\n21.  Lack of Engagement: Listicles and clickbait regularly fail to generate meaningful discussions or community engagement due to their shallow nature.\n22.  Reduced Creativity: They may stifle creative expression and originality, as writers feel compelled to conform to the list format.\n23.  Diminished Writing Standards: The demand for quick listicles and clickbait can lower the overall quality and standards of writing within the community.\n24.  Perpetuates Online Skimming: Listicles and clickbait contribute to a culture of skimming rather than deep reading, affecting overall comprehension.\n25.  Devaluation of Expertise: They can undermine the expertise of subject-matter experts, as their insights are condensed or oversimplified.\n\nI hope you found this article engaging! If you are interested in other things I do, check out my site:\n\n[https://the-best-codes.github.io/](https://the-best-codes.github.io/?ref=dev.to_post&click=https://dev.to/best_codes/25-reasons-you-must-know-why-listicles-are-bad-for-devto-1hok/&site=https://dev.to/&reason=best-codes-bad-listicles-post)\n\nThanks for reading!\n\n_2023-12-13:_  \n_Update Note:_  \nYou may have seen some of my posts, “11 AMAZING Bookmarklets for Web Devs 🔖 🚀 (What Are They, Anyway? 🤔)”, “6️⃣ Common Browsers: How Secure are They Really? 🔒 😯”, and “10 Fun Web Development Project Ideas for Bored Coders 👍”. I believe that these are not “listicles” or clickbait, as they aren't really shallow, and they have more than just a list. If you have a different opinion about any of them, please let me know how I can improve them!\n\n**Author**: [Best Codes](https://dev.to/best_codes)",
    "shortDescription": "Yes, the title of this post is an example of something like one of the many so called “Listicles”...",
    "htmlMeta": "<meta property=\"og:title\" content=\"🚨 🚀 25 Reasons (You MUST Know!!) Why *Some* “Listicles” Are BAD for dev.to 🤯 👿 🚨\">\n<meta property=\"og:description\" content=\"Yes, the title of this post is an example of something like one of the many so called “Listicles”...\">\n<meta name=\"keywords\" content=\"webdev, sad, help, javascript, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xlJz4zv---/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krpnr7kszn8yebvu8l1f.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "25-Reasons-(You-MUST-Know!!)-Why-*Some*-\"Listicles\"-Are-BAD-for-dev.to",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krpnr7kszn8yebvu8l1f.png"
  },
  {
    "title": "JavaScript Frameworks - Heading into 2024",
    "url": "https://dev.to/this-is-learning/javascript-frameworks-heading-into-2024-i3l",
    "tags": [
      "webdev",
      "javascript",
      "webperf",
      "frameworks"
    ],
    "published_at": 1703198688000,
    "markdownContent": "I won't be the first to say it, but I will say it nonetheless, 2023 was quite the year for JavaScript frameworks. Between new technologies we've been watching finally showing they can deliver, and older frameworks making a resurgence if you weren't paying attention you may have missed a pretty significant shift.\n\nI anticipate that 2024 will continue to see even larger changes across the board. This time it isn't about new technology, but refinement. Now that the base is present there is so much more to deliver on.\n\n* * *\n\n## [](#server-first)Server First\n\nIf I were to pick a theme for the past couple of years this would be it. This has been a source of contention, but it is undeniable. A few short years ago everyone was talking about Progressive Web Applications and offline first. But that dialog has all but disappeared.\n\n// Detect dark theme var iframe = document.getElementById('tweet-1725241732260847914-381'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1725241732260847914&theme=dark\" }\n\nInstead, we are subject to the sharp wit of HTMX explaining why JavaScript is just a mistake. And Astro unapologetically taking over content site development. Even the React Core team embraced the simplicity of server with React Server Components, expressed convincingly by Dan Abramov's talk that looked into what if React had always been Server first.\n\nSo what happened to our Single Page App darling in such a short time? Is it still alive or do we live in the age of Multi-Page Apps and server-rendered HTML only?\n\n* * *\n\n## [](#reflecting-on-2023)Reflecting on 2023\n\nLast year I wrote a very similar article looking at the trends in JavaScript frameworks coming into the new year and I think that is a good place to start.\n\n[\n\n![This is Learning](https://res.cloudinary.com/practicaldev/image/fetch/s--Ba6C0swq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--TcsNlUvs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3314/dc73eb74-08f9-4592-b599-c08f2bb14b4d.png)\n\n![](https://res.cloudinary.com/practicaldev/image/fetch/s--shNeL80b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--zjqjkX6K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg)\n\n\n\n](/this-is-learning)[\n\n## JavaScript Frameworks - Heading into 2023\n\n### Ryan Carniato for This is Learning ・ Dec 29 '22\n\n#webdev #javascript #webperf #frameworks\n\n\n\n](/this-is-learning/javascript-frameworks-heading-into-2023-nln)\n\nThe three major technology trends identified in that article became a significant part of the discussion this past year.\n\n### [](#signals-everywhere)Signals Everywhere\n\nWhat started at the end of 2022 with the adoption of these Reactive primitives by Preact, and Qwik, following in the footsteps of SolidJS and Vue, only continued stronger into 2023.\n\n// Detect dark theme var iframe = document.getElementById('tweet-1625939902046117890-972'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1625939902046117890&theme=dark\" }\n\nIn February, the Angular team announced their adoption. This announcement shook social media. Not only that. It was one of a few factors that played into a very notable change in Angular's presence. One some even call it an Angular Rennaissance. And it was the first time in the past few years that we saw the React team join the fray as the very real question being asked was, \"Signal's in React, When?\".\n\nThere is a lot longer answer to that question that I wrote about in the following article (and a discussion with Dan Abramov in the comments).\n\n[\n\n![This is Learning](https://res.cloudinary.com/practicaldev/image/fetch/s--Ba6C0swq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--TcsNlUvs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3314/dc73eb74-08f9-4592-b599-c08f2bb14b4d.png)\n\n![](https://res.cloudinary.com/practicaldev/image/fetch/s--shNeL80b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--zjqjkX6K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg)\n\n\n\n](/this-is-learning)[\n\n## React vs Signals: 10 Years Later\n\n### Ryan Carniato for This is Learning ・ Mar 1\n\n#webdev #javascript #react #solidjs\n\n\n\n](/this-is-learning/react-vs-signals-10-years-later-3k71)\n\nBut the short answer is Signals, at least as an API, is not something they are interested in, and their much anticipated \"Forget\" compiler would be serving a similar role.\n\nSignal propagation didn't end there though. Lit, the web component framework from Google, unveiled [Lit 3 with first-party support of Signals](https://lit.dev/blog/2023-10-10-lit-3.0/#preact-signals-integration). And Rich Harris unveiled the future of Svelte, [their new Signals-based \"Runes\"](https://svelte.dev/blog/runes), to be the main source of reactivity in the upcoming Svelte 5.\n\nEnding 2023 Signals are a major part of most front-end JavaScript frameworks.\n\n### [](#hybrid-routing)Hybrid Routing\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--F9vlDtIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdtlafe81eo4jchqx37w.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--F9vlDtIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdtlafe81eo4jchqx37w.png)\n\nServer-based routing has stepped up and taken on a new role this past year. Again starting from the end of 2022, and coming into its own this year, we've seen people get used to this paradigm shift with things like React Server Components and [Astro's View Transition API integration](https://astro.build/blog/astro-3/).\n\nThe premise is that server rendering after initial page load shouldn't prevent client navigation and client navigation shouldn't mean that we need to send all the JavaScript to render parts of the page that could be statically server-rendered.\n\nIt is important to note that not all solutions are equivalent and this is an area that is still very much under construction. We are moving into a new space that isn't quite a Single Page App and isn't quite a traditional multi-page site. There are new tradeoffs and new understandings to be had. And we are in no way done navigating the pitfalls.\n\n### [](#edge-networks-the-final-frontier)Edge Networks: The Final Frontier\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--0IIDPa7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bss8a8hwf3qbozvvq9a6.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--0IIDPa7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bss8a8hwf3qbozvvq9a6.jpg)\n\nEdge functions seem like one of those obvious wins. Move your server closer to your end user and you drastically reduce latency. Use a lighter runtime and you drastically reduce cold start time. We finally can deliver the web experience we've always dreamed of. Dynamic at the speed of Static.\n\nWell if anything 2023 was a year of growing pains with the edge. We started incredibly enthusiastic. After all, Cloudflare was releasing Edge Databases, all our favorite providers started offering Edge functions, and our favorite frameworks were adding out-of-the-box support. The providers had formed a committee WinterCG to talk about standardizing the platform. The future was here.\n\n// Detect dark theme var iframe = document.getElementById('tweet-1616380400892248068-171'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1616380400892248068&theme=dark\" }\n\nWhere we ended up was the realization that certain Node APIs were essential even in these edge functions. You can thank or hate Next and Vercel for pushing `AsyncLocalStorage` into every runtime, but we needed it.\n\nWe also realized Edge Databases would never suffice for all applications. And even with streaming, Server Waterfalls are real and impactful. Yes, even with React Server Components.\n\nBut this did forward the goal I put forward last year, of monolithic authoring with distributed deploys. We saw Server Functions(`server$`, `use server`) and even variations like Worker Functions show up early in the year to show that we could distribute how we deploy our APIs, adopted by Solid, Qwik, and Next.\n\nBy the end of the year [Next 14 released the new experimental Partial Pre-rendering](https://nextjs.org/blog/next-14) which allowed a single request to serve static content from the edge while proxying through to Server-less Functions closer to the database all being streamed to offer an Edge-like experience without deploying your whole app there. It is awesome to see some ingenuity offer a best-of-both-worlds solution.\n\n// Detect dark theme var iframe = document.getElementById('tweet-1722704383064842280-353'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1722704383064842280&theme=dark\" }\n\n* * *\n\n## [](#forward-to-2024)Forward to 2024\n\n### [](#the-year-of-signals)The Year of Signals\n\nI know I've talked about Signals enough for one article already, but the real payoff hasn't happened yet. We've had fine-grained Signal-like primitives in JavaScript for 15 years, so why now?\n\n// Detect dark theme var iframe = document.getElementById('tweet-1730711700805140908-319'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1730711700805140908&theme=dark\" }\n\nIt isn't about just having them, it's about what you do with them. Vue has had these primitives under the hood for years, as has React with MobX but that barely touches on where things are heading. And that thing is fine-grained rendering. What was popularized by SolidJS, now is finding its way into Vue in the form of Vue Vapor, and Svelte in Svelte 5. And these are just the ones that have been announced.\n\nI expect the others that have adopted Signals to work them more natively into the framework to better benefit from them.\n\n// Detect dark theme var iframe = document.getElementById('tweet-1737147113241485712-751'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1737147113241485712&theme=dark\" }\n\nThere is so much excitement in this area on the potential, the group working on the TC-39 proposal for bringing Signals into the browser includes representatives from every major JavaScript framework, a group not always associated with working closely with standards.\n\n### [](#infrastructureled-development)Infrastructure-Led Development\n\nNow that Server side rendering frameworks have gotten a shot in the arm the next logical place to go is to continue to look at maximizing what this new capability gives us. Standards are slow and WinterCG will take some time, but that will not stop the flow here.\n\nTo differentiate I expect pressure for frameworks and infrastructure providers alike to offer unique features that may only work on specific platforms. While 2023 saw a push for equalization across providers to offer similar features beyond their base static and function hosting--things like Key Value Storage Blobs--I only see the competition here to provide unique value heating up.\n\nFrameworks' role in this is to keep a consistent authoring experience and mental model while finding ways to leverage the new abilities presented to us. It isn't unlike browser wars of the late 2000s and there is still a lot to come.\n\n### [](#ai)AI\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--qhfN1kr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sma4crnqjxbx89hhh7r3.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--qhfN1kr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sma4crnqjxbx89hhh7r3.jpg)\n\nLast year was too early to talk about AI from a framework standpoint. And next year might be too. But it is on the horizon. Code migration and generation tools are all great ideas but they suffer the same issue we've had for years with visual No or Low Code editors. Human interface points are still essential. After all, code is a living thing. It grows and is maintained over time.\n\nTalking with other framework authors the past year we've seen it catch the fascination of those around us, but hadn't gotten to a point where it was clear our role in this. But that is changing.\n\n// Detect dark theme var iframe = document.getElementById('tweet-1737616282210738650-272'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1737616282210738650&theme=dark\" }\n\nYes, that AI is answering the eternal question of why your application is slow.\n\nThe impact on developer tooling is one thing. But we are also seeing increased potential of real-time being built into our frameworks. I don't just mean Websockets for persistent backends either. APIs in meta-frameworks have evolved beyond simple JSON to fully streaming cross-network JavaScript execution with \"Server Functions\" in SolidStart, Qwik, and Next. It isn't hard to picture generative technologies creating your UI in real time.\n\n// Detect dark theme var iframe = document.getElementById('tweet-1722928972789408240-125'); if (document.body.className.includes('dark-theme')) { iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1722928972789408240&theme=dark\" }\n\n* * *\n\n## [](#conclusion)Conclusion\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--NxuEKTKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf0pc8fhlor9xnou9r8b.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--NxuEKTKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf0pc8fhlor9xnou9r8b.jpg)\n\n2024 is likely to continue on the maturing trend we've seen in the last couple of years. From 2020-22 we saw a lot of new JavaScript(and WASM) frameworks (Qwik, Million.js, Astro, Next 13, Remix, Hydrogen, SvelteKit, SolidStart, Leptos, Dioxus, HTMX), but that hasn't been the case the last year. We've found the approaches and now we need to take them to their full potential.\n\nI'm not sure we've succeeded at wrangling the complexity yet, which gives big nods to solutions that simplify like Astro or HTMX. But I'm still hopeful.\n\nIt may be too much to expect everyone to agree on what exactly a \"Single Page App\" is or when they should be using the various options laid in front of us, but every day these solutions are getting more capable of delivering on what they set out to do.\n\nIt is no longer a question of whether web development as we know it is going to change. Even if the direction isn't completely clear, the revolution is already here. Look forward to seeing you there.\n\n**Author**: [Ryan Carniato](https://dev.to/ryansolid)",
    "shortDescription": "I won't be the first to say it, but I will say it nonetheless, 2023 was quite the year for JavaScript...",
    "htmlMeta": "<meta property=\"og:title\" content=\"JavaScript Frameworks - Heading into 2024\">\n<meta property=\"og:description\" content=\"I won't be the first to say it, but I will say it nonetheless, 2023 was quite the year for JavaScript...\">\n<meta name=\"keywords\" content=\"webdev, javascript, webperf, frameworks, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--t8RhSIWO--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6dbza62ym6h1yj18ii7.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "JavaScript-Frameworks-Heading-into-2024",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6dbza62ym6h1yj18ii7.jpg"
  },
  {
    "title": "React is Slow, What to do now?",
    "url": "https://dev.to/nikl/react-is-slow-what-to-do-now-369g",
    "tags": [
      "react",
      "javascript",
      "beginners",
      "testing"
    ],
    "published_at": 1703923714000,
    "markdownContent": "Check out more articles:\n\n1.  [Building a Scalable Notification System with gRPC and Microservices](https://dev.to/suprsend/building-a-scalable-notification-service-with-grpc-and-microservices-l6d)\n2.  [Adding a Notification Feed in React Websites](https://dev.to/suprsend/adding-a-notification-feed-in-react-websites-4oa0)\n3.  [A Complete Guide on Notification Infrastructure for Modern Applications in 2023](https://dev.to/suprsend/a-complete-guide-on-notification-infrastructure-for-modern-applications-in-2023-13b9)\n\n* * *\n\nApplications can generally be categorized into having two types of performance bottlenecks:\n\n1.  **I/O-bound:** These applications spend the majority of their time dealing with inputs and outputs.\n2.  **CPU-bound:** These applications spend the majority of their time engaged in computational tasks.\n\nNow, how do these classifications translate into the context of front-end applications, particularly React apps?\n\n**I/O Performance Challenges in React**\n\nWhen it comes to React applications, issues often arise in terms of I/O performance, primarily related to asynchronous HTTP calls. Ineffectively managing these network requests can lead to a slowdown in the application. While this post primarily focuses on CPU performance, it's essential to briefly touch upon key areas where solutions can be found for I/O-bound problems:\n\n*   Implement lazy loading whenever possible.\n*   Exercise caution during the initial loading of assets and backend requests.\n*   Reduce the frequency of loading highly static elements (e.g., select options, configurations).\n*   Debounce the number of times specific requests are made.\n*   Parallelize requests as much as possible using techniques like Promise.all.\n*   Enhance the efficiency of critical backend endpoints by optimizing database accesses, among other measures.\n\n**CPU Performance Challenges in React**\n\nThe main thrust of this post centers around addressing CPU performance challenges in React. Before delving into the specifics, let's establish a concrete definition of performance:\n\n*   Browser applications predominantly operate as single-threaded programs.\n*   Scripting tasks, such as JavaScript execution, DOM rendering, and event handling, all occur within the same thread.\n*   A slow JavaScript module can potentially block the main thread.\n*   If the main thread is blocked, the user interface becomes unresponsive, resulting in a drop in frames per second (fps).\n*   Responsive UIs aim for a minimum of 30 fps, ideally achieving 60 fps, meaning each frame should compute within 30 ms or less.\n\nIn the context of React, this issue becomes critical. When a React component update is triggered, the entire subtree must be rendered in less than 30 ms. This becomes particularly challenging with complex and lengthy component structures, such as tables, trees, and lists, where large-scale re-renders may be necessary.\n\n**React Render and Commit Phase**\n\nReact, at a high level, operates in two distinct phases:\n\n**Render Phase:**\n\n*   Initiated when a component updates, triggered by changes in props or hooks.\n*   React traverses the component subtree, rendering each child and computing the Virtual DOM (VDOM) subtree.\n*   Only the \"dirty\" subtree, affected by updates, needs to be recomputed; the parents of updated components may not require re-rendering.\n*   The efficiency of this phase is proportional to the size and computational cost of each child component.\n*   React.memo can be employed to provide hints for a more efficient rendering process.\n\n**Commit Phase:**\n\n*   The render phase produces a new Virtual DOM of the entire UI.\n*   In the commit phase, React compares the new tree with the previous one (VDOM diffing).\n*   React calculates the minimum DOM mutations required to reflect the new VDOM tree.\n*   DOM mutations are applied, updating the UI.\n*   This phase is inherently efficient by default.\n*   The entire process must be completed in less than 30 or 16 ms (for 30 fps and 60 fps, respectively) for the UI to be deemed responsive. The workload is directly proportional to the size of the app.\n\nThe subsequent exploration will focus on enhancing the efficiency of the Render phase. Before delving into optimization techniques, it is crucial to understand how to measure and identify the sluggish components in the application.\n\n**Measuring**\n\nAmong the tools I frequently rely on are:\n\n1.  **Chrome Dev Tool’s Performance Tab**\n2.  **React Dev Tool’s Performance Tab**\n\n**Chrome Dev Tool’s Performance Tab**\n\nThis tool stands out as a comprehensive resource applicable to any browser application. It provides insights into frames per second, captures stack traces, identifies slow or hot sections of your code, and more. The primary user interface is represented by the flame chart.\n\nFor an in-depth understanding of Chrome’s Performance Tab as applied to React, refer to this [documentation](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance).\n\n**React Dev Tool’s Performance Tab**\n\nTo leverage this tool, you'll need to install the React Dev Tool extension in your browser. It tailors information from the Chrome Dev Tool’s Performance Tab specifically to React. Through a flame chart, you can observe different commit phases and the JavaScript code executed during the respective render phase.\n\nThis tool aids in easily determining:\n\n*   When a component undergoes re-rendering.\n*   What props have changed.\n*   What hooks have changed, encompassing state, context, and more. For further details, refer to the [introductory post](https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html).\n\n**Measuring Methodology**\n\nHere’s the methodology I prefer when assessing front-end applications:\n\n1.  **Identify the Problem:**\n    \n    *   Pinpoint page interactions causing UI responsiveness issues.\n2.  **Create a Hypothesis:**\n    \n    *   Optionally, generate ideas about the potential location of the problem.\n3.  **Measure:**\n    \n    *   Verify the problem by measuring essential metrics such as frames per second (fps).\n4.  **Measure (Part II):**\n    \n    *   Identify problematic sections of code; optionally, validate your hypothesis.\n5.  **Create a Solution:**\n    \n    *   Implement a solution based on the insights gathered.\n6.  **Measure the Solution:**\n    \n    *   Validate that the implemented solution resolves or alleviates the problem by examining key metrics.\n\nOptimizing without proper measurement renders efforts practically ineffective. While some problems may be apparent, the majority necessitate thorough measurement, forming the cornerstone of the performance enhancement process.\n\nMoreover, measurements empower you to communicate achievements upwards, informing users, stakeholders, and your leadership about performance improvements achieved within specific areas of your application, expressed as a percentage gain.\n\n**General Solutions to CPU-Bound Problems in React Applications**\n\nNow armed with measurements and an understanding of problematic areas, let’s delve into potential solutions. Optimizing React performance revolves around improving both what components render and which components render.\n\nMany performance issues also stem from anti-patterns. Eliminating these anti-patterns, such as avoiding inline functional definitions in the render method, contributes to more efficient rendering times. Addressing poor patterns can, in fact, reduce complexity and improve performance simultaneously.\n\n**🤔 Improving What Components Render**\n\nIdentifying sluggish components in our React app typically points to specific components that struggle with rendering or have an excessive number of instances on a single page. Various reasons may contribute to their sluggishness:\n\n*   Blocking calculations within components.\n*   Rendering large component trees.\n*   Utilizing expensive or inefficient libraries.\n\nMost of these issues boil down to enhancing the speed of component rendering. At times, crucial components cannot rely on overly complex libraries, necessitating a return to basic principles and the implementation of simpler alternatives.\n\nFor instance, I encountered such challenges while using Formik excessively within multiple cells of every row in a complex table. While improving the efficiency of individual components goes a long way, attention must eventually shift to which components are rendering.\n\n**🧙 Improving Which Components Render**\n\nThis aspect offers two broad categories for improvement:\n\n1.  **Virtualization:**\n    \n    *   Only render components that are visible in the viewport. For example, rendering only the table rows or list items that the user can see. This approach proves beneficial for complex UIs, and while it can be applied without addressing the \"what\" step, it is recommended. Modern libraries often provide robust support for virtualizing tables and lists, with examples like `react-virtualized`. Virtualization reduces the number of components React needs to render in a given frame.\n2.  **Props Optimization:**\n    \n    *   React aims to make components resemble pure functions but may attempt to render more times than necessary.\n\n**React.memo:**\n\n*   Most components in React can be memoized, ensuring that with the same props, the component returns the same tree (although hooks, state, and context are still respected). Leveraging `React.memo` informs React to skip re-rendering these memoized components if their props remain unchanged.  \n    \n    ```jsx\n      import React from 'react';\n    \n      const MyComponent = React.memo((props) => {\n        // Component logic here\n      });\n    \n      export default MyComponent;\n    \n    ```\n    \n\n**Fake Prop Changes: useCallback:**\n\n*   Addressing the issue of fake prop changes involves instances where the content of a prop remains unchanged, but the reference changes. A classic example is an event handler.  \n    \n    ```jsx\n      import React, { useCallback } from 'react';\n    \n      const MyComponent = () => {\n    \n    ```\n    \n\nconst onChange = useCallback((e) => console.log(e), \\[\\]);\n\n```plaintext\n    return <input onChange={onChange} />;\n  };\n\n  export default MyComponent;\n  ```\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Fake Prop Changes: useMemo:**\n\n*   Similar challenges arise when constructing complex data structures without proper memoization before passing them as props. Utilizing `useMemo` ensures that rows are recalculated only when dependencies change, enhancing efficiency.  \n    \n    ```jsx\n      import React, { useMemo } from 'react';\n    \n      const MyComponent = ({ data, deps }) => {\n        const rows = useMemo(() => data.filter(bySearchCriteria).sort(bySortOrder), [deps]);\n    \n        return <Table data={rows} />;\n      };\n    \n      export default MyComponent;\n    \n    ```\n    \n\nWhile you have the flexibility to customize how `React.memo` compares current vs. previous props, it's crucial to maintain a swift calculation since it's an integral part of the Render phase. Avoid overly complex deep comparisons during each render.\n\n## [](#how-does-it-look-now)How does it look now?\n\n### [](#props-changed)Props changed\n\nHow it looks in the React dev tool:\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--XhR4QqWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0wsxe16icfytqfamg3p.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--XhR4QqWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0wsxe16icfytqfamg3p.png)\n\nDid they really? Are they fake prop changes? Use `useCallback` and `useMemo`.\n\n### [](#parent-rendered)Parent rendered\n\nHow it looks in the React dev tool:\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--Hu8nH5by--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilqb2astlchzto603anc.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--Hu8nH5by--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilqb2astlchzto603anc.png)\n\nUse `React.memo` to memoize your pure components.\n\n### [](#hooks-changed-state-context)Hooks changed (state, context)\n\nHow it looks in the React dev tool:\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--n5amQSsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8beosx4hh1n90ejts3h.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--n5amQSsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8beosx4hh1n90ejts3h.png)\n\nNothing too obvious to do here. Try to validate that the hook that changed makes sense. Perhaps a bad context provider is faking out changes the same way as fake prop changes might appear.\n\n* * *\n\n> Similar to this, I personally run a developer-led community on Slack. Where we discuss these kinds of implementations, integrations, some truth bombs, weird chats, virtual meets, and everything that will help a developer remain sane ;) Afterall, too much knowledge can be dangerous too.\n> \n> I'm inviting you to join our free community, take part in discussions, and share your freaking experience & expertise. You can fill out this form, and a Slack invite will ring your email in a few days. We have amazing folks from some of the great companies (Atlassian, Scaler, Cisco, IBM and more), and you wouldn't wanna miss interacting with them. [Invite Form](https://forms.gle/VzA3ST8tCFrxt39U9)\n\n* * *\n\nYou may want to check out a seamless way of integrating your notification infrastructure.\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [suprsend](https://github.com/suprsend) / [suprsend-go](https://github.com/suprsend/suprsend-go)\n\n### SuprSend SDK for go\n\n# suprsend-go\n\nSuprSend Go SDK\n\n## Installation\n\n```\ngo get github.com/suprsend/suprsend-go\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## Usage\n\nInitialize the SuprSend SDK\n\n```\nimport (\n    \"log\"\n\n    suprsend \"github.com/suprsend/suprsend-go\"\n)\n\nfunc main() {\n    opts := \\[\\]suprsend.ClientOption{\n        // suprsend.WithDebug(true),\n    }\n    suprClient, err := suprsend.NewClient(\"\\_\\_api\\_key\\_\\_\", \"\\_\\_api\\_secret\\_\\_\", opts...)\n    if err != nil {\n        log.Println(err)\n    }\n}\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### Trigger Workflow\n\n```\npackage main\nimport (\n    \"log\"\n\n    suprsend \"github.com/suprsend/suprsend-go\"\n)\n\nfunc main() {\n    // Instantiate Client\n    suprClient, err := suprsend.NewClient(\"\\_\\_api\\_key\\_\\_\", \"\\_\\_api\\_secret\\_\\_\")\n    if err != nil {\n        log.Println(err)\n        return\n    }\n    // Create workflow body\n    wfBody := map\\[string\\]interface{}{\n        \"name\":                  \"Workflow Name\",\n        \"template\":              \"template slug\",\n        \"notification\\_category\": \"category\",\n        // \"delay\":                 \"15m\", // Chek duration format in documentation\n        \"users\": \\[\\]map\\[string\\]interface{}{\n            {\n                \"distinct\\_id\": \"0f988f74-6982-41c5-8752-facb6911fb08\",\n                \n```\n…\n\nEnter fullscreen mode Exit fullscreen mode\n\n[View on GitHub](https://github.com/suprsend/suprsend-go)\n\n**Author**: [Nik L.](https://dev.to/nikl)",
    "shortDescription": "Check out more articles:   Building a Scalable Notification System with gRPC and Microservices Adding...",
    "htmlMeta": "<meta property=\"og:title\" content=\"React is Slow, What to do now?\">\n<meta property=\"og:description\" content=\"Check out more articles:   Building a Scalable Notification System with gRPC and Microservices Adding...\">\n<meta name=\"keywords\" content=\"react, javascript, beginners, testing, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7vrcNVqV--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u01qm0mnwqjykc7x1v9f.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "React-is-Slow-What-to-do-now",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u01qm0mnwqjykc7x1v9f.jpg"
  },
  {
    "title": "🔐 Session-Based vs. Token-Based Authentication: Which is better?🤔",
    "url": "https://dev.to/fidalmathew/session-based-vs-token-based-authentication-which-is-better-227o",
    "tags": [
      "webdev",
      "beginners",
      "node",
      "javascript"
    ],
    "published_at": 1703319712000,
    "markdownContent": "Hi fellow readers!✋ I hope you’re doing great. In this article, we will learn about session and token-based authentication methods used in backend applications. Let’s take a look at them.\n\n## [](#sessionbased-auth)🔐 Session-based auth\n\nIn simple words, session-based authentication uses a special code(session id) stored on your device to remember who you are when you visit a website, keeping you logged in and remembering your information until you leave or log out. Didn’t get it? Don’t worry, let’s take a look step by step.\n\n### [](#1-user-login)1\\. User Login:\n\nUsers log in by sending their email and password to the server through a special request.\n\n### [](#2-checking-details)2\\. Checking Details:\n\nThe server checks if the provided details match what's stored for the user.\n\n### [](#3-creating-a-session)3\\. Creating a Session:\n\nIf everything is correct, the server makes a 'session' that holds user info (like user ID, permissions, and time limits). This info is kept safe in the server's storage. Exam or can also be managed using libraries such as `express-session`.\n\n### [](#4-getting-a-session-id)4\\. Getting a Session ID:\n\nThe server sends this 'session ID' back to the user's device, usually as a cookie in the response.\n\n### [](#5-using-the-session-id)5\\. Using the Session ID:\n\nWhenever the user wants something from the server, their device automatically includes this session ID in its requests.\n\n### [](#6-server-checks)6\\. Server Checks:\n\nThe server uses this session ID to find the stored information about the session user in the session storage.\n\nHere’s a sneak peek at how `express-session` works:\n\n*   When the user logs in, the server creates a session for that user and sets a cookie🍪 in the response containing the session ID.\n    \n*   The browser automatically includes this session ID cookie🍪 in subsequent requests to the server.\n    \n*   When the server receives a request, express-session middleware uses the session ID from the cookie🍪 to retrieve the relevant session data.\n    \n*   The data stored in **req.session** (such as userId) becomes available to handle the request.\n    \n\n### [](#7-access-granted)7\\. Access Granted:\n\nIf everything matches up, the server knows the user is genuine and responds to them with access to what they asked for.\n\n[![Session auth working](https://res.cloudinary.com/practicaldev/image/fetch/s--EBo4SYwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g42u59txhhuaflzsj52.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--EBo4SYwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g42u59txhhuaflzsj52.png)\n\n### [](#example)Example\n\nHere's an example of a Node.js application using Express.js to implement session authentication.\n\n#### [](#implementation)Implementation\n\n```javascript\nconst express = require('express');\nconst session = require('express-session');\n\nconst app = express();\n\n// Middleware setup\napp.use(session({\n  secret: 'your_secret_key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true, // Set the cookie as HTTP-only, Optional\n    maxAge: 60*30 // In secs, Optional\n  }\n}));\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n#### [](#login-route)Login route\n\n```javascript\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find(u => u.username === username && u.password === password);\n\n  if (user) {\n    req.session.userId = user.id; // Store user ID in session\n    res.send('Login successful');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n#### [](#protected-route)Protected route\n\n```javascript\napp.get('/home', (req, res) => {\n  if (req.session.userId) {\n    // User is authenticated\n    res.send(`Welcome to the Home page, User ${req.session.userId}!`);\n  } else {\n    // User is not authenticated\n    res.status(401).send('Unauthorized');\n  }\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n#### [](#logout-route)Logout route\n\n```javascript\napp.get('/logout', (req, res) => {\n  req.session.destroy(err => {\n    if (err) {\n      res.status(500).send('Error logging out');\n    } else {\n      res.redirect('/'); // Redirect to the home page after logout\n    }\n  });\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#tokenbased-auth)🔐 Token-based auth\n\nJWT authentication uses digitally signed tokens containing user information to allow secure and verified access to websites or applications without needing to repeatedly log in. Let’s take a look at the step-by-step workflow of token-based authentication.\n\n### [](#1-user-login-request)1\\. User Login Request:\n\nUsers log in by sending their email and password to the server through a specific request.\n\n### [](#2-credential-verification)2\\. Credential Verification:\n\nThe server verifies the provided credentials against the stored user data.\n\n### [](#3-token-generation)3\\. Token Generation:\n\nUpon successful verification, the server creates a token (commonly JWT - JSON Web Token). This token holds user information (claims) such as user\\_id, permissions.\n\n### [](#4-token-signing-and-hashing)4\\. Token Signing and Hashing:\n\nThe token is signed with a secret key and processed with a hashing algorithm (like SHA256) to create a hash.\n\n### [](#5-sending-the-token)5\\. Sending the Token:\n\nThe server sends this token to the client, which stores it, typically in the browser.\n\n### [](#6-token-storage-options)6\\. Token Storage Options:\n\nThe client can store the token in different ways like HttpOnly Cookies, Session Storage, or Local Storage. Storing in HttpOnly Cookies is recommended as it prevents JavaScript access, enhancing security against XSS attacks.\n\n### [](#7-token-expiry-and-security)7\\. Token Expiry and Security:\n\nTokens often have an expiration time to enhance security.\n\n### [](#8-including-token-in-requests)8\\. Including Token in Requests:\n\nFor every request to the server, the client sends the token in the Authorization header.\n\nIt's a good practice to prefix the token with \"Bearer \".  \n\n```javascript\naxios.get(URL, {\n    headers: {\n        'Authorization': 'Bearer ' + token,\n    },\n})\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#9-serverside-validation)9\\. Server-Side Validation:\n\nUpon receiving a request, the server retrieves the token.\n\n### [](#10-token-validation-and-user-authentication)10\\. Token Validation and User Authentication:\n\nUsing the secret key, the server validates the token and extracts claims from it. If the user information from the claims exists in the server's user table, the server authenticates the user, granting access to requested resources.\n\n[![Token based authentication](https://res.cloudinary.com/practicaldev/image/fetch/s--sepxr4Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8jdjwssswe9dcldfga.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--sepxr4Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8jdjwssswe9dcldfga.png)\n\n### [](#example)Example\n\n#### [](#login)Login\n\n```javascript\napp.post('/login', (req, res) => {\n\nconst { username, password } = req.body;\n  const user = users.find(u => u.username === username && u.password === password);\n\n  jwt.sign({ user }, secretKey, { expiresIn: '1h' }, (err, token) => {\n    if (err) {\n      res.status(500).send('Error generating token');\n    } else {\n      res.json({ token });\n    }\n  });\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n#### [](#protected-route)Protected route\n\nWe are using `veriyToken()` function as middleware for every route that needs verification. The request passes through the `veriyToken()` and only if the `next()` function is called, it passes on to this route and implements the code.  \n\n```javascript\napp.get('/dashboard', verifyToken, (req, res) => {\n  res.send('Welcome to the Home page');\n});\n\n// Verify token middleware\nfunction verifyToken(req, res, next) {\n  const token = req.headers['authorization'];\n\n  if (typeof token !== 'undefined') {\n    jwt.verify(token.split(' ')[1], secretKey, (err, decoded) => {\n      if (err) {\n        res.status(403).send('Invalid token');\n      } else {\n        req.user = decoded.user;\n        next();\n      }\n    });\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#key-differences)Key differences\n\n*   **Storage Location:** Sessions are stored on the server, while tokens (JWTs) are stored on the client side.\n    \n*   **Stateful vs Stateless:** Sessions are stateful, while tokens are stateless, allowing for better scalability in distributed systems.\n    \n*   **Expiry Handling:** Session expiry is managed by the server, whereas token expiry is handled by the token itself.\n    \n*   **Security Measures:** JWTs often include digital signatures and support for encryption, enhancing security compared to typical session mechanisms that use cookies, and can be vulnerable to CSRF attacks if not properly protected.\n    \n*   **Usage Flexibility:** Tokens (JWTs) offer more flexibility in carrying additional information beyond authentication, useful for authorization and custom data transmission.\n    \n\n## [](#which-method-should-be-used)Which method should be used?\n\nIt depends upon the requirement and nature of the application. Most applications use a hybrid approach, token-based authentication for APIs, and session-based authentication for web-based interactions.\n\nI hope you liked this article and if you did don’t forget to give it a like! Which backend language do you use for your projects? 🤔\n\nComment them down below 👇\n\n**Connect with me on-**\n\n*   [Twitter](https://twitter.com/fidalmathew10)\n*   [Github](https://github.com/FidalMathew)\n*   [Linkedin](https://www.linkedin.com/in/fidalmathew/)\n\n**Author**: [Fidal Mathew](https://dev.to/fidalmathew)",
    "shortDescription": "Hi fellow readers!✋ I hope you’re doing great. In this article, we will learn about session and...",
    "htmlMeta": "<meta property=\"og:title\" content=\"🔐 Session-Based vs. Token-Based Authentication: Which is better?🤔\">\n<meta property=\"og:description\" content=\"Hi fellow readers!✋ I hope you’re doing great. In this article, we will learn about session and...\">\n<meta name=\"keywords\" content=\"webdev, beginners, node, javascript, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MJnTVJPE--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq7ytx3iczwt2yhqzqen.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Session-Based-vs.-Token-Based-Authentication:-Which-is-better",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq7ytx3iczwt2yhqzqen.png"
  }
]