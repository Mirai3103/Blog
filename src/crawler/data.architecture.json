[
  {
    "title": "Books That Helped Me Become a Tech Lead",
    "url": "https://dev.to/frosnerd/books-that-helped-me-become-a-tech-lead-3831",
    "tags": [
      "books",
      "swe",
      "sre",
      "architecture"
    ],
    "published_at": 1703101318000,
    "markdownContent": "## [](#why-books)Why Books?\n\nWhen developing my skills, I like to use a combination of conference talks, video tutorials, books, papers, blog posts, learning-by-doing, and teaching/blogging. Books are a great way to learn from the mistakes other people have made, to be inspired by their successes, and to experience their accomplishments second hand.\n\nIn this blog post I want to share my favorite books that helped me the most in my journey from being a senior software engineer to becoming a tech lead. They helped me to broaden and deepen my understanding about software engineering, software architecture, and building and running a software business. They taught me to challenge and shape my behaviour and habits. Some of them deeply affected my personal and professional life.\n\nIt goes without saying that reading those books will not automatically get you promoted or land you a new tech lead role. Of course, you still need to get your own experiences, make your own mistakes, and have that little bit of luck required. It is also important to constantly sharpen your technical knowledge and skills based on the specific domain you are working in. The books on this list do not focus on specific technologies, but rather on general principles and concepts that are applicable to any technology stack and business.\n\nFor each book on the list, I will include a brief summary that can help you judge whether the book is relevant to you. To give it a personal touch, I will also include the most valuable lesson I learned from the book. This is not necessarily the main message of the book, nor the only important one, but rather the one that resonated with me the most.\n\n## [](#the-list)The List\n\n### [](#design-it)Design It!\n\n[_Design It!: From Programmer to Software Architect_]((https://www.oreilly.com/library/view/design-it/9781680502923/)) by Michael Keeling is a comprehensive guide aimed at software developers who aspire to transition into the role of a software architect. The book provides a pragmatic and accessible approach to software architecture, emphasizing the importance of design in creating effective software systems. Keeling covers a wide range of topics, from foundational principles of software architecture to practical techniques for designing scalable and maintainable systems.\n\nThroughout the book, Keeling advocates for a hands-on, iterative approach to software design, encouraging readers to think critically about the architectural choices they make. He introduces various architectural styles and patterns, and discusses how to evaluate trade-offs and make decisions that align with the goals and constraints of a project. The book is filled with real-world examples, exercises, and practical tips, making it a valuable resource for those looking to develop their skills in software architecture and design.\n\n**The most valuable lesson I learned from the book:** There is no such thing as \"no design\". \"No design\" often means multiple, implicit designs, in the heads of your engineers, that are not aligned with each other. Design explicitly, collaboratively, iteratively, and document the design in a written form!\n\n### [](#release-it)Release It!\n\n[_Release It!: Design and Deploy Production-Ready Software_](https://www.oreilly.com/library/view/release-it/9781680500264/) by Michael Nygard is a critical guide for software developers and architects focused on the challenges of creating software that performs reliably in production environments. The book delves into the complexities of designing, deploying, and maintaining software that can withstand the rigors of real-world operations. Nygard emphasizes the importance of considering production realities from the beginning of the design process, advocating for a mindset shift from merely writing code to delivering a resilient, scalable, and maintainable system.\n\nNygard provides insights into the various pitfalls that software systems encounter in production, such as network issues, unpredictable load patterns, and hardware failures. He introduces concepts like stability patterns and antipatterns, illustrating how to build systems that can gracefully handle failure and remain robust under stress. The book is enriched with real-life stories and case studies that demonstrate the catastrophic consequences of poor system design in production settings. \"Release It!\" is a valuable resource for software professionals seeking to ensure their systems are not just functional, but also resilient and reliable in the face of real-world challenges.\n\n**The most valuable lesson I learned from the book:** Every software engineer should build their software with production in mind. Software in production is what runs your business, impacts your customers, and determines success or failure.\n\n### [](#site-reliability-engineering)Site Reliability Engineering\n\n[_Site Reliability Engineering: How Google Runs Production Systems_](https://www.oreilly.com/library/view/site-reliability-engineering/9781491929117/) authored by Betsy Beyer, Chris Jones, Jennifer Petoff, and Niall Richard Murphy, is an insightful exploration into the practices and principles that Google employs to manage its large-scale, highly reliable systems. The book introduces the concept of Site Reliability Engineering (SRE), a discipline that blends aspects of software engineering with IT operations, focusing on creating scalable and reliable software systems.\n\nThe authors, all experienced practitioners in SRE at Google, share their expertise on how to build, deploy, monitor, and maintain systems that are robust and resilient. They delve into the specific strategies and techniques Google uses, such as setting service level objectives (SLOs), managing change effectively, and balancing the need for release velocity with service reliability. The book covers a range of topics from organizational aspects of SRE teams to technical practices like incident management and post-mortem culture. The book offers a rare glimpse into the inner workings of one of the world's most proficient engineering organizations and is a valuable resource for anyone involved in the operation, maintenance, and scaling of large systems.\n\n**The most valuable lesson I learned from the book:** There are no perfect systems. By explicitly defining and measuring SLOs and error budgets, you can make informed decisions about the trade-offs between reliability and velocity.\n\n### [](#change-your-questions-change-your-life)Change Your Questions, Change Your Life\n\n[_Change Your Questions, Change Your Life: 12 Powerful Tools for Leadership, Coaching, and Life_](https://www.goodreads.com/en/book/show/6665149) by Marilee Adams explores the profound impact that the questions we ask can have on our lives and careers. Adams introduces the concept of \"Question Thinking,\" a method of transforming thinking, action, and results through deliberate and mindful questioning. The book emphasizes how the types of questions we ask ourselves, ranging from limiting, judgmental \"Judger\" questions to more open, constructive \"Learner\" questions, can significantly influence our outlook and outcomes.\n\nAdams illustrates her ideas through a compelling narrative, following the story of an individual struggling with life's challenges and learning to apply the principles of Question Thinking. This approach offers practical tools and techniques for individuals to improve their communication, decision-making, and problem-solving skills. By fostering a Learner mindset and asking better, more empowering questions, readers are guided towards more positive and productive personal and professional relationships. The book is particularly valuable for leaders, coaches, and anyone looking to enhance their ability to connect with others and navigate complex situations more effectively.\n\n**The most valuable lesson I learned from the book:** I realized how often I am in the \"Judger\" mindset. Being more mindful about that, and consciously choosing to shift to a \"Learner\" mindset became almost like a super-power for me to solve any challenge I am facing.\n\n### [](#thinking-fast-and-slow)Thinking, Fast and Slow\n\n[_Thinking, Fast and Slow_](https://www.amazon.de/-/en/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321) by Daniel Kahneman is a groundbreaking exploration of psychology and economics, delving into how we think and make decisions. Kahneman introduces two distinct modes of thinking that dominate our mental processes: \"System 1\" (fast, intuitive, and emotional) and \"System 2\" (slower, more deliberate, and more logical). Throughout the book, Kahneman explores the impact of these two systems on our judgment, decision-making, and the way we perceive the world around us.\n\nThe book is a comprehensive journey through various cognitive biases and heuristics that influence our everyday thinking. Kahneman demonstrates how our intuitive System 1, which often serves us well, can also lead to profound errors and biases. He also explores the capabilities and limitations of System 2, emphasizing how it can be influenced and overruled by the quick judgments of System 1. The book is a synthesis of decades of research, providing deep insights into the complexities of human thought and behavior. It's an essential read for anyone interested in understanding the mental processes that underlie our choices and actions in both personal and professional contexts.\n\n**The most valuable lesson I learned from the book:** I learned that both modes are valuable, but also have their drawbacks. I learned to be more aware of the biases and heuristics that influence my thinking, and to consciously choose when to rely on System 1 and when to engage System 2.\n\n### [](#atomic-habits)Atomic Habits\n\n[_Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones_](https://jamesclear.com/atomic-habits) by James Clear is a transformative guide that delves into the science of habits and how small changes can lead to remarkable results. The author presents a comprehensive framework for understanding how habits form and offers practical strategies for cultivating good habits and breaking bad ones. The core philosophy of the book is that minor improvements, or \"atomic habits\", can accumulate into significant, life-altering outcomes over time.\n\nClear emphasizes the importance of systems over goals, arguing that focusing on the processes and systems that lead to a goal is more effective than fixating on the goal itself. He introduces the Four Laws of Behavior Change – a set of simple, actionable principles to guide habit formation. These include making cues obvious, cravings attractive, responses easy, and rewards satisfying. Through a combination of scientific research, personal stories, and real-world examples, Clear illustrates how these principles can be applied to various aspects of life, from fitness and financial management to productivity and personal growth. \"Atomic Habits\" offers an accessible and compelling blueprint for building habits that stick and is valuable for anyone looking to make positive, lasting changes in their life.\n\n**The most valuable lesson I learned from the book:** By making many small changes to my daily routine, that individually only affect my productivity by a small amount, all of those habits combined make a huge impact.\n\n### [](#conscious-business)Conscious Business\n\n[_Conscious Business: How to Build Value Through Values_](https://www.amazon.de/-/en/Fred-Kofman/dp/1622032020) by Fred Kofman is a thought-provoking book that explores the intersection of personal integrity and professional success. The author presents the idea that the key to creating a successful and sustainable business lies in conscious management practices, where personal values and ethical principles are at the forefront of decision-making processes. The book argues that success in business is not just about financial gain but also about achieving personal and professional fulfillment.\n\nKofman discusses various aspects of conscious business, including accountability, responsibility, emotional intelligence, communication skills, and the ability to resolve conflicts constructively. He emphasizes the importance of leaders who can inspire trust, cultivate a culture of openness and honesty, and lead with empathy. Through real-world examples, practical advice, and exercises, Kofman guides readers on how to develop these skills and apply them in their professional lives.\n\n**The most valuable lesson I learned from the book:** The concept of unconditional response-ability. I now constantly remind myself that I have the power and responsibility to choose my responses to any situation, regardless of the circumstances. \"Response-ability\" is a play on the words \"response\" and \"ability,\" highlighting the ability to respond consciously and proactively.\n\n### [](#first-break-all-the-rules)First, Break All The Rules\n\n[_First, Break All the Rules: What the World's Greatest Managers Do Differently_](https://store.gallup.com/p/en-us/10286/first-break-all-the-rules) by Marcus Buckingham and Curt Coffman presents a radical approach to management based on research conducted by the Gallup Organization. This book challenges conventional wisdom about leadership and management, proposing that the most effective managers often defy standard practices.\n\nThe core message of the book is that great managers don't follow a single mold or adhere strictly to traditional management principles. Instead, they break the rules by focusing on their employees' individual strengths rather than trying to correct their weaknesses. The authors argue that this approach leads to higher engagement, productivity, and overall job satisfaction.\n\nBuckingham and Coffman identify key insights and strategies that set apart the world's best managers. These include the importance of selecting talent over simply filling positions, defining the right outcomes rather than dictating the right steps, focusing on strengths rather than obsessing over weaknesses, and finding the right fit for employees rather than simply promoting them to the next rung on the ladder.\n\n**The most valuable lesson I learned from the book:** The importance of focusing on strengths rather than weaknesses. I learned to accept my weaknesses as such, and use tools and strategies to compensate for them, rather than trying to \"fix\" them. Instead, I invest my time and energy into developing my strengths, and I try to do the same for the people I lead.\n\n## [](#honorable-mentions)Honorable Mentions\n\nThere are many more books that I found valuable on my journey from senior software engineer to tech lead. They are more focussed on specific technologies, which is why I did not include them in the main list. Nevertheless, I want to mention them here, as they might be relevant to you depending on the field/industry you are working in.\n\n*   [_Database Internals_](https://www.databass.dev/) by Alex Petrov. The _best_ book on databases I have ever read. It covers all the fundamentals of databases in a very accessible way. It is a must-read for anyone working with databases.\n*   [_Designing Data-Intensive Applications_](https://www.amazon.de/-/en/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321) by Martin Kleppmann. A comprehensive guide to building data-intensive applications. It covers a wide range of topics, from databases and data processing to distributed systems and stream processing.\n*   [_Oracle JRockit: The Definitive Guide_](https://www.packtpub.com/product/oracle-jrockit-the-definitive-guide/9781847198068) by Marcus Hirt and Marcus Lagergren. A great resource for anyone interested in JVM internals.\n*   [_The Linux Programming Interface_](https://man7.org/tlpi/) by Michael Kerrisk. A very detailed book about Linux, that covers a wide range of topics, from basic system calls to advanced topics like process groups, signals, and sockets.\n\n## [](#final-thoughts)Final Thoughts\n\nWhile books are a great tool to learn, they are not a substitute for first-hand experience. You still need to make your own mistakes and learn from them. It also helps to talk about the books you read with others, to get their perspective and to challenge your own views. Maybe you can join a book club, or read the book together with a colleague or friend.\n\nI hope this list will help you on your professional journey. If there is a book that inspired you and that you think should be on this list, please let me know in the comments below.\n\n**Author**: [Frank Rosner](https://dev.to/frosnerd)",
    "shortDescription": "My favorite books that helped me the most in my journey from being a senior software engineer to becoming a tech lead.",
    "htmlMeta": "<meta property=\"og:title\" content=\"Books That Helped Me Become a Tech Lead\">\n<meta property=\"og:description\" content=\"My favorite books that helped me the most in my journey from being a senior software engineer to becoming a tech lead.\">\n<meta name=\"keywords\" content=\"books, swe, sre, architecture, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wjPNVjAS--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6vx0cpygl5b8ab2ha6h.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Books-That-Helped-Me-Become-a-Tech-Lead",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6vx0cpygl5b8ab2ha6h.png"
  },
  {
    "title": "Complexity by Simplicity - A Deep Dive Into Kubernetes Components",
    "url": "https://dev.to/cyclops-ui/complexity-by-simplicity-a-deep-dive-into-kubernetes-components-4l59",
    "tags": [
      "devops",
      "kubernetes",
      "architecture",
      "learning"
    ],
    "published_at": 1702901544000,
    "markdownContent": "## [](#intro)Intro\n\nA couple of days ago, I held a talk about Kubernetes and its components at the college I used to go to. My mom said she liked the talk, so I turned it into a blog post.\n\nMany software engineers tend to look away from anything related to Kubernetes, even though they might use it daily. At first glance, it seems complex and like a whole new world to dive into. And yeah, it is, but in this blog post, I will go over all of the main components of a Kubernetes cluster and explain what they do in an example.\n\nBy the end of the blog post, you won't be a Kubernetes expert, but you will probably get a good idea of what to look for and how to structure the chaos that Kubernetes seems to be at first.\n\n_Pictures representing the Kubernetes architecture have been taken from the [Kubernetes website](https://kubernetes.io/docs/concepts/overview/components/)_\n\n### [](#show-us-your-support)**Show us your support 🙏🏻**\n\n[![Github Stars](https://res.cloudinary.com/practicaldev/image/fetch/s--Hi51liLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mab4sx5zugkc89ac7h4l.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--Hi51liLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mab4sx5zugkc89ac7h4l.gif)\n\nBefore we start, we would love it if you starred our repository and helped us get our tool in front of other developers. Our GitHub repo is here: [https://github.com/cyclops-ui/cyclops](https://github.com/cyclops-ui/cyclops) ⭐\n\n## [](#components)Components\n\nFirst of all, we can divide a Kubernetes cluster into two parts: **control plane** and **worker nodes**. The control plane takes care of the whole operation and controls the state of our cluster. We’ll get into what that means shortly. On the other side, our worker nodes are essentially just computers listening to what the control plane tells them to do. They are the computing power of our cluster. Any application we run in the cluster will run on those nodes.\n\nLet’s decompose that further.\n\n### [](#control-plane)Control plane\n\n[![Control plane](https://res.cloudinary.com/practicaldev/image/fetch/s--qc6R-Hxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdy560pic4ae8ilelh58.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--qc6R-Hxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdy560pic4ae8ilelh58.png)\n\nAs we said, the control plane is making sure our cluster is running as expected. It does that by communicating with the cluster user, scheduling workloads, managing cluster state and so on.\n\nThe control plane is made of four crucial components. Simple by themselves, but together, they create a complex system. These components are:\n\n*   **API**\n*   **ETCD**\n*   **Scheduler**\n*   **Controller Manager**\n\nControl plane components can be run on any machine in the cluster, but are usually run on a separate set of machines, often called **master nodes**. Those machines are not used to run any other container or application and are reserved for the Kubernetes control plane.\n\n#### [](#api)API\n\nThe Kubernetes API acts as the cluster's front-end interface, allowing users to interact with the cluster, define desired states, and perform operations such as creating, updating, and deleting resources.\n\nIt is the **only point of contact** we have with the cluster. Also, no other components are talking directly to each other, but all communication is happening **through** the API.\n\n#### [](#etcd)ETCD\n\nETCD is the API’s **database**; it's as simple as that. When you tell Kubernetes to create a deployment, it gets stored in the ETCD alongside all the other created resources.\n\nOne characteristic of ETCD is that its key-value storage is organized as a filesystem. Another great feature of ETCD is that users can **subscribe** to events and get notified about changes. For example, _let me know when a new pod gets created_.\n\n#### [](#scheduler)Scheduler\n\nAs the name suggests, the scheduler **decides which node a pod will run on**. It does that by a set of rules you can read in the [Kubernetes documentation](https://kubernetes.io/docs/home/). _This is what I meant when I said you won't be an expert, but you will know what to google :)_\n\nThe Scheduler **subscribes** to all newly created pods saved in ETCD, but it can **only** talk with the API to get this update.\n\nWhen it catches that a pod has been created, it calculates which worker node to run it on. Once it's made up its mind, **the scheduler doesn't run anything on any machine**; it just tells the API to run the pod on a particular node.\n\n#### [](#controller-manager)Controller Manager\n\nThe last component from the control plane is the controller manager. We can take it as a thermostat for our cluster. Its job is to shift the current state of the cluster to the desired state.\n\nThis means that it will **create all the needed resources** under the hood to satisfy our needs and get our applications up and running.\n\nIt runs multiple controller processes subscribed to changes on the ETCD, compiled into the same binary for easier deployment. Controller managers’ roles and what those controllers do will be defined more closely later in the blog.\n\n### [](#worker-nodes)Worker nodes\n\n[![Worker Nodes](https://res.cloudinary.com/practicaldev/image/fetch/s--kJ2vHADS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gz5ocd4ito4o0n7fjzct.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--kJ2vHADS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gz5ocd4ito4o0n7fjzct.png)\n\nNow that we have concluded what manages the whole cluster, let's dive into where our containers are running and how that is achieved.\n\nThere are 3 components running on each node in a Kubernetes cluster. Of course, you can have multiple nodes in a cluster, but each needs these three components to host your applications.\n\nThose being:\n\n*   **container runtime**\n*   **kubelet**\n*   **kube proxy**\n\n#### [](#container-runtime)Container runtime\n\nThe component that allows Kubernetes to run containers and manages the lifecycle of a container on a node is the container runtime.\n\nMultiple container runtimes are supported, like [conatinerd](https://containerd.io/), [cri-o](https://cri-o.io/), or other [CRI compliant runtimes](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md).\n\n#### [](#kubelet)Kubelet\n\nAnother component subscribed to pod events is Kubelet. Each time a pod is scheduled on a node, the Kubelet running on that node will hear that and start all defined containers. On top of that, Kubelet also performs health checks to ensure everything is running as expected.\n\n#### [](#kube-proxy)Kube proxy\n\nKubeProxy in Kubernetes manages network connectivity between pods across the cluster, handling tasks like load balancing and network routing. It ensures seamless communication among pods by maintaining network rules and translating service abstractions into actionable network policies.\n\n## [](#from-a-deployment-to-a-running-container)From a deployment to a running container\n\nNow that we have listed all of the components and their role in a Kubernetes cluster, let's tell a story on how a Kubernetes Deployment becomes a set of containers running on various machines across the cluster.\n\n### [](#pods-replicasets-and-deployments)Pods, Replicasets and Deployments\n\nJust a quick reminder on the relation of these three: Pods, Replicasets, and Deployments.\n\n[![Deployment Components](https://res.cloudinary.com/practicaldev/image/fetch/s--sKzQdKyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cs9u7fnhe3q096bkyp2l.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--sKzQdKyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cs9u7fnhe3q096bkyp2l.png)\n\nThe smallest unit we can deploy in a Kubernetes cluster is a **pod**. With it, we are going to define our containers.\n\nMost likely, we will need a couple of instances of the same application, and we can define how to replicate our pods with a **Replicaset**. It will ensure that we have the desired number of pods running by starting and terminating them.\n\nCool, now we have our application replicated, but we would like to roll out a new version of our application. We have to tear down existing Pods/Replicaset and create new ones. A Deployment will automate this process, allowing us to roll out our feature safely.\n\n## [](#the-prestige)The Prestige\n\n[![Prestige](https://res.cloudinary.com/practicaldev/image/fetch/s--B0VztplY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyxboeqedu4yvg0ceg29.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--B0VztplY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyxboeqedu4yvg0ceg29.gif)\n\nNow that we have all our terminology and touched on all Kubernetes components and their role, let's see what happens when we “apply” a Deployment to a Kubernetes cluster.\n\nLet's say that we have created a `deployment.yaml` file defining our application (you can see how to do that [here](https://imgur.com/7qKp189)) and ran `kubectl apply -f deployment.yaml`. `kubectl` will now submit our deployment definition to our cluster's **only point of contact** - the Kubernetes API.\n\nOur simple API will store our deployment in the ETCD database. Each time a Deployment object is saved into ETCD, it will let the API know that there was a change on Deployments and that it should let **everybody who is subscribed** to such an event know about it.\n\nAnd there is a component in the control plane that would like to know when a new Deployment spawns, and that's the **Controller Manager**. When it hears about a new Deployment, it will create a new Replicaset based on the Deployment configuration. To make this Replicaset, it will call the API with a create request.\n\nCreating a Replicaset is much like creating a Deployment. API will receive a Replicaset to create and store into ETCD. This will make ETCD tell the API that somebody created a Replicaset and pass that information to all subscribed components, which is **again** the Controller Manager.\n\nWhen the Controller Manager hears about the new Replicaset, it will create all the Pods defined with the Replicaset by, you guessed it, calling the API, which will store all those Pods into ETCD.\n\n[![k8s_deployment_gif](https://res.cloudinary.com/practicaldev/image/fetch/s--CBcw3QZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6d97k6rggdrbbwes7d9.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--CBcw3QZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6d97k6rggdrbbwes7d9.gif)  \n_As we said, a lot of things happened, so we decided to create a GIF that might help you understand the whole process under the hood._\n\nHere, we include the Scheduler, which is subscribed to the Pod creation event. Each time it hears about a new Pod, it decides on which node it should be run. The Scheduler is not running the Pod but **only telling the API** which node it chose for it. The API will then save that information.\n\nAnother component listening to Pod events is the Kubelet, a component running on each worker node in the Kubernetes cluster. Each time the API tells the Kubelet that the Scheduler decided to run the Pod on its node, the Kubelet **will start all the containers** defined by the Pod.\n\nFinally, we turned our configuration into an application running on a machine! It is a lengthy process with many moving parts, but this may be my favorite part.\n\nEach component takes just a tiny bit of the responsibility of deploying an application, but they solve a pretty complex problem together.\n\n## [](#final-thoughts)Final thoughts\n\nHope this article helped you get a grasp on Kubernetes components and helped you demystify the most popular orchestrator out there. We encourage you to dig around yourself because we enjoyed learning about this.\n\nOne book we recommend to learn about Kubernetes is “Kubernetes in action” by Marko Lukša. It is pretty popular and gives an excellent overview of what is going on under the hood of Kubernetes and how to use it.\n\n**Author**: [Juraj](https://dev.to/karadza)",
    "shortDescription": "Intro   A couple of days ago, I held a talk about Kubernetes and its components at the...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Complexity by Simplicity - A Deep Dive Into Kubernetes Components\">\n<meta property=\"og:description\" content=\"Intro   A couple of days ago, I held a talk about Kubernetes and its components at the...\">\n<meta name=\"keywords\" content=\"devops, kubernetes, architecture, learning, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MvAoB9za--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lqknd7zty301hc8gf0u.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Complexity-by-Simplicity-A-Deep-Dive-Into-Kubernetes-Components",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lqknd7zty301hc8gf0u.png"
  }
]