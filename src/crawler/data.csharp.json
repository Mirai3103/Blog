[
  {
    "title": "Events in C#: When and How to Implement Them",
    "url": "https://dev.to/bytehide/events-in-c-when-and-how-to-implement-them-4mcb",
    "tags": [
      "csharp",
      "dotnet",
      "programming",
      "tutorial"
    ],
    "published_at": 1703064600000,
    "markdownContent": "Welcome! You’ve probably been hearing a lot about C# events, but you’re wondering, How does it all tie together? Just sit back, because in this article, you are going to catch up on all the details about C# events and their application.\n\nIt’s like learning to play an instrument; before you start composing, you need to understand how to read the musical notes. Before diving into the advanced stuff, let’s understand the basics. Stick with me, and I promise, you’ll be writing captivating symphonies – I mean, coding in C# in no time!\n\n## [](#introduction-to-c-events)Introduction to C# Events\n\nHang on, what really is a C# event? Covert operations? Nope! In the world of C#, an event is simply a way that a class can notify other classes or objects when something of interest happens.\n\n### [](#overview-of-events-in-c)Overview of Events in C#\n\nEvents in the context of C#. Imagine you’re at a concert. The band playing is the publisher of events (C# class), and the audience (other classes or objects) is waiting for something noteworthy (an event) to happen. When the band starts playing (an event occurs), the audience reacts (responds to the event). In programming terms, events in C# provide notification when a specific action has occurred in an object.  \n\n```csharp\npublic class AlarmClock\n{\n    public event Action AlarmSounded;\n    public void Start()\n    {\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(5));\n        AlarmSounded?.Invoke();\n    }\n}\n\npublic class Person\n{\n    public void WakeUp() => Console.WriteLine(\"Waking Up!\");\n}\n\npublic class MainProgram\n{\n    public static void Main()\n    {\n        AlarmClock alarmClock = new AlarmClock();\n        Person person = new Person();\n        alarmClock.AlarmSounded += person.WakeUp;\n        alarmClock.Start();\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this code snippet, the `AlarmClock` class publishes the `AlarmSounded` event, which the `Person` class listens to. When the `AlarmSounded` event is fired after 5 seconds, the person’s wake-up method responds.\n\n## [](#role-of-event-handlers-in-c)Role of Event Handlers in C#\n\nIn a festival, event organizers handle everything, right? Similarly, in C#, event handlers handle the response to an event.\n\n### [](#what-is-an-event-handler-in-c)What is an Event Handler in C#\n\nIn C# event handling, an “event handler” is a delegate that gets called when a given event is fired. Like a listener who is waiting for their favorite song to play, the event handler is waiting for the right event to take action.  \n\n```csharp\npublic class Button\n{\n    public event EventHandler Clicked;\n    public void PressButton()\n    {\n        Clicked?.Invoke(this, EventArgs.Empty);\n    }\n}\n\npublic class User\n{\n    public void PerformAction()\n    {\n        Console.WriteLine(\"Action Performed!\");\n    }\n}\npublic class MainProgram\n{\n    public static void Main()\n    {\n        Button button = new Button();\n        User user = new User();\n        button.Clicked += user.PerformAction;\n        button.PressButton();\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn the example above, the `User` class has a method `PerformAction` that serves as an event handler. Whenever the `Button` is pressed (event happens), the user performs a particular action.\n\n## [](#implementing-events-in-c)Implementing Events in C#\n\nAh! The practical aspect of any programming language, that’s where the real fun begins, isn’t it? It’s time to swing into action and see how we can implement events in C#. Let’s roll up our sleeves and dive into the coding part!\n\n### [](#stepbystep-guide-to-implementing-events-in-c)Step-by-Step Guide to Implementing Events in C#\n\nImplementing events in C# is like taking a step-by-step journey of orchestrating when and how certain actions are responded to in your program. Remember, it’s a journey best taken one step at a time. Let’s break down the process:\n\n*   Define a delegate that matches the signature of the event handler method you want to use.\n*   Declare an event using the delegate you defined.\n*   Implement a method, within the provider class, that raises the event.\n*   Create a method in the subscriber class that will handle the event (conforms to the delegate).\n*   Subscribe the event handling method to the event.\n\nSounds like a lot? Let’s simplify this with a real-world example.\n\n#### [](#realworld-c-event-example)Real-World C# Event Example\n\nHow about we consider a traffic light system? The lights changing (events) cause cars to react (event handling) accordingly. Here is a simplified version of how this could be coded:  \n\n```csharp\n// step 1: define a delegate\npublic delegate void TrafficLightChangedHandler(string color);\n\npublic class TrafficLight\n{\n    // step 2: declare an event\n    public event TrafficLightChangedHandler TrafficLightChanged;\n    public void ChangeLight(string color)\n    {\n        // step 3: method that raises the event\n        Console.WriteLine($\"The traffic light is {color}.\");\n        TrafficLightChanged?.Invoke(color);\n    }\n}\npublic class Car\n{\n    public void ReactToLight(string lightColor)\n    {\n        // step 4: event handling method\n        if (lightColor == \"Red\")\n        {\n            Console.WriteLine(\"Car stops.\");\n        }\n        else if (lightColor == \"Green\")\n        {\n            Console.WriteLine(\"Car starts moving.\");\n        }\n    }\n}\npublic class MainProgram\n{\n    public static void Main(string[] args)\n    {\n        TrafficLight light = new TrafficLight();\n        Car car = new Car();\n        // step 5: subscribe to the event\n        light.TrafficLightChanged += car.ReactToLight;\n        light.ChangeLight(\"Green\");\n        light.ChangeLight(\"Red\");\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn the code above, when the traffic light color changes, the event `TrafficLightChanged` is fired and causes the car to react. If the light is green, the car moves; if it’s red, the car stops.\n\nLet’s return to the email sending example. In addition to sending the email, we may also need to acknowledge the recipient that the email is being sent.  \n\n```csharp\npublic class Recipient\n{\n    public void OnAcknowledge(string recipient)\n    {\n        Console.WriteLine($\"Email is being sent to {recipient}\");\n    }\n}\npublic class MainProgram\n{\n    public static void Main(string[] args)\n    {\n        EmailAcknowledge emailAck = new EmailAcknowledge();\n        Recipient recipient = new Recipient();\n        emailAck.AcknowledgeSending += recipient.OnAcknowledge;\n        emailAck.Acknowledge(\"Bob\");\n        emailAck.Acknowledge(\"Alice\");\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn the newly introduced code snippet, when the `Acknowledge` method in the `EmailAcknowledge` class is called, it raises the event `AcknowledgeSending`, which the `Recipient` class is listening to. As soon as this event is raised, the `OnAcknowledge` method in `Recipient` class gets called and the name of the recipient is printed.\n\n## [](#working-with-eventargs-in-c)Working with EventArgs in C#\n\nWhew! You’ve made it far. Next stop is `EventArgs` town. Ready?\n\n### [](#understanding-c-event-args)Understanding C# Event Args\n\nIn C#, ‘EventArgs’ is a class that provides data related to an event. Think of EventArgs as the courier carrying the message that an event has occurred.  \n\n```csharp\npublic class SongPlayedEventArgs : EventArgs\n{\n    public string PlayedSong { get; set; }\n}\n\npublic class MusicPlayer\n{\n    public event EventHandler<SongPlayedEventArgs> SongPlayed;\n    public void PlaySong(string song)\n    {\n        SongPlayed?.Invoke(this, new SongPlayedEventArgs() { PlayedSong = song });\n    }\n}\n\npublic class Listener\n{\n    public void OnSongPlayed(object sender, SongPlayedEventArgs e)\n    {\n        Console.WriteLine($\"'{e.PlayedSong}' has been played.\");\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, `SongPlayedEventArgs` carries the name of the song that’s been played. `Listener` uses this custom data (`PlayedSong`) to respond to the `SongPlayed` event.\n\n## [](#advanced-concepts-in-c-eventhandling)Advanced Concepts in C# Event-Handling\n\nTake a deep breath, grab a coffee if needed, because we’re about to delve deeper into the abyss of C# events. Just like building a towering Lego skyscraper, it’s all about understanding the intricacies and techniques to assemble the blocks effectively.\n\n### [](#safe-event-invocation)Safe Event Invocation\n\nOne of the essential aspects of event handling in C# is to always ensure safe event invocation. Listener classes might unsubscribe to an event at any given point in time. Invoking an event without any subscribed listeners could lead to a null reference [exception](https://www.bytehide.com/blog/5-good-practices-for-error-handling-in-c) – and trust me, we don’t like those, do we?\n\nHere’s how to safely invoke events:  \n\n```csharp\npublic class Publisher\n{\n    public event EventHandler<EventArgs> OnPublish;\n    public void Publish()\n    {\n        OnPublish?.Invoke(this, EventArgs.Empty);\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe `?.` syntax is C#’s shortcut for null checking before invoking the event handlers, saving us from possible null reference exceptions. It’s as though you’re checking if the coffee machine is indeed present before pressing the brew button.\n\n### [](#passing-data-using-custom-eventargs)Passing Data Using Custom EventArgs\n\nIn many scenarios, we need to pass some data along with our events. That’s where custom EventArgs come into the picture.\n\nLet’s suppose you’re building an app for a library which fires an event whenever a new book arrives.  \n\n```csharp\npublic class NewBookEventArgs : EventArgs\n{\n    public string Title { get; set; }\n    public string Author { get; set; }\n}\n\npublic class Library\n{\n    public event EventHandler<NewBookEventArgs> OnNewBookArrived;\n    public void AddBook(string title, string author)\n    {\n        OnNewBookArrived?.Invoke(this, new NewBookEventArgs { Title = title, Author = author });\n    }\n}\n\npublic class Member\n{\n    public void OnNewBookArrived(object sender, NewBookEventArgs e)\n    {\n        Console.WriteLine($\"New book arrived! Title: {e.Title}, Author: {e.Author}\");\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere, we created a `NewBookEventArgs` class that inherits from `EventArgs` and added two properties: `Title` and `Author`. We fire the event by creating a new instance of `NewBookEventArgs` and passing it along with the event invocation.\n\nThis way, event handlers (like `OnNewBookArrived` from the `Member` class) can access this data and act accordingly.\n\n### [](#unsubscribing-from-events)Unsubscribing from Events\n\nHere’s the thing: every time a class subscribes to an event, it forms a strong reference with the event source. This reference can stop the garbage collector from reclaiming the memory, leading to potential memory leaks (aka, the silent resource murderers!).\n\nJust as you would turn off the lights before exiting a room or unsubscribe from an annoying newsletter in your inbox, remember to unsubscribe from events when they are no longer necessary.  \n\n```csharp\npublic class Publisher\n{\n    public event Action OnPublish;\n}\n\npublic class Subscriber\n{\n    public void OnPublishing()\n    {\n        Console.WriteLine(\"Something has been published!\");\n    }\n    public void Register(Publisher publisher)\n    {\n        publisher.OnPublish += OnPublishing;\n    }\n    public void Unregister(Publisher publisher)\n    {\n        publisher.OnPublish -= OnPublishing;\n    }\n}\n\npublic static class Program\n{\n    public static void Main()\n    {\n        Publisher publisher = new Publisher();\n        Subscriber subscriber = new Subscriber();\n        subscriber.Register(publisher);  // Subscribing to the event\n        publisher.OnPublish?.Invoke();  \n        subscriber.Unregister(publisher); // Unsubscribing from the event\n        publisher.OnPublish?.Invoke(); \n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe `Register` and `Unregister` methods handle the subscription and unsubscription from the `publisher.OnPublish` event. Simple enough, right? Yes, it’s like you’re giving your consent to receive those marketing emails. And when you decide you’ve had enough? Simply unsubscribe!\n\n## [](#conclusion)Conclusion\n\n### [](#events-and-the-future-of-c-programming)Events and the Future of C# Programming\n\nWow, quite a journey, right? Have events become your new best friends? They should, as encapsulation of behaviours into events streamlines your code, makes it cleaner, and more efficient. It might seem like a challenge now, but the more you meditate on this knowledge, the easier it will be to grasp its essence.\n\nSo, go ahead, experiment with some code. Remember, in programming, just as in life, practice makes perfect! Happy coding, folks!\n\n**Author**: [ByteHide](https://dev.to/bytehide)",
    "shortDescription": "Welcome! You’ve probably been hearing a lot about C# events, but you’re wondering, How does it all...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Events in C#: When and How to Implement Them\">\n<meta property=\"og:description\" content=\"Welcome! You’ve probably been hearing a lot about C# events, but you’re wondering, How does it all...\">\n<meta name=\"keywords\" content=\"csharp, dotnet, programming, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Peqx1_CE--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2g4sg4joty4kolc5xhg.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Events-in-C:-When-and-How-to-Implement-Them",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2g4sg4joty4kolc5xhg.png"
  },
  {
    "title": "Choosing Between Controllers and Minimal API for .NET APIs",
    "url": "https://dev.to/michaeljolley/choosing-between-controllers-and-minimal-api-for-net-apis-1pf9",
    "tags": [
      "csharp",
      "dotnet"
    ],
    "published_at": 1703086326000,
    "markdownContent": "> This post has been included in the 2023 edition of [C# Advent](https://csadvent.christmas/). Be sure to follow [@CsAdvent](https://twitter.com/CsAdvent) on Twitter (X) and watch the [#csadvent](https://twitter.com/search?q=%23csadvent&src=typed_query&f=live) hashtag for more C# goodness.\n\nASP.NET was first released in January 2002 and .NET developers everywhere started learning WebForms. It felt like an easy step to the web for WinForm developers, but it abstracted much of how the internet works. As a result, .NET developers didn't think about things like HTTP verbs or payload size.\n\nMany of those developers, myself included, got a little \"closer to the metal\" when Microsoft officially released ASP.NET MVC in early 2009. My mind really enjoyed the MVC pattern for building web applications & APIs. Though there have been several improvements to the framework since, developers who have left the .NET world will still feel familiar with the conventions of the latest iteration.\n\nThat said, the past several years have seen an explosion of development shifting to the web and APIs are popping up everywhere. While .NET developers were previously limited to MVC, the introduction of Minimal API and other non-MS .NET API frameworks is providing them with a plethora of options.\n\nLet's review a few of those options to help you choose the best option for your API needs.\n\n> **A quick note about the code snippets below:** These snippets do not contain all the code needed to run the APIs. I've purposely not shown code related to Entity Framework DbContexts or POCO classes. They do include the code that ASP.NET uses to build the `/todoitems` routes for retrieving all and one `ToDoItem`.\n\n## [](#controllers)Controllers\n\nControllers have been the \"bread and butter\" of .NET API building for a long time. Their structure is familiar to all .NET developers; even those that are just now working on web-based projects.  \n\n```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace TodoApi.Controllers;\n\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class TodoItemsController : ControllerBase\n{\n    private readonly TodoContext _context;\n\n    public TodoItemsController(TodoContext context)\n    {\n        _context = context;\n    }\n\n    // GET: api/TodoItems\n    [HttpGet]\n    public async Task<ActionResult<IEnumerable<TodoItemDTO>>> GetTodoItems()\n    {\n        return await _context.TodoItems\n            .Select(x => ItemToDTO(x))\n            .ToListAsync();\n    }\n\n    // GET: api/TodoItems/5\n    [HttpGet(\"{id}\")]\n    public async Task<ActionResult<TodoItemDTO>> GetTodoItem(long id)\n    {\n        var todoItem = await _context.TodoItems.FindAsync(id);\n\n        if (todoItem == null)\n        {\n            return NotFound();\n        }\n\n        return ItemToDTO(todoItem);\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAdding attributes to properties, methods, and classes makes it relatively painless to add support for routing, authentication/authorization, or building Swagger and OpenAPI documentation.\n\nIf you're building an API that requires Swagger or OpenAI documentation, one huge benefit is support for reading code comments into that documentation. This makes it super easy for documentation to become part of the product itself.\n\nOf course, your scenario is rarely as basic as the example above and unfortunately, most Controller-based API examples use the pattern of injecting an Entity Framework context and manipulating it within the endpoint method. For more complex applications, you'll probably be injecting your own services with business logic customized to your needs.\n\nOne \"con\" of the approach of Controller-based APIs, is that dependency injection occurs at the controller level. While this does mean your service, DbContext, etc. are available to all methods within the controller, it also means that the application may be spinning up resources that your particular web request may not need. However, that overhead is usually one of the last places you need to start optimizing.\n\nAn additional benefit of Controller-based APIs is the built-in support for generating Swagger and OpenAPI documentation based on your code comments and class attributes.\n\n## [](#minimal-api)Minimal API\n\nMinimal API is a newer approach to building APIs with ASP.NET Core and its fluent syntax is very appealing to developers coming from the JavaScript and Python worlds. In fact, after spending the past few years building applications with TypeScript, I found Minimal API a much simpler path to onboard to .NET APIs.\n\nHere is the same two API endpoints shown above, but written using Minimal API:  \n\n```csharp\nusing Microsoft.EntityFrameworkCore;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddDbContext<TodoDb>(opt => opt.UseInMemoryDatabase(\"TodoList\"));\nbuilder.Services.AddDatabaseDeveloperPageExceptionFilter();\nvar app = builder.Build();\n\nvar todoItems = app.MapGroup(\"/todoitems\");\n\ntodoItems.MapGet(\"/\", async (TodoDb db) =>\n    await db.Todos.ToListAsync());\n\ntodoItems.MapGet(\"/{id}\", async (int id, TodoDb db) =>\n    await db.Todos.FindAsync(id)\n        is Todo todo\n            ? Results.Ok(todo)\n            : Results.NotFound());\n\napp.Run();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nI'm sure you immediately notice the conciseness of Minimal API. One benefit to using Minimal API is the granularity of control over the construction of your endpoints. While both of the endpoints have a `ToDoDb` DBContext injected, you can probably imagine a world where different services are provided to different endpoints.\n\nAs for documentation, Minimal API does support Swagger and OpenAPI documentation generation, but the process for documenting endpoints is more invasive than the Controller-based method. For instance, to modify the `/` route above to include a summary and description of the endpoint, you'd need to use the `WithOpenApi` fluent method as shown below.  \n\n```csharp\ntodoItems.MapGet(\"/\", async (TodoDb db) =>\n        await db.Todos.ToListAsync())\n    .WithOpenApi(operation => new(operation)\n    {\n        Summary = \"This is a summary\",\n        Description = \"This is a description\"\n    });\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAlso, if you're not returning [TypedResults](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.typedresults?view=aspnetcore-8.0), you'll need to document the response types of your endpoint. Here's an example:  \n\n```csharp\ntodoItems.MapGet(\"/\", async (TodoDb db) =>\n        await db.Todos.ToListAsync())\n    .Produces<IList<Todo>>();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#fastendpoints)FastEndpoints\n\n**Bonus Time!** In addition to the Microsoft-supported methods above, many community frameworks exist for building APIs with .NET.  \n[FastEndpoints](https://fast-endpoints.com/) is an option I found recently that seems very promising. With performance benchmarks that put them on par with Minimal API, they are firmly ahead of Controller-based APIs.\n\nAlso like Minimal API, FastEndpoints uses a fluent-based approach to configuration. However, one major difference is found in how endpoints are created. While the Minimal API framework expects many endpoints to exist within a class and be organized within a `MapGroup`, the FastEndpoints convention expects each endpoint to live within its own class.\n\nThose `Endpoint` classes also define the request and response signatures via DTO classes. Using FastEndpoints, our two endpoints would look like the below example:  \n\n```csharp\npublic class AllToDoEndpoint : EndpointWithoutRequest<IEnumerable<TodoItemDTO>>\n{\n    public TodoContext _context;\n\n    public override void Configure()\n    {\n        Get(\"/api/todoitems\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(MyRequest req, CancellationToken ct)\n    {\n        var todoItems = await _context.Todos.ToListAsync();\n        await SendAsync(todoItems);\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n```csharp\npublic class GetToDoEndpoint : Endpoint<IdRequest, \n                                        Results<Ok<TodoItemDTO>, \n                                                NotFound>>\n{\n    public TodoContext _context;\n\n    public override void Configure()\n    {\n        Get(\"/api/todoitems/{Id}\");\n        AllowAnonymous();\n    }\n\n    public override async Task<Results<Ok<TodoItemDTO>, NotFound>> ExecuteAsync(\n        IdRequest req, CancellationToken ct)\n    {\n        var todoItem = await _context.Todos.FindAsync(req.Id)\n\n        if (todoItem is null)\n        {\n            return TypedResults.NotFound();\n        }\n\n        return TypedResults.Ok(todoItem);\n    }\n}\n\npublic class IdRequest\n{\n    public int Id { get; set; }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nFor Swagger & OpenAPI documentation, you'll use fluent methods within the endpoints `Configure` method.  \n\n```csharp\npublic override void Configure()\n{\n    Get(\"/api/todoitems/{Id}\");\n    AllowAnonymous();\n    Description(b => b\n        .Produces<TodoItemDTO>(200, \"application/json+custom\")\n        .ProducesProblemDetails(404, \"application/json+problem\"); //if using RFC errors \n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nOne big bonus that FastEndpoints provides is a large collection of supported features, including model binding, rate limiting, caching, pre/post processors, and more.\n\n## [](#which-is-right-for-you)Which is Right for You?\n\nIf you have a background in JavaScript, Python, or Functional programming, Minimal API will feel more natural to you. But if you've spent a lot of time using .NET for the web or WinForms, you'll likely find Controllers more accessible.\n\nAnother point of consideration is documentation. While it's possible to document your API via Swagger or OpenAPI with all three, unless you enjoy documenting your endpoints using fluent methods, you'll likely find writing Controller-based APIs less cumbersome to manage.\n\nIn the end, all are valid and welcome additions to the .NET ecosystem. You truly can't go wrong with any of them and I'd recommend building with all three to find what works best with your existing application patterns and processes.\n\n**Author**: [Michael Jolley](https://dev.to/michaeljolley)",
    "shortDescription": "Reviewing the pros & cons of building .NET APIs with controllers, Minimal API or FastEndpoints",
    "htmlMeta": "<meta property=\"og:title\" content=\"Choosing Between Controllers and Minimal API for .NET APIs\">\n<meta property=\"og:description\" content=\"Reviewing the pros &amp; cons of building .NET APIs with controllers, Minimal API or FastEndpoints\">\n<meta name=\"keywords\" content=\"csharp, dotnet, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MFYZtrLp--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/dk3rdh3yo/image/upload/w_526%2Cdpr_auto%2Cf_auto/v1702771618/blog/choosing-between-dotnet-controllers-and-minimal-apis/0_3_fq7ufl.webp\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Choosing-Between-Controllers-and-Minimal-API-for-.NET-APIs",
    "displayImage": "https://res.cloudinary.com/dk3rdh3yo/image/upload/w_526%2Cdpr_auto%2Cf_auto/v1702771618/blog/choosing-between-dotnet-controllers-and-minimal-apis/0_3_fq7ufl.webp"
  },
  {
    "title": "Action in C#: Tutorial",
    "url": "https://dev.to/bytehide/action-in-c-tutorial-3o89",
    "tags": [
      "csharp",
      "dotnet",
      "programming",
      "tutorial"
    ],
    "published_at": 1703669400000,
    "markdownContent": "## [](#introduction-to-action-delegate-in-c)Introduction to Action Delegate in C#\n\nHey there, C# aficionados! Prepare yourself to dive into world of Action Delegates; the cornerstone of asynchronous programming in C#. So, buckle up, ’cause we’ve got some serious code crunching to do.\n\n### [](#the-role-of-the-c-action-delegate)The role of the C# action delegate\n\nAction delegate in C# is a pre-defined, generic delegate. Think of it as the chocolate chip cookie recipe your grandma gave you. It’s tried, it’s tested, it exists beforehand. And just like how you could use that recipe, but substitute the chocolate chips with macadamia nuts or cranberries to have different cookie flavors, similarly, with an `Action` type, you could define your own method that matches the signature, and pass it as a parameter! Pretty sweet, right?\n\nLet’s cook up some C# `Action` real quick.  \n\n```csharp\nAction<string> printActionDel = delegate(string message)\n{\n    Console.WriteLine(message);\n};\nprintActionDel(\"Hello, World!\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we define an action delegate `printActionDel` that takes a string as a parameter and prints it to the console. Simple, yet powerful!\n\n### [](#defining-what-is-action-in-c)Defining what is action in C#\n\nImagine you know a magic trick that can transform things, like turning water into coffee (wouldn’t that be swell!). To perform this trick, you would need to invoke a specific spell. Well, in C#, an `Action` is that magic trick. It’s a construct, or, more formally, a delegate, that knows how to perform an action, maybe on some data or a variable. Typically, it’s used to encapsulate a method that doesn’t return a value (a void method).\n\n## [](#a-comprehensive-look-at-action)A Comprehensive Look at Action\n\nThings start to get real interesting when you drive deep into the core of Action. How does function compare to action? What’s the difference? Let’s find out.\n\n### [](#c-action-example-a-detailed-guide)C# action example: A detailed guide\n\nIf you think about coding as crafting a spell, Action is one of your most potent charms! To illustrate, consider a mundane task of greeting someone. Here’s your magic trick!  \n\n```csharp\nAction<string> greetAction = (name) => \n{\n    Console.WriteLine($\"Hello, {name}!\");\n};\ngreetAction(\"C# Developer\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nBoy, I wish wizards could code their spells this way.\n\n### [](#comparing-c-function-vs-action-key-distinctions)Comparing C# Function vs Action: Key distinctions\n\nA common question you might have is – what’s the difference between a function and action in C#? Aren’t they interchangeable? Well, think of a function as a restaurant where you order food and expect something in return.\n\nAn action, on the other hand, is more like a fast-food joint. You order food, but don’t really expect to wait or get anything else in return. Basically, Actions are just methods but with no return value. An underappreciated difference, but oh so important!\n\n## [](#the-use-of-void-function-in-c)The Use of Void Function in C#\n\nNow onto some C# wizardry where we return… absolutely nothing!\n\n### [](#exploring-the-concept-of-void-function-matlab)Exploring the concept of void function matlab\n\nIn languages like MATLAB, the concept of a void function is quite prevalent. But what does it mean? Check this out:  \n\n```csharp\npublic void SayHello(string name)\n{\n    Console.WriteLine($\"Hello, {name}!\");\n}\n\nSayHello(\"codemancer\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, SayHello is a void function (i.e., it doesn’t return anything). Yet it performs an important spell – greeting a person with their name. Neat, right?\n\n### [](#example-usages-of-void-function-in-c)Example usages of void function in C#\n\nReal-life coding is not just about casting the right spells, but choosing the correct charms for each situation. Void functions, or as C# would say, Action delegates, are brilliant for creating neat, modular code.  \n\n```csharp\nAction sayGoodbye = (name) =><br>{<br>Console.WriteLine($\"Goodbye, {name}!\");<br>};\nsayGoodbye(\"fellow coder\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this block, `sayGoodbye` is an Action that performs a farewell. Underrated, yet efficient!\n\n## [](#detailed-case-studies)Detailed Case Studies\n\nDelving into the world of C# `Action` requires a keen eye for real-world applications. Remember, anyone can learn to code, but adapting code to solve real challenges, that’s what separates the experts from the rest. Let’s see how `Action` delegates can help us.\n\n### [](#case-study-utilizing-c-action-delegate-in-realworld-applications)Case study: Utilizing C# action delegate in real-world applications\n\nPicture this, you’re working on an RPG game that is packed with strategies, ambushes and cool player stats. One small yet essential requirement of this project is to display the statistics of a player as soon as they click on the ‘Stats’ button.\n\nConventionally, you would have the Button Click event procedure directly call a method to update the stats. But what if you could separate the button control code and display code, creating a more flexible structure and easing future modifications? Enter `Action` delegates, our superheroes!  \n\n```csharp\n// The stats update method\nvoid UpdateStats(string player)\n{\n    // Code to fetch and display stats\n    Console.WriteLine($\"{player}'s stats have been updated.\");\n}\n\n// The button click event\nvoid OnClick(string player, Action<string> action)\n{\n    // delegate the stats update \n    action(player);\n}\n\n// The Action delegate\nAction<string> actionDel = UpdateStats;\n\n// Suppose the player clicks the button\nOnClick(\"PlayerA\", actionDel);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this piece of code, `UpdateStats` method fetches and displays player stats (let’s just assume it does!). Instead of calling this method directly from the button click event, we wrap it within an `Action` delegate `actionDel`.\n\nThis delegate is then passed as a parameter to the `OnClick` method, providing a neat decoupling between the button control and stats display logic. It’s like having your very own team of superheroes, where each member does a specific task, but together they make the world a better place!\n\n### [](#case-study-employing-void-function-matlab-in-diverse-scenarios)Case study: Employing void function matlab in diverse scenarios\n\nLet’s switch gears to something even tougher – scientific data processing. If you’re dealing with any form of raw data, you’re bound to dabble in cleaning, normalizing, or even smoothing data points. This is where `Action` delegates or ‘void’ functions can come to your rescue.  \n\n```csharp\n// Method to normalize data\nvoid NormalizeData(double[] data)\n{\n    // Normalization logic, for now just print\n    Console.WriteLine($\"Data {data} has been normalized.\");\n}\n\n// Method to remove outliers\nvoid RemoveOutliers(double[] data)\n{\n    // Outlier removal logic, for now just print\n    Console.WriteLine($\"Outliers in data {data} have been removed.\");\n}\n\n// The Action delegate for normalization\nAction<double[]> actionNormalize = NormalizeData;\n\n// The Action delegate for removing outliers\nAction<double[]> actionRemoveOutliers = RemoveOutliers;\n\n// Data processing\nvoid ProcessData(double[] data, Action<double[]> action)\n{\n    action(data);\n}\n// Sample data\ndouble[] rawData = {5.6, 8.1, 9.0, 7.5};\n// Utilizing Action delegates\nProcessData(rawData, actionNormalize);\nProcessData(rawData, actionRemoveOutliers);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, `NormalizeData` and `RemoveOutliers` are two extreme yet frequent data processing tasks. Instead of invoking these methods directly, we encapsulate them within respective `action` delegates. These delegates are then piped into `ProcessData`, where they perform the specific operations on the data. This modular and reusable approach makes data processing tend to bend towards C# Actions\n\n## [](#wrapping-up-action-in-c)Wrapping Up Action in C#\n\nYou’ve now learned the magic of `Action` in C#, hopefully enjoyed the journey, and ideally found a couple of spots to chuckle along the way! But remember, wizardry goes hand in hand with continuous practice. So, the question is, will you swish and flick and…code these spells yourself? Or, would you rather watch Stagnant Stu, your imaginary coding nemesis, leaving you behind in his magical coding dust?\n\nTo help you cast your spells, here are a few topics you might want to explore further:\n\n*   `Action<T>` and `Func<T>`\n*   Multicast Delegates\n*   Asynchronous delegates\n\nHappy coding, sorcerers!\n\n**Author**: [ByteHide](https://dev.to/bytehide)",
    "shortDescription": "Introduction to Action Delegate in C#   Hey there, C# aficionados! Prepare yourself to dive...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Action in C#: Tutorial\">\n<meta property=\"og:description\" content=\"Introduction to Action Delegate in C#   Hey there, C# aficionados! Prepare yourself to dive...\">\n<meta name=\"keywords\" content=\"csharp, dotnet, programming, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lYeEJN6D--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lvztmj06jfixogaikcr.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Action-in-C:-Tutorial",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lvztmj06jfixogaikcr.png"
  },
  {
    "title": "HashMap in C#: Detailed Guide",
    "url": "https://dev.to/bytehide/hashmap-in-c-detailed-guide-1p9p",
    "tags": [
      "csharp",
      "dotnet",
      "programming",
      "tutorial"
    ],
    "published_at": 1703237400000,
    "markdownContent": "## [](#understanding-hashmap-in-c)Understanding HashMap in C#\n\nHey there, code brewer! Today we’re going to sift through one of the most useful data structures in coding – the HashMap. Hold on to your hats, this is going to be a fun and enlightening ride!\n\n### [](#what-is-a-hashmap)What is a HashMap?\n\nA HashMap, simply put, is a data structure that implements an associative [array](https://www.bytehide.com/blog/array-csharp), a structure that can map keys to values. A HashMap uses a `hash function` to compute an index into an array of buckets or slots. Now, why would you need this, you ask? Imagine having a huge collection of data and you need a method to save and fetch data efficiently. That’s where our buddy HashMap comes in!  \n\n```csharp\n// creating a HashMap using Dictionary in C#\nDictionary<string, int> hashMap = new Dictionary<string, int>();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere, we’re using the native `Dictionary` class of C# to create our HashMap. Keys are string type and values are of int type.\n\n### [](#the-concept-behind-hashmaps)The Concept Behind HashMaps\n\nOne important thing to know about HashMaps is that they store data in key-value pairs, just like a physical map with places and their coordinates. They implement the `[ICollection](https://www.bytehide.com/blog/icollection-csharp)` interface, which makes them part of the C# Collections. Now, isn’t that neat?\n\n### [](#the-fundamental-units-of-c-hashmap)The Fundamental Units of C# HashMap\n\nThe HashMap’s brain is divided into two main parts: Key and Value. Every entry in a HashMap has these two. Think of a HashMap like an alphabet book – the Key is the alphabet letter, and the Value is the corresponding picture. That’s how we know A stands for Apple!  \n\n```csharp\n// Adding keys and values to the HashMap\nhashMap.Add(\"Jack\", 25);\nhashMap.Add(\"Jill\", 23);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe’ve added “Jack” and “Jill” as keys, and 25 and 23 as their corresponding values.\n\n## [](#c-compared-to-other-languages-the-hashmap-case)C# Compared to Other Languages: The HashMap Case\n\nAs a coder, it’s natural to wonder how the data structures we’re dealing with fare when compared across different languages. So, let’s delve into the distinctive traits of our current superhero, the HashMap, as it functions in C#, and see how it stands against its peers in other languages.\n\n### [](#hashmap-implementation-in-other-languages)HashMap Implementation in Other Languages\n\nAlmost every popular language supports some kind of HashMap implementation and despite their differences in syntax or naming conventions required for their implementation, the fundamental principle remains the same: Store keys and values for efficient retrieval later.\n\nFor instance, let’s consider Python and Java, two languages renowned for their elegance and usability.\n\nIn Python, Python’s built-in data type dictionary serves as a HashMap.  \n\n```python\n# Python\nmy_dict = {\"Apple\": 1, \"Orange\": 2}\nprint(my_dict['Apple'])  # Outputs: 1\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nOn the flip side, it’s Java that goes the conventional route by naming its implementation plainly as a ‘HashMap’.  \n\n```java\n// Java\nHashMap<String, Integer> map = new HashMap<>();\nmap.put(\"Apple\", 1);\nSystem.out.println(map.get(\"Apple\"));  // Outputs: 1\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nComparatively speaking, you can see similarities in how HashMaps are used despite language-specific nuances. The key principles of speedy storage and retrieval remain commonplace, amicably setting a universal standard.\n\n### [](#features-of-hashmap-csharp)Features of Hashmap CSharp\n\nIn C#, HashMaps are not directly christened as ‘HashMap’, rather they dawn the guise of a ‘Dictionary’, hinging on the functionality provided by the `Dictionary<TKey,TValue>` class.  \n\n```csharp\nDictionary<string, int> myHashMap = new Dictionary<string, int>();\nmyHashMap.Add(\"Apple\", 1);\nConsole.WriteLine(myHashMap[\"Apple\"]);  // Outputs: 1\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe underlying logic that drives these Dictionaries is very much a typical HashMap mechanism. But moving beyond the HashMap functionalities, C# offers a handful of additional features.\n\nOne such feature is that C# HashMaps implement the ICollection interface. They also offer vast usability with methods that operate seamlessly on these HashMaps, such as `Add()`, `Remove()`, and `TryGetValue()`, making the Hashmap a dynamic tool in your coding toolbox.  \n\n```csharp\n// adding key-value pairs\nmyHashMap.Add(\"Banana\", 2);\n\n// removing key-value pairs\nmyHashMap.Remove(\"Apple\");\n// trying to get value\nint value;\nif (myHashMap.TryGetValue(\"Apple\", out value))\n{\n    Console.WriteLine(value);\n}\nelse {\n    Console.WriteLine(\"Key not found.\");\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn real-life applications, you won’t just be adding or removing data. You might have to handle [exceptions](https://www.bytehide.com/blog/5-good-practices-for-error-handling-in-c), especially when dealing with large sets of data. As seen, the `TryGetValue` function is designed to safely fetch values from your HashMap, even if the supplied key doesn’t exist.\n\nC# also includes [LINQ](https://www.bytehide.com/blog/linq-csharp) (Language Integrated Query) that provides robust querying capabilities on HashMaps enabling us to craft powerful one-line solutions for efficiency.  \n\n```csharp\n// getting count of elements\nvar count = myHashMap.Count();\n\n// finding key-value pair with maximum value\nvar maxPair = myHashMap.Aggregate((l, r) => l.Value > r.Value ? l : r);\nConsole.WriteLine(maxPair.Key);  // Outputs key with the maximum value\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#implementing-a-hashmap-in-c)Implementing a HashMap in C#\n\nReady to roll up your sleeves and get hands-on with implementing a HashMap?\n\n### [](#hashmap-creation-in-c)HashMap Creation in C#\n\nCreating a HashMap with C# couldn’t be easier. We start by declaring our HashMap.  \n\n```csharp\nDictionary<string, int> myHashMap = new Dictionary<string, int>();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn true blue C# style, we declare `Dictionary<key_type, value_type>` and initialize it with `new_()`.\n\n### [](#adding-items-to-a-c-hashmap)Adding Items to a C# Hashmap\n\nNow that we have our HashMap in place let’s fill it with some data.  \n\n```csharp\nmyHashMap.Add(\"Tom\", 33);\nmyHashMap.Add(\"Jerry\", 22);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd voila! You just added items to your HashMap.\n\n### [](#retrieving-items-from-a-hashmap-csharp)Retrieving Items from a Hashmap Csharp\n\nOnce we’ve stored the data, fetching it is a no-brainer.  \n\n```csharp\nint age = myHashMap[\"Tom\"];\nConsole.WriteLine(age);  // Outputs: 33\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nJust use the key and the HashMap hands over the corresponding value. Just like magic!\n\n## [](#hashmaps-in-real-world-applications)HashMaps in Real World Applications\n\nAlright, let’s bring this down to earth a bit. How are HashMaps applied in the real world? You may be surprised to discover that they’re not just for academic exercises or competition coding. From cache-based applications to web server sessions, HashMaps play a critical role in several everyday operations.\n\n### [](#case-study-utilizing-hashmap-in-c)Case Study: Utilizing Hashmap in C#\n\n#### [](#cachebased-applications)Cache-Based Applications\n\nHashMaps are a perfect fit for cache-based applications. Let’s imagine you’re developing a weather app that retrieves weather data from a remote API. If you call this API every single time a client requests weather data, it’ll slow down the overall performance and utilise unnecessary bandwidth.\n\nThis is where the HashMap’s eager, efficient nature comes to the rescue. By storing recently fetched weather data in a HashMap, subsequent requests can be loaded from cache, thus improving the efficiency massively.  \n\n```csharp\n// Create a HashMap to act as cache\nDictionary<string, WeatherData> weatherCache = new Dictionary<string, WeatherData>();\n// Fetch data from API\nWeatherData fetchedData = FetchWeatherData(API, \"New_York\");\n// Store in cache\nweatherCache.Add(\"New_York\", fetchedData);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this pseudocode, a HashMap acts as a cache for storing the recently fetched weather data.\n\n#### [](#web-server-sessions)Web Server Sessions\n\nSessions are very common in web server applications. In a typical session, each user is assigned a unique id, and their session data is stored on the server. This could be user preferences, temporary data, or any valuable info which needs persistence over multiple visits. HashMaps fit in perfectly in this scenario, storing each session id (key) along with the corresponding session object (value).  \n\n```csharp\n// Session data HashMap\nDictionary<string, SessionObject> sessionData = new Dictionary<string, SessionObject>();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this pseudo-code example, we see how each user’s session data can be stored in a HashMap.\n\n## [](#advanced-topics-in-hashmap-csharp)Advanced Topics in HashMap Csharp\n\nEquipped with the basics? It’s time to explore some high-level HashMap concepts.\n\n### [](#maintaining-order-in-a-c-hashmap-is-it-possible)Maintaining Order in a C# Hashmap: Is it Possible?\n\nAs we’ve discussed, Hashmaps are not order-specific. The ordering of input may not reflect on the output or any iteration over the HashMap. But what if your application demands maintaining some specific order?\n\nC# comes with a solution – the `SortedDictionary`. It’s a subclass of Dictionary class that maintains elements in the sorted order of keys.  \n\n```csharp\nSortedDictionary<string, int> sortedHashMap = new SortedDictionary<string, int>()\n{\n    {\"Apple\", 1},\n    {\"Orange\", 2},\n    {\"Banana\", 3}\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the keys will consistently be in the order “Apple”, “Banana”, “Orange”.\n\n### [](#dealing-with-collisions-in-a-hashmap)Dealing with Collisions in a HashMap\n\nThe day-to-day life of a HashMap isn’t always collision-less. Sometimes two different keys can end up with the same hash. This scenario is termed as a “collision”. The standard method to deal with this in C# is `chaining`.\n\nWhen a collision happens, chaining stores multiple values (each associated with a different original key) into the same slot. Behind the scenes, the structure becomes a HashMap of linked [lists](https://www.bytehide.com/blog/list-csharp)!  \n\n```csharp\nhashmap[\"key1\"] = new LinkedList();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#performance-benchmark-hashmap-csharp)Performance Benchmark: HashMap Csharp\n\nBeing performance-oriented is the key mantra of a HashMap! They provide a constant time performance, noted as O(1), for the basic operations `get` and `put`, which is fantastic in an average case scenario.\n\nDoubt it? Run a performance test between a List and a HashMap when you look for specific elements. You’ll see how our HashMap buddy leaves a List way behind in such cases. Always remember, if you must search among a load of elements, the HashMap may be your go-to!\n\nThis ideal performance is a reason behind HashMap’s under-the-hood use in many high-performance applications. But remember, understanding the specific needs of your application is a must before zeroing in on the right data structure.  \n\n```csharp\nStopwatch stopWatch = new Stopwatch();\nstopWatch.Start();\nint value = hashmap[\"desired_key\"];\nstopWatch.Stop();\nConsole.WriteLine(\"Time taken by HashMap: \" + stopWatch.ElapsedMilliseconds);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWith this stopwatch test, one can measure the time taken by a HashMap to retrieve an element.\n\n## [](#best-practices-using-hashmap-in-c)Best Practices Using Hashmap in C#\n\nLet’s dig deeper and explore a few essential practices that’ll help you optimize your use of HashMaps in C# and avoid common pitfalls.\n\n### [](#common-mistakes-when-implementing-a-hashmap-in-c)Common Mistakes When Implementing a HashMap in C#\n\nImplementing a HashMap in C# might seem straightforward, but there are common mistakes we could easily stumble upon. Let’s unearth and decode them:\n\n#### [](#not-making-effective-use-of-key-and-value)Not Making Effective Use of Key and Value\n\nIn a HashMap, the `Key` and `Value` hold utmost importance. A mistake that often slips through the cracks is using keys that don’t meet the requirements of our application. For example, you might accidentally use a mutable object as a key. This could lead to a situation where the key’s hashcode changes after it is added to the map, making it impossible to retrieve the original value.\n\nHere’s an example to illustrate the issue:  \n\n```csharp\nDictionary<List<int>, int> hashMap = new Dictionary<List<int>, int>()\n{\n    { new List<int>(){1, 2, 3}, 1 }\n};\n\nList<int> keyList = new List<int>() { 1, 2, 3 };\nkeyList.Add(4);\nint value = hashMap[keyList]; // Throws KeyNotFoundException\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this case, changing the keyList object after using it as a key in the HashMap causes a `KeyNotFoundException` when later trying to retrieve the value with this key. Bad luck, right? But we can avoid this!\n\n#### [](#overuse-of-null)Overuse of null\n\nThe inclusion of `null` keys can sometimes lead to pain points in your HashMap implementation. Allowing `null` keys may require special condition checking when inserting, deleting, or retrieving from the map, leading to more complex and slower code. And that’s the last thing we want, right?\n\nDoes this imply that we should never use nulls in HashMap? No! It’s to remember that all members of our HashMap family (Key, Value) need careful and case-specific dealing. We’ll look at effective strategies next.\n\n### [](#best-practices-for-implementing-a-hashmap-in-c)Best Practices for Implementing a HashMap in C#\n\nUnderstanding how to steer clear of the common errors is half the battle won. However, charting the path of best practices can equip you with the tools for a flawless HashMap implementation in C#. Here’s a handy set of best practices to keep up your sleeve:\n\n#### [](#use-appropriate-types-as-keys)Use Appropriate Types as Keys\n\nRemember, keys should generally be immutable. Using immutable objects as keys helps avoid unexpected scenarios like the HashMap losing track of values due to keys changing over-time.  \n\n```csharp\nDictionary<string, int> hashMap = new Dictionary<string, int>()\n{\n    { \"One\", 1 },\n    { \"Two\", 2 },\n    { \"Three\", 3 }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this case, our keys are strings, which are inherently immutable in C# – a [solid](https://www.bytehide.com/blog/solid-principles-in-csharp) choice for HashMap keys!\n\n#### [](#handle-null-values-efficiently)Handle null values efficiently\n\nWhile some prefer prohibiting `null` values in HashMaps, handling `null` effectively can also lead to cleaner code. You could handle null values by using the `TryGetValue` method rather than directly accessing the values.  \n\n```csharp\nDictionary<string, int?> hashMap = new Dictionary<string, int?>()\n{\n    { \"One\", 1 },\n    { \"Two\", null },\n};\n\nif(hashMap.TryGetValue(\"Two\", out int? value))\n{\n    Console.WriteLine(value.HasValue ? value.Value.ToString() : \"null\"); // Outputs: null\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, even though “Two” maps to `null`, the code doesn’t throw a NullReferenceException.\n\n## [](#conclusion-of-c-hashmaps)Conclusion of C# HashMaps\n\nSo there you have it, folks. We’ve ventured deep into the realms of HashMap in C#, examining its nooks and crannies. But remember, the beauty of HashMaps truly unfolds when you start using it in your coding journey. So, aren’t you excited to fire up your compiler and experiment with HashMaps? But beware, once you get the hang of it, there’s no way back! You too will fall under the charm of the versatile HashMap. What’re you waiting for? Code away, my friend!\n\nA final word of caution. If you don’t take action now and start implementing HashMap in your code today, you might find yourself stuck with inefficient code tomorrow. And we wouldn’t want that, would we? So, go ahead and make the most out of C# HashMaps now, and join the league of efficient program writers.\n\n**Author**: [ByteHide](https://dev.to/bytehide)",
    "shortDescription": "Understanding HashMap in C#   Hey there, code brewer! Today we’re going to sift through one...",
    "htmlMeta": "<meta property=\"og:title\" content=\"HashMap in C#: Detailed Guide\">\n<meta property=\"og:description\" content=\"Understanding HashMap in C#   Hey there, code brewer! Today we’re going to sift through one...\">\n<meta name=\"keywords\" content=\"csharp, dotnet, programming, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pquotRkj--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21e03qh82sqx1yls3drw.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "HashMap-in-C:-Detailed-Guide",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21e03qh82sqx1yls3drw.png"
  },
  {
    "title": "HttpClientHandler in C# - Easy Guide",
    "url": "https://dev.to/bytehide/httpclienthandler-in-c-easy-guide-3490",
    "tags": [
      "csharp",
      "dotnet",
      "programming",
      "tutorial"
    ],
    "published_at": 1703842200000,
    "markdownContent": "We’ll dive deep into understanding HttpClientHandler, see how it beautifully sits within the .NET ecosystem, and learn how it becomes our superhero when dealing with HTTP requests and responses.\n\n## [](#understanding-httpclienthandler-and-its-importance-in-c)Understanding HttpClientHandler and its Importance in C#\n\nBefore we delve deeper into HttpClientHandler, let’s give a warm welcome to our friend, HttpClient. Why? Because HttpClientHandler is the sidekick we need for our superhero HttpClient! That’s right; they’re the dynamic duo of network programming in C#. Let’s find out why!\n\n### [](#what-is-httpclienthandler-in-c)What is HttpClientHandler in C#\n\nHttpClientHandler is a class in .NET that provides a base class with properties and methods used by HttpClient for sending HTTP requests and receiving HTTP responses. So, it’s essentially the engine under the hood of HttpClient. Cool, huh?\n\nHere is a fun fact – who knew that when we use an instance of HttpClient, we’re also making use of HttpClientHandler, even if we can’t see it? It’s true! HttpClientHandler is implicitly instantiated whenever we create an HttpClient. It’s like an invisible friend, always there for HttpClient.\n\n### [](#significance-of-httpclienthandler-in-net-applications)Significance of HttpClientHandler in .NET Applications\n\nNow we know what HttpClientHandler is, but is it really that important? Oh, yes! HttpClientHandler is a master manipulator of HttpClient’s behavior and its HTTP requests and responses. Whether you’re adding headers, handling cookies, setting up request timeouts, or dealing with proxies, HttpClientHandler has got you covered.\n\n## [](#delve-deeper-into-httpclient-c)Delve Deeper into HttpClient C#\n\nNow that we’ve appreciated the role of HttpClientHandler let’s shift our spotlight onto HttpClient. What can it do? How can we use it effectively? Let’s dive in and understand its charm!\n\n### [](#how-to-use-httpclient-c)How to Use HttpClient C#\n\nHttpClient is a class in C# designed to send HTTP requests and receive HTTP responses from a resource identified by a URI. Beckon your inner coder and check out this simple example:  \n\n```csharp\nHttpClient client = new HttpClient();\n HttpResponseMessage response = await client.GetAsync(\"http://example.com/\");\n if (response.IsSuccessStatusCode)\n {\n     string responseBody = await response.Content.ReadAsStringAsync();\n     Console.WriteLine(responseBody);\n }\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this short snippet, we’re performing a GET request to “[http://example.com/”](http://example.com/%E2%80%9D) and then displaying the response if the Status Code is successful. Neat!\n\n### [](#c-httpclient-example-for-beginners)C# HttpClient Example for Beginners\n\nLet’s look at our beloved HttpClient in action! Run the following C# code in your favorite IDE (Visual Studio, JetBrains, or hey, even good ol’ Notepad):  \n\n```csharp\nHttpClient client = new HttpClient();\nclient.BaseAddress = new Uri(\"http://example.com/\");\nclient.DefaultRequestHeaders.Accept.Clear();\nclient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis example shows setting up an HttpClient instance, and defining the base address for all subsequent requests and the acceptable media type.\n\n### [](#role-of-systemnethttphttpclient-in-network-programming)Role of System.Net.Http.HttpClient in Network Programming\n\nIn network programming, HttpClient is like your trusty steed, ready to perform HTTP operations like a boss. It’s powerful yet flexible, serving us asynchronous methods for all HTTP methods. Need to coordinate multiple HTTP requests? HttpClient can handle that like a champ. Oh, and did you hear it can be used for both mobile and desktop applications? Now that’s versatility!\n\n## [](#practical-examples-using-httpclienthandler-and-httpclient-in-net-core)Practical Examples using HttpClientHandler and HttpClient in .NET Core\n\nNow that we’ve gotten comfy with HttpClient and HttpClientHandler, let’s put our newfound knowledge to the test with a practical .NET Core example.\n\n### [](#net-core-httpclient-get-example-and-explanation).Net Core HttpClient Get Example and Explanation\n\n```csharp\nHttpClientHandler handler = new HttpClientHandler();\nhandler.AllowAutoRedirect = false; \n\nHttpClient client = new HttpClient(handler);\nHttpResponseMessage response = await client.GetAsync(\"http://example.com\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this code snippet, we instantiate an HttpClientHandler, disable automatic redirection, and use it to create an HttpClient. Then we perform a GET request; however, the HttpClient won’t follow redirect responses thanks to our handler. Neat, huh?\n\n## [](#httpclienthandler-and-security-adding-authorization-headers)HttpClientHandler and Security: Adding Authorization Headers\n\nBy now, you must be wondering, “Can HttpClientHandler help me with secured requests too?” The answer is a big “Yes!”. It can handle different kinds of authentication and headers.\n\n### [](#how-to-add-basic-authentication-in-httpclient-c)How to Add Basic Authentication in HttpClient C#\n\nLet’s illustrate this with an example.  \n\n```csharp\nHttpClientHandler handler = new HttpClientHandler();\nhandler.Credentials = new NetworkCredential(\"username\", \"password\");\n\nHttpClient client = new HttpClient(handler);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis little piece of code shows how effortlessly you can use HttpClientHandler for Basic Authentication. It’s as easy as creating an HttpClientHandler, setting its Credentials property with username and password, and voila! Secured connection established!\n\n### [](#how-to-add-bearer-token-in-httpclient-c)How to Add Bearer Token in HttpClient C#\n\nIf you’re dealing with OAuth 2.0 authorization, there’s a good chance you’ll need to set a bearer token in the Authorization header. No problem! HttpClientHandler has got your back.\n\nCheck out this cool example.  \n\n```csharp\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"Your_Token\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we’re setting a bearer token in the Authorization header of HttpClient. And guess what? HttpClientHandler will implicitly take care of the rest. Amazing!\n\n### [](#how-to-add-header-in-httpclient-c)How to Add Header in HttpClient C#\n\nAdding headers in HttpClient is a child’s game with HttpClientHandler. See for yourself!  \n\n```csharp\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"X-Custom-Header\", \"This is my value\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis code snippet adds a custom header to all requests made by the HttpClient. HttpClientHandler ensures the headers are included each time HttpClient makes a request. Easy peasy!\n\n## [](#making-api-calls-using-httpclient)Making API Calls using HttpClient\n\nApps these days are all about communication. HttpClient is like the backstage operator that subtly liaises between your app and the entire world outside.\n\n### [](#how-to-call-get-api-in-c-using-httpclient)How to Call Get API in C# using HttpClient\n\nHere is a basic example of how to make a GET API call using our superhero, HttpClient.  \n\n```csharp\nHttpClient client = new HttpClient();\nvar response = await client.GetAsync(\"https://api.github.com/zen\");\nvar result = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(result);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, we’re calling the GitHub Zen API, which provides inspirational quotes.\n\nAll hail HttpClient, the unsung hero of network programming in C#!\n\n## [](#httpclienthandler-in-c-a-recap)HttpClientHandler in C#: A Recap\n\nWell done, Codin’ Crusader! We’ve journeyed through the diverse landscape of HttpClient and HttpClientHandler, explored their powers, and unlocked the mysteries of network programming in .NET world.\n\nCheers to you and your newly acquired HttpClient skills! Remember, with great power(in C#) comes great responsibility! Do you think you’re ready to implement the lustrous HttpClient and HttpClientHandler in your next amazing C# project? Go for it, and let the coding gods always be in your favor!\n\n**Author**: [ByteHide](https://dev.to/bytehide)",
    "shortDescription": "We’ll dive deep into understanding HttpClientHandler, see how it beautifully sits within the .NET...",
    "htmlMeta": "<meta property=\"og:title\" content=\"HttpClientHandler in C# - Easy&nbsp;Guide\">\n<meta property=\"og:description\" content=\"We’ll dive deep into understanding HttpClientHandler, see how it beautifully sits within the .NET...\">\n<meta name=\"keywords\" content=\"csharp, dotnet, programming, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--e5Ij53cj--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3vg89grx0dj7zbjmy8x.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "HttpClientHandler-in-C-Easy-Guide",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3vg89grx0dj7zbjmy8x.png"
  },
  {
    "title": "String to Byte Array Conversion in C#: Tutorial",
    "url": "https://dev.to/bytehide/string-to-byte-array-conversion-in-c-tutorial-4h1a",
    "tags": [
      "csharp",
      "dotnet",
      "programming",
      "tutorial"
    ],
    "published_at": 1703496600000,
    "markdownContent": "Let’s deep dive into the fascinating world of strings and byte [arrays](https://www.bytehide.com/blog/array-csharp) in C#. By the end of this tutorial, you will hold the power to effortlessly convert strings to byte arrays and vice versa. Sounds cool, right? So, without further ado, let’s jump right into it!\n\n## [](#basics-of-strings-and-byte-arrays-in-c)Basics of Strings and Byte Arrays in C#\n\nStrings and byte arrays are fundamental parts of any C# project. To manipulate them like a pro, we first need to understand what they are.\n\n### [](#what-is-a-string-in-c)What is a String in C#?\n\nEver wondered how text is represented in your C# program? The answer is pretty simple: as strings! You can think of a string as a sequence of characters. Let’s take a simple example:  \n\n```csharp\nstring greeting = \"Hello, World!\";\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn the code snippet above, ‘Hello, World!’ is a string stored in the variable `greeting`.\n\n### [](#understanding-byte-arrays-in-c)Understanding Byte Arrays in C#\n\n“Byte array?” You might think. Yes, another fundamental data type in C#. It’s essentially a collection of bytes, which are units of digital information storage. Let’s see what a byte array looks like in C#:  \n\n```csharp\nbyte[] byteArray = new byte[5]{1, 2, 3, 4, 5};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this case, `byteArray` holds 5 elements. Each element is a byte value ranging from `1` to `5`.\n\n## [](#guide-to-converting-strings-to-byte-arrays-in-c)Guide to Converting Strings to Byte Arrays in C#\n\nNow that we’re clear about strings and byte arrays let’s dive into converting strings to byte arrays. You’ll be surprised how straightforward it can be!\n\n### [](#stepbystep-examples-for-c-string-to-byte-array)Step-by-Step Examples for C# String to Byte Array\n\nIn C#, you can use the `Encoding.UTF8.GetBytes()` method to convert a string to a byte array. Here’s how:  \n\n```csharp\n// Our string to be converted\nstring sample = \"Hello C#\";\n\n// Use Encoding.UTF8.GetBytes method\nbyte[] byteArray = Encoding.UTF8.GetBytes(sample);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this snippet, `sample` is our arbitrary string. When we apply the `GetBytes()` method, it converts “Hello C#” to a byte array and stores it in `byteArray`. Pretty neat, isn’t it?\n\n## [](#c-byte-array-to-string-reverse-process)C# Byte Array to String: Reverse Process\n\n“This is great, but what if I need to convert a byte array back to a string?” No worries—we’ve got you covered!\n\n### [](#converting-a-byte-array-to-a-string)Converting a Byte Array to a String\n\nTo convert a byte array to a string, you can use the `Encoding.UTF8.GetString()` function. It’s almost like we’re doing the reverse of what we did earlier. Let’s give it a spin:  \n\n```csharp\n// Our byte array to be converted\nbyte[] byteArray = new byte[]{72, 101, 108, 108, 111, 32, 67, 35};\n\n// Use Encoding.UTF8.GetString method\nstring result= Encoding.UTF8.GetString(byteArray);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, `byteArray` is a collection of ASCII values, which happen to represent “Hello C#”. By applying `GetString`, we convert these values back into a readable string.\n\n## [](#converting-byte-array-to-hex-string-in-c)Converting Byte Array to Hex String in C#\n\nWe’ve surfaced from the byte array to string transition. What’s next? Ah yes, preparing byte arrays for the ultimate hex party!\n\n### [](#explanation-of-c-byte-array-to-hex-string-conversion)Explanation of C# Byte Array to Hex String Conversion\n\nShouldn’t be too hard, right? Let’s go ahead and convert our byte array to hex:  \n\n```csharp\n// Take an example byte array\nbyte[] byteArray = new byte[]{72, 101, 108, 108, 111, 32, 67, 35};\n\n// Convert byte array to hex\nstring hex = BitConverter.ToString(byteArray).Replace(\"-\", \"\");\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn the code above, `BitConverter.ToString` does the heavy lifting, converting each byte in the array to a hex string. The `Replace` method is there to remove the hyphens that are added between each byte.\n\n## [](#common-mistakes-to-avoid-when-converting-string-to-byte-array-in-c)Common Mistakes to Avoid When Converting String to Byte Array in C#\n\nLet’s dive deeper into this topic and explore it with increased detail. These concepts are crucial, particularly for beginners, as they minimize the probability of common conversion errors.\n\n### [](#failure-to-specify-the-correct-encoding)Failure to specify the correct Encoding\n\nEncoding is the process of converting a data object into a sequence of bytes. In C#, not specifying the correct encoding during string to byte array conversion can lead to undesired outputs. Consider the following example:  \n\n```csharp\nstring specialChar = \"č\";\nbyte[] byteArray1 = Encoding.ASCII.GetBytes(specialChar);\nbyte[] byteArray2 = Encoding.UTF8.GetBytes(specialChar);\n\nConsole.WriteLine(byteArray1[0]);  // Output: 63\nConsole.WriteLine(byteArray2[0]);  // Output: 196\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn the above code, ASCII encoding replaces the special character “č” with a question mark, whose ASCII value is `63`. UTF8 encoding correctly represents “č”, and the output is `196`. This illustrates the importance of using the correct encoding for accurate results.\n\n### [](#misunderstanding-different-encoding-types)Misunderstanding Different Encoding Types\n\nDifferent encodings represent characters in distinct ways. ASCII only covers basic English characters, while UTF includes international characters, symbols, and emojis.  \n\n```csharp\nstring emoji = \"😀\";\nbyte[] byteArray1 = Encoding.ASCII.GetBytes(emoji);\nbyte[] byteArray2 = Encoding.UTF8.GetBytes(emoji);\n\nConsole.WriteLine(byteArray1.Length);  // Output: 1\nConsole.WriteLine(byteArray2.Length);  // Output: 4\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the length of the byte array with ASCII encoding is `1`, representing a question mark (“?”). The byte array with UTF8 encoding has a length of `4`, indicating the accurate representation of the emoji.\n\n### [](#erroneous-onetoone-charbyte-assumption)Erroneous One-to-One Char-Byte Assumption\n\nProgrammers sometimes mistakenly believe that every char in string translates to one byte in a byte array. This isn’t always true, as demonstrated below:  \n\n```csharp\nstring text = \"Hello, C#!\";\nbyte[] byteArray = Encoding.UTF8.GetBytes(text);\n\nConsole.WriteLine(text.Length);       // Output: 10\nConsole.WriteLine(byteArray.Length);  // Output: 10\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#troubleshooting-string-and-byte-conversion-errors-in-c)Troubleshooting String and Byte Conversion Errors in C\n\nDon’t lose heart if you encounter errors in your conversions. Sometimes, it’s just a matter of re-checking your code with a debugging lens. Here are a couple of strategies that might come in handy:\n\n### [](#the-nonascii-characters-check)The Non-ASCII Characters Check\n\nYour byte array might contain unexpected results if the original string had non-ASCII characters. If you’re dealing with strings that may contain such characters, use UTF8 or another appropriate encoding.  \n\n```csharp\nstring foreignText = \"Hola, C#!\";\nbyte[] incorrectByteArray = Encoding.ASCII.GetBytes(foreignText);\nbyte[] correctByteArray = Encoding.UTF8.GetBytes(foreignText);\n\nConsole.WriteLine(incorrectByteArray.Length);  // Output: 9\nConsole.WriteLine(correctByteArray.Length);    // Output: 9\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nEven though both byte arrays have the same length, only `correctByteArray` correctly represents the string using UTF8 encoding.\n\n### [](#using-the-correct-encoding)Using the Correct Encoding\n\nMisusing encodings is a common mistake that can lead to unexpected results. For instance, using ASCII encoding on a string with non-ASCII characters could distort your results. Always use the encoding that best matches your data.  \n\n```csharp\nstring text = \"𝄞 Music\";\nbyte[] incorrectByteArray = Encoding.ASCII.GetBytes(text);\nbyte[] correctByteArray = Encoding.UTF8.GetBytes(text);\n\nConsole.WriteLine(Encoding.ASCII.GetString(incorrectByteArray));  // Output: ? Music\nConsole.WriteLine(Encoding.UTF8.GetString(correctByteArray));     // Output: 𝄞 Music\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn the above case, UTF8 correctly processes the musical notation symbol, whereas ASCII encoding replaces it with a question mark.\n\n## [](#summary-and-conclusion)Summary and Conclusion\n\nBy now, you must be into string-to-byte and byte-to-string conversions like a chef in his kitchen. Amazing, isn’t it? We started with the basics, dipped our toes into the conversion process, looked at the elephant in the room—hex strings—and even talked about common pitfalls and troubleshooting.\n\nSo next time someone asks about C# string and byte array conversions, you’ll not only say “I know that,” but “Hey, let me show you!” Remember, practice makes perfect. So, open your compiler, and let’s cook up some interesting conversion programs!\n\n**Author**: [ByteHide](https://dev.to/bytehide)",
    "shortDescription": "Let’s deep dive into the fascinating world of strings and byte arrays in C#. By the end of this...",
    "htmlMeta": "<meta property=\"og:title\" content=\"String to Byte Array Conversion in C#:&nbsp;Tutorial\">\n<meta property=\"og:description\" content=\"Let’s deep dive into the fascinating world of strings and byte arrays in C#. By the end of this...\">\n<meta name=\"keywords\" content=\"csharp, dotnet, programming, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--d7AiPDKs--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ihof8t53oma59jzd7r6.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "String-to-Byte-Array-Conversion-in-C:-Tutorial",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ihof8t53oma59jzd7r6.png"
  },
  {
    "title": "SemanticValidation: A Library for Semantic Checks with OpenAI",
    "url": "https://dev.to/mehrandvd/semanticvalidation-a-library-for-semantic-checks-with-openai-3d4j",
    "tags": [
      "openai",
      "csharp",
      "dotnet",
      "semantickernel"
    ],
    "published_at": 1703581348000,
    "markdownContent": "Have you ever wanted to use OpenAI's powerful language models to validate your data and queries? If so, you might be interested in **SemanticValidation**, a library that integrates OpenAI with validation systems. In this post, I will introduce SemanticValidation and show you how to use it in your .NET projects.\n\n## [](#what-is-semanticvalidation)What is SemanticValidation?\n\n[SemanticValidation](https://github.com/mehrandvd/semanticvalidation) is a library that allows you to perform semantic checks on your data and queries using natural language understanding. It brings the power of OpenAI into the validation systems as easily as this:  \n\n```csharp\nvar result = Semantic.AreSimilar(\n                \"This automobile is red\",\n                \"The car is red\");\nConsole.WriteLine(result.IsValid); // true\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe interesting part is that: When it fails, it explains why! (thanks to OpenAI)  \n\n```csharp\nvar result = Semantic.AreSimilar(\n                \"This bicycle is red\", \n                \"The car is red\");\nConsole.WriteLine(result.IsValid); // false\nConsole.WriteLine(result.Reason);\n// The first text describes a red bicycle, while the second text describes a red car. They are not semantically equivalent.\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nSemanticValidation uses OpenAI and [SemanticKernel](https://github.com/microsoft/semantic-kernel) under the hood. **SemanticKernel** is a library that provides a unified interface to interact with OpenAI's language models.\n\n## [](#how-to-use-semanticvalidation)How to Use SemanticValidation?\n\nTo use SemanticValidation, you need to install it as a [NuGet package](https://www.nuget.org/packages/SemanticValidation) in your project. You also need an OpenAI API key to access the language models. Then, you need to create an instance of the Semantic class and pass your OpenAI subscription details as parameters:  \n\n```csharp\nvar semantic = new Semantic(deployment, endpoint, apiKey);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThat's it! You are ready to use SemanticValidation in your code. 😊\n\nSemanticValidation provides several semantic methods to perform different kinds of checks. For example, the `AreSimilar` method checks if two texts are semantically equivalent. The `HasCondition` method checks if a text meets a special condition. And again, watch how great it describes the reason for semantic validation failure.  \n\n```csharp\nvar result = Semantic.HasCondition(\n                text: \"This car is red\",\n                condition: \"It talks about trees\");\nConsole.WriteLine(result.IsValid); // false\nConsole.WriteLine(result.Reason);\n// The input text does not talk about trees\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#conclusion)Conclusion\n\nSemanticValidation is a library that integrates OpenAI's language models with validation systems. It allows you to perform semantic checks on your data and queries using natural language understanding. It also **provides explanatory feedback when a semantic check fails**, thanks to OpenAI's natural language generation capabilities.\n\nIf you are interested in SemanticValidation, you can find more information and examples on its GitHub repository: [https://github.com/mehrandvd/SemanticValidation](https://github.com/mehrandvd/SemanticValidation)\n\nThis is a new and developing project, and I would greatly appreciate your feedback to make it better. Thank you for reading this post and I hope you gained some new insights. Please share your thoughts and questions in the comments section. 🙏\n\n**Author**: [Mehran Davoudi](https://dev.to/mehrandvd)",
    "shortDescription": "Have you ever wanted to use OpenAI's powerful language models to validate your data and queries? If...",
    "htmlMeta": "<meta property=\"og:title\" content=\"SemanticValidation: A Library for Semantic Checks with OpenAI\">\n<meta property=\"og:description\" content=\"Have you ever wanted to use OpenAI's powerful language models to validate your data and queries? If...\">\n<meta name=\"keywords\" content=\"openai, csharp, dotnet, semantickernel, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rw4gfyIf--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a64ilbj7wt29blmq7f7a.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "SemanticValidation:-A-Library-for-Semantic-Checks-with-OpenAI",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a64ilbj7wt29blmq7f7a.png"
  },
  {
    "title": "How to Use Substring in C#: A Detailed Guide",
    "url": "https://dev.to/bytehide/how-to-use-substring-in-c-a-detailed-guide-165d",
    "tags": [
      "csharp",
      "dotnet",
      "tutorial",
      "programming"
    ],
    "published_at": 1702975379000,
    "markdownContent": "Tired of juggling with big blocks of text and only needing a small part? Wish you could easily slice out that valuable piece of string data without losing your sanity? You’re in luck. The nifty technique called substring in C# is your new best friend.\n\n## [](#introduction-to-substring-in-c)Introduction to Substring in C#\n\n“Bigger is better” may not always be the mantra when dealing with strings in C#. Sometimes, we need to focus on a specific part of a string, or as we nerds like to call it, a substring. Intrigued? Buckle up!\n\n### [](#what-is-substring-in-c)What is substring in C#\n\nA substring is a part, or a portion of the original string. Think of it like taking a slice out of pie, but that pie is text, and the pie slice is the substring. In C#, the Substring method allows you to get this slice without crumbing the entire pie.  \n\n```csharp\nstring phrase = \"Hello World!\";\nstring sub = phrase.Substring(6, 5);\n// Result: \"World\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere, we have a basic example. From the phrase “Hello World!”, we’ve used the Substring method to get the part “World”. We’ve just got our first slice of the pie!\n\n## [](#breaking-down-the-c-substring-method)Breaking Down the C# Substring Method\n\nReady to deep dive into the C# Substring method? You’ll be surprised how easy it is. Let’s explore its syntax, the parameters it inhales, and what it spews out (the return value).\n\n### [](#syntax-of-c-substring-method)Syntax of C# Substring Method\n\nThe C# Substring method follows a very simple syntax. No fuss, no muss.  \n\n```csharp\npublic string Substring(int startIndex, int length);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNeed more details? Surely! The `int startIndex` is the position where the substring should start. The `int length` is the number of characters to be included in the substring.\n\n### [](#parameters-of-c-substring)Parameters of C# Substring\n\nThere’re two parameters to use within the C# Substring method:\n\n*   **startIndex**: The zero-based starting character position of a substring.\n*   **length** (optional): The number of characters for the substring.\n\n### [](#return-value-of-substring-function-in-c)Return Value of Substring Function in C#\n\nThe Substring function, as its name implies, returns a “substring” that begins from the `startIndex` and spanning for the provided `length`. If the length is not given, it gets all the characters from `startIndex` till the end of the string.\n\n## [](#c-substring-example-a-practical-overview)C# Substring Example: A Practical Overview\n\nHalfway into our journey, it’s time we give you a taste of what this hidden gem, C#, has in store for you. Gather around, one and all, for some practical yet thrilling examples!\n\n### [](#simple-c-substring-example)Simple C# Substring Example\n\nHere’s a simple example of C# substring method. We’ve got a string and want a part of it, pretty straightforward.  \n\n```csharp\nstring text = \"C# Programmers Rock!\";\nstring sub = text.Substring(0, 2);\n// Result: \"C#\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n“””Deep dive in you may ask, what does this wizard-like incantation do? In plain English: we’ve extracted “C#” from our string. Congrats! You’ve cast your first spell!\n\n### [](#complex-c-substring-example)Complex C# Substring Example\n\nReady to take your newfound tricks to the test? Let’s jazz things up with a more complex example.  \n\n```csharp\nstring text = \"C# Programmers are awesome!\";\nint empStartIndex = text.IndexOf(\"are\") + 4;\nint empLength = text.Length - empStartIndex;\nstring sub = text.Substring(empStartIndex, empLength);\n// Result: \"awesome!\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nclap clap! What just happened? We sliced an unpredictable piece of the string using the `IndexOf` method. We found the occurrence of ‘are’ and took the rest of the string as our substring. Not feeling so tricky now, is it?\n\n## [](#working-with-stringsubstring-c-method)Working with string.substring C# Method\n\nReady to leap into more intricacies of C# string handling? Let’s delve more into the `string.substring` C# method, understand its nuances and play around with more examples.\n\n### [](#how-does-stringsubstring-c-work)How does string.substring C# work\n\nThe beauty of C# lies in its simplicity, including the string substring method. It’s as easy as placing an order at your favorite cafe, with `startIndex` being your order number and `length` being the amount of cheesecake you can handle.  \n\n```csharp\nstring data = \"Beauty lies in simplicity.\";\nstring hint = data.Substring(0, 6);\n// Result: \"Beauty\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this instance, we’ve extracted the word ‘Beauty’ from our string. The ‘0’ is the starting index, and ‘6’ is the number of characters we wish to extract, essentially creating our substring.\n\nBut what if you’re unsure of the length? Or perhaps you want to extract all characters till the end from a starting point? No worries, you can simply use a single parameter, the `startIndex`.  \n\n```csharp\nstring text = \"C# is fun!\";\nstring claim = text.Substring(4);\n// Result: \"is fun!\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, the entire remnant string starting from index ‘4’ gets sliced out into the ‘claim’ substring. So, if the `length` parameter is absent, the substring method automatically gets all the characters till the end of the string. As you can see, ordering that cheesecake wasn’t that hard, was it?\n\nApart from this, one powerful usage of the `Substring` method is to reverse a string. Yes, you can use the `Substring` method in a loop and extract each character in a reverse sequence:  \n\n```csharp\nstring input = \"C# ROCKS!\";\nstring output = \"\";\nfor (int i = 0; i < input.Length; i++)\n{\n    output += input.Substring(input.Length - i - 1, 1);\n}\n// Result: \"!SKCOR #C\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nManeuvering through the string from the last character to the first, the loop outputs each character to create a reversed string. This just shows the capabilities of the `Substring` method are only limited by your imagination!\n\n### [](#difference-between-stringsubstring-and-c-substring)Difference between string.substring and C# Substring\n\nPlot twist time! There’s a common misconception around the difference between `string.substring` and C# `Substring`. Good news or bad news first? Well, the good news is they are the same thing!\n\nYes, seriously, `string.substring` and `Substring` in C# are two names for the same technique. In fact, `substring` is typically used as a JavaScript method, while in C#, it’s always `Substring`. Both are used for extracting a portion of a string from a string object – a substring, if you will, equally useful and equally fun!  \n\n```csharp\nstring fact = \"C# is cool and fun!\";\nstring shortFact = fact.Substring(0, 8);\n// Result: \"C# is cool\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWhether you prefer `substring` or `Substring`, it doesn’t matter. After all, a hero by any other name is still a hero, right? You’re now equipped with a sharp tool to slice and dice your strings the way you want.\n\nIn a nutshell, the `substring` (or `Substring`) C# method allows you to extract specific portions of a string with precision. Whether it’s slicing strings to manageable bits, reversing the string sequence, or anything else you can dream up, `substring` is a versatile, and, dare I say, indispensable tool in your C# toolkit. Don’t be afraid to use your new slicing powers, go forth and slice with confidence!\n\n## [](#using-c-to-get-string-between-two-characters)Using C# to Get String Between Two Characters\n\nCast your minds back to the puzzling times when you wondered how you could get a particular piece of text between two specific characters. That’s right, we’re overcoming that right now, prepare to be dazzled!\n\n### [](#instances-for-using-c-to-get-a-string-between-two-characters)Instances for Using C# to Get a String Between Two Characters\n\nSuppose you wanted to find sentences within brackets, or between slashes or spaces. That’s when the power of C# comes in. Remember, with great power comes great nerdiness?\n\n### [](#coding-guides-to-get-a-string-between-two-characters)Coding Guides to Get a String Between Two Characters\n\nHere’s your magic wand! A practical example of how you can achieve this in a line of code.  \n\n```csharp\nstring text = \"(Hello World!)\";\nint startChar = text.IndexOf('(') + 1;\nint endChar = text.IndexOf(')');\nstring sub = text.Substring(startChar, endChar - startChar);\n// Result: \"Hello World!\"\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn plain speak, we got the position of ‘(‘ and ‘)’ characters and used our substring technique to do the rest. Isn’t it exciting to command your string to do your bidding?\n\n## [](#common-errors-with-substring-in-c-and-how-to-solve-them)Common Errors with Substring in C# and How to Solve Them\n\nIf there’s one thing every seasoned C# programmer knows, it’s that even with something as seemingly straightforward as the Substring method, there’s a chance of errors. Understanding common pitfalls and learning how to avoid them will save us time, energy, and a surprising amount of hair pulling!\n\n### [](#tricky-edge-cases-with-substring-in-c)Tricky Edge Cases with Substring in C#\n\nOne particular error that developers often encounter with the `Substring` method in C# has to do with boundary cases. A classic example is the `ArgumentOutOfRangeException`. This [exception](https://www.bytehide.com/blog/5-good-practices-for-error-handling-in-c) is triggered when we provide a starting index or length that is out of the bounds of the string length. Let’s explore this using a code snippet and untangle the issue:  \n\n```csharp\nstring text = \"I love C#\";\nstring sentiment = text.Substring(10, 5);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWhile executing the above code, you might anticipate extracting the nth substring from the text. But wait! The starting index exceeds the length of the text “I love C#”, which is indeed 9. As the string is zero-index based, the maximum starting index can only be 8. Instead, our code tries to extract from the 10th index resulting in an `ArgumentOutOfRangeException`.\n\nTo guard against this, we can add a check to ensure that our starting index or length never exceeds the actual string length:  \n\n```csharp\nstring text = \"I love C#\";\nint startIndex = 10;\nint len = 5;\nif (startIndex < text.Length)\n{\n    len = ((startIndex + len) > text.Length) ? (text.Length - startIndex) : len;\n    string sentiment = text.Substring(startIndex, len);\n    // Further processing\n}\nelse\n{\n    // Alert user or handle error\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#avoiding-common-mistakes-with-c)Avoiding Common Mistakes with C#\n\nNow that we understand the tragedy that ensnare us when dealing with indices and lengths that defy the string boundaries, let’s hunker down and address another common pitfall – forgetting the C# strings are zero-index based.\n\nSuppose you have been provided the task to extract a year from a predefined date string, for example “01/01/2022” and you conjured up the following `Substring` spell:  \n\n```csharp\nstring date = \"01/01/2022\";\nstring year = date.Substring(6, 4);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAh, a blunder! The above spell indeed works for this exact date string. However, if the day or the month is not a two-digit number (like “1/1/2022”), the spell fails. Because it considers the sixth index to be the starting point of the year substring. A better approach would be using the `LastIndexOf` method to identify the “/” position and use it as the `startIndex`:  \n\n```csharp\nint lastSlash = date.LastIndexOf('/') + 1;\nstring year = date.Substring(lastSlash);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow you have a snippet that can robustly extract the year part from a date string, irrespective of how the day or month is represented.\n\n## [](#substring-in-c-key-takeaways)Substring in C#: Key Takeaways\n\nLook how far you’ve come, C# apprentice! Let’s recap to seal the knowledge in your brain.\n\n### [](#recap-of-what-weve-learned-about-c-substring)Recap of What We’ve Learned About C# Substring\n\nWe tackled what a substring is, how the Substring method works in C#, saw examples in action, and learnt to get a string between two characters. More importantly, we fought the syntax dragons and won!\n\n### [](#future-possibilities-of-using-c-substring)Future Possibilities of Using C# Substring\n\nImagine pulling out usernames from email addresses, extracting domain names from URLs, or getting certain parts from a date. All this is now possible thanks to your newly honed substring skills!\n\nNow, do you feel the newfound power coursing through your veins? Are you excited to experiment and impress your friends with your substring prowess? Remember, knowledge unused is knowledge wasted. So, get that C# environment up and start practicing! Happy coding!\n\n**Author**: [ByteHide](https://dev.to/bytehide)",
    "shortDescription": "Tired of juggling with big blocks of text and only needing a small part? Wish you could easily slice...",
    "htmlMeta": "<meta property=\"og:title\" content=\"How to Use Substring in C#: A Detailed&nbsp;Guide\">\n<meta property=\"og:description\" content=\"Tired of juggling with big blocks of text and only needing a small part? Wish you could easily slice...\">\n<meta name=\"keywords\" content=\"csharp, dotnet, tutorial, programming, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zkbGBaYS--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfj7hsh4sy5ocz6q5fnn.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "How-to-Use-Substring-in-C:-A-Detailed-Guide",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfj7hsh4sy5ocz6q5fnn.png"
  },
  {
    "title": "Decimal in C# : How and Where to Use It?",
    "url": "https://dev.to/bytehide/decimal-in-c-how-and-where-to-use-it-387b",
    "tags": [
      "csharp",
      "dotnet",
      "programming",
      "tutorial"
    ],
    "published_at": 1704101400000,
    "markdownContent": "Have you been tapping your fingers on the keyboard, continually baffled by the decimal data type in C#? Or are you just curious to know more about what it can do for you from an efficiency standpoint? Lucky for you, we’re about to unravel the mysteries of decimal in C#. Hold tight!\n\n## [](#understanding-the-decimal-type-in-c)Understanding the Decimal Type in C#\n\nC# has various data types, but if you deal with numbers that have digits after the decimal point, you’ve may well have encountered the ‘decimal’ type. It’s an appealing beast, so let’s get to know it better.\n\n### [](#definition-what-is-decimal-in-c)Definition: What is Decimal in C#?\n\nIn C#, ‘decimal’ is a data type used for storing floating-point numbers with a high level of precision. It, therefore, is a perfect candidate for financial and monetary calculations where you really don’t want errors to creep in.  \n\n```csharp\ndecimal salary = 500.45m;\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn the above sample code, we’re declaring a decimal variable ‘salary’ and assigning it an initial value. Notice the ‘m’ at the end? That’s important. It tells C# that this is a decimal literal.\n\n### [](#c-type-decimal-briefing-the-specifications)C# Type Decimal: Briefing the Specifications\n\nThe decimal data type can handle way bigger numbers than you’d think – from 1.0 x 10^-28 to approximately 7.9 x 10^28. That’s one heck of a range, huh? Not just that, it can hold up to 28-29 significant digits and takes up 16 bytes.\n\nIt’s worth noting that due to its high precision and the range of values it can represent, the decimal type has a more significant overhead compared to float or double.\n\n## [](#practical-use-of-decimals-in-c)Practical Use of Decimals in C#\n\nNow that we’ve got a grip on what the decimal type in C# is let’s whip it into action. It’s a pretty smooth operator.\n\n### [](#how-to-set-decimal-value-in-c)How to Set Decimal Value in C#?\n\nSetting a decimal value in your C# code is straightforward. Just remember to put that little ‘m’ at the end of the value. It may seem like an extra step, but trust me, it’s a good habit to form.  \n\n```csharp\ndecimal price = 15.99m;\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nEasy, right? After this line of code, ‘price’ will store the value 15.99.\n\n### [](#realworld-applications-and-examples)Real-World Applications and Examples\n\nDecimals really come into their own in real-world applications like banking, finance and data analysis.\n\n#### [](#decimal-in-c-example)Decimal in C# Example\n\nSuppose you’re calculating the compound interest on a bank deposit, a decimal would be your trusty companion. It can handle calculations of interest rates and amounts up to twenty-nine decimal places accurately.  \n\n```csharp\ndecimal principalAmount = 1000;\ndecimal rateOfInterest = 7.5m;\ndecimal periods = 5;\n\ndecimal compoundInterest = principalAmount * (decimal)(Math.Pow((double)(1 + (rateOfInterest/100)), (double)periods) - 1);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWith this code, ‘compoundInterest’ will store the calculated compound interest. Notice we had to do some casting there, as Math.Pow() doesn’t support decimal.\n\n## [](#formatting-with-decimals)Formatting With Decimals\n\nWhat’s neat about decimals is that while they’re all about precision, we can also make them look rather pretty too. Let’s explore that.\n\n### [](#decimalformat-c)DecimalFormat C#\n\nC# offers inbuilt functionality for formatting decimal numbers that you can use to fit your specific needs.  \n\n```csharp\ndecimal PI = 3.141592653589793238m;\nConsole.WriteLine(String.Format(\"{0:0.00}\", PI));  // 3.14\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis code snippet formats the decimal value ‘PI’ to two decimal places. Isn’t that snappy?\n\n## [](#working-with-large-numbers-an-advantage-of-decimal-in-c)Working with Large Numbers: An Advantage of Decimal in C#\n\nOne major advantage of the decimal type in C# is that it allows for very precise arithmetic operations, particularly when working with large numbers. This is because decimals have a larger range and higher precision than float or double.\n\nThis makes decimals an ideal choice for computations where precision is paramount, and even slightly off calculations may lead to significant errors.\n\n### [](#when-to-use-decimal-over-other-numeric-types)When to Use Decimal over Other Numeric Types\n\nHave you ever found yourself knee-deep in a mass of numbers? Do you have an accurate astronomical calculation or precision-critical scientific computation up your sleeve? Then, decimals offer a ray of hope in the vast digital universe of C#.\n\nOne application could be in a physics tutoring app, where the speed of light or Planck’s constant needs to be accurately represented. With their precision, decimals are a savvy choice.  \n\n```csharp\ndecimal speedOfLight = 299792458m; // speed of light in meters per second \ndecimal PlancksConstant = 6.62607004m * (decimal)Math.Pow(10,-34); // Planck's constant in m^2*kg/s\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn other numerical types such as float or double, rounding errors can subtly sneak into your calculations. This can wreak havoc if precise calculations are a necessity. Decimals, with their friendliness toward large numbers and high precision, nip this problem in the bud.\n\nOf course, there’s no lunch for free. The trade-off for this precision is slightly reduced performance and increased memory footprint compared to floating point types. But the accuracy gain is often well worth the price for certain use-cases.\n\n## [](#guidelines-on-using-decimals)Guidelines on Using Decimals\n\nUsing decimals can be deceptively uncomplicated. Yet, it is worth appreciating the peculiarities and potential pitfalls that can come along when using this versatile data type.\n\n### [](#best-practices-tips-and-tricks)Best Practices: Tips and Tricks\n\n*   **Understand your requirement**: It’s nice to have precision, but do you really need it? If your logic does not involve arithmetic that demands extreme precision, opt for less memory-consuming numeric types such as ‘int’, ‘float’, or ‘double’.\n\n```csharp\nint pizza slices = 8; //You'd hardly have 8.57 slices, would you?\nfloat earthRadius = 6371.0f; //In kilometers - this will do in most Earth-bound scenarios!\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n*   **Efficiency**: While the ‘decimal’ type is fine-tuned for high precision computations, remember that it is also a bit more resource-hungry. It occupies larger memory space and operations on decimal types are slower.\n*   **Casting**: No data type is an island. When poking decimals with other data types, bear in mind that you may need a cast or two.\n\n```csharp\ndouble speedOfLightDouble = (double)speedOfLight; //explicit conversion from decimal to double\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nRemember, understanding your tools and using them wisely is the hallmark of a good programmer. Happy Coding!\n\n## [](#endnote-recapitulation-and-final-thoughts)Endnote: Recapitulation and Final Thoughts\n\nWe’ve covered a lot of ground. From what decimal is, where and how to use it, to when to use it over other number types. You’re now geared up to take on any decimal-related problem in C#. So, is ‘decimal’ the hero of numeric types? In many situations, I’d say “Yes!”.\n\nRemember though, it’s a tool, just like any other data type. Use it well, and it can do wonders for your work.\n\n**Author**: [ByteHide](https://dev.to/bytehide)",
    "shortDescription": "Have you been tapping your fingers on the keyboard, continually baffled by the decimal data type in...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Decimal in C# : How and Where to Use It?\">\n<meta property=\"og:description\" content=\"Have you been tapping your fingers on the keyboard, continually baffled by the decimal data type in...\">\n<meta name=\"keywords\" content=\"csharp, dotnet, programming, tutorial, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RikaM7YB--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/003u7v9zquir3zlu04d2.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Decimal-in-C-:-How-and-Where-to-Use-It",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/003u7v9zquir3zlu04d2.png"
  }
]