[
  {
    "title": "üî• Top 12 libraries for your NextJS project üèÜ",
    "url": "https://dev.to/nevodavid/top-12-libraries-for-your-nextjs-project-1oob",
    "tags": ["webdev", "javascript", "tutorial", "react"],
    "published_at": 1702381659000,
    "markdownContent": "[![Save](https://res.cloudinary.com/practicaldev/image/fetch/s--vWMU1ERd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szi0gw4l049yctxjeu1p.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--vWMU1ERd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szi0gw4l049yctxjeu1p.png)\n\nI have been a full-stack developer for the last decade, building smaller projects like [gitup](https://gitup.dev/) and bigger projects like [crosspublic](https://github.com/github-20k/crosspublic).\n\nOver the years, I have tested different tools to:\n\n1.  Be more productive\n2.  Have fewer bugs\n3.  Write less code\n\nI have curated a list of libraries to help you develop great NextJS stuff that I am using daily with an explanation of what you can do with them. **Let's dig in.**\n\n[![Be Better](https://res.cloudinary.com/practicaldev/image/fetch/s---FtvPJ1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap38q1ej3tqypjuebg3u.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s---FtvPJ1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap38q1ej3tqypjuebg3u.gif)\n\n* * *\n\n# [](#1-triggerdev)1\\. [Trigger.dev](https://github.com/triggerdotdev/trigger.dev)\n\nWith NextJS, I always needed help with everything connected to background jobs.\n\nIt can be a cron job running in the background to send emails or process new users‚Äô funnels in the system.\n\nThat caused me to run another server to process those jobs, either an external EC2 server or a serverless function with an event bridge.  \nIt would cause me to pay for extra services (manage more services) and manage horizontal scaling myself (at some point).\n\n[Trigger.dev](http://Trigger.dev) changed that, offering background jobs on top of NextJS (and many others).  \nThey also know how to tackle NextJS serverless timeout limit to process long-running jobs.\n\n[Star Trigger.dev if you can ü•∞](https://github.com/triggerdotdev/trigger.dev)\n\n[![TriggerDev](https://res.cloudinary.com/practicaldev/image/fetch/s--YgxRdEr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/triggertop.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--YgxRdEr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/triggertop.gif)\n\n* * *\n\n## [](#2-prisma)2\\. [Prisma](https://www.prisma.io)\n\nPrisma is not NextJS-specific. It's an ORM to work with your database.\n\nORM is a unified wrapper for DB queries.  \nIt keeps a good structure and lets you quickly change between different database providers.\n\nWhile there are a lot of ORMs you can use, Prisma is unique by offering Typescript support for your queries, making everything 100x faster. NextJS imbraced typescript in their default configuration, making it a perfect match.\n\n[Star Prisma if you can ü•∞](https://github.com/prisma/prisma)\n\n[![prisma.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--jLFf_WGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/prisma.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--jLFf_WGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/prisma.gif)\n\n* * *\n\n## [](#3-nextauthjs)3\\. [NextAuth.js](https://next-auth.js.org)\n\nSuppose you want to implement any service provider authentication, such as Facebook / Google / GitHub (oAuth).\n\nIn that case, you must create your implementation for each provider or use an external service like [Auth0](https://auth0.com/) or [Clerk](https://clerk.com/).\n\nIf you are going to do it yourself, NextAuth provides a prosperous implementation so that you can easily add them by only providing the correct keys.\n\nThey also take care of authorization once you are logged in.  \n_Next.JS auth can work with Prisma out-of-the-box._\n\n[Star NextAuth if you can ü•∞](https://github.com/nextauthjs/next-auth)\n\n[![authjs.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--rhQif20I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/authjs.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--rhQif20I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/authjs.gif)\n\n* * *\n\n## [](#4-nextsitemap)4\\. [Next-Sitemap](https://github.com/iamvishnusankar/next-sitemap)\n\nOnce you have deployed NextJS on your server, you need to help google index all the pages.\n\nIt's better if you can tell Google about all the pages on your website.\n\nFor that, you can create a sitemap.xml file listing all your pages.\n\nYou can easily use Next-Sitemap for that.\n\n[Star Next-Sitemap if you can ü•∞](https://github.com/iamvishnusankar/next-sitemap)\n\n[![sitemap.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--mZCzzNhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/sitemap.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--mZCzzNhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/sitemap.gif)\n\n* * *\n\n## [](#5-next-seo)5\\. [Next SEO](https://github.com/garmeeh/next-seo)\n\nSEO is the process of making your website appear on the google feed for different queries by providing keywords, descriptions, and images to your website preview.\n\nIf you use the new NextJS app router, you might not need to use it.\n\nYou can use their `export metadata` approach or `generateMetadata`,  \nbut if you use the old app router, that's the best way to add SEO to your website.\n\n[Star Next SEO if you can ü•∞](https://github.com/garmeeh/next-seo)\n\n[![seo.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--rbpSJ27_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/seo.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--rbpSJ27_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/seo.gif)\n\n* * *\n\n## [](#6-zod)6\\. [Zod](https://github.com/colinhacks/zod)\n\nZod is an object validator (both server and client).  \nYou can put different rules on an object and validate it later, such as username and password, or more complex things like the array length or conditions on other keys. _Zod is not NextJS specific._\n\nOver the years, I have seen a lot of object validators, such as [Yup](https://github.com/jquense/yup) and [class-validator](https://github.com/typestack/class-validator).\n\nYup, it looks not as maintained as Zod, and the class-validator is powerful when using things like NestJS - so you best go with Zod.\n\n[Star Zod if you can ü•∞](https://github.com/colinhacks/zod)\n\n[![zod.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--zU3OvUff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/zod.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--zU3OvUff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/zod.gif)\n\n* * *\n\n## [](#7-reacthookform)7\\. [React-hook-form](https://github.com/react-hook-form/react-hook-form)\n\nWhile Zod can validate objects, it will not affect your client and backend without customized logic.\n\nReact-hook-form is an excellent project for client validation (showing errors on inputs, managing the input state, and submitting).\n\nOf course, you can use Zod as a validator for React-hook-form.\n\n[Star React Hook Form if you can ü•∞](https://github.com/react-hook-form/react-hook-form)\n\n[![hookform.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4omIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/hookform.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4omIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/hookform.gif)\n\n* * *\n\n## [](#8-trpc)8\\. [tRPC](https://github.com/trpc/trpc)\n\nI would admit that I have never used tRPC before, but it looks like it's getting a lot of eyes today.\n\nIt has a similar concept as Prisma; they generate an interface for your request and response, so when you use frontend calls, you get that autocomplete.\n\nThat's great because it reduces the chance of bugs - let's say you modified a backend route, you won't be able to compile the project - the client will return an error of nonexisting parameters or response keys.\n\n[Star tRPC if you can ü•∞](https://github.com/trpc/trpc)\n\n[![trpc.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--PVUrR9Qo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/trpc.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--PVUrR9Qo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/trpc.gif)\n\n* * *\n\n## [](#9-swr-and-reactquery)9\\. [SWR](https://swr.vercel.app) and [React-Query](https://github.com/TanStack/query)\n\nI have used Axios and fetch as base libraries for sending requests for years.\n\nSWR and React-Query enhance those libraries and offer hooks, caching, transformation, etc.\n\nHighly recommended for every project. Pay attention that those libraries are for client components (`use client`), not server components.\n\n[Star React Query if you can ü•∞](https://github.com/TanStack/query)\n\n[![query.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--_HyPWCab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/query.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--_HyPWCab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/query.gif)\n\n* * *\n\n## [](#10-lodash)10\\. [lodash](https://lodash.com)\n\nThis is not a NextJS-specific library.  \nIt's a library for mutating data, and while JavaScript progressed a lot during the years with excellent native functions like flatMap, there are still things that are missing, such as unique array by key or chunking and array.\n\nI find myself using lodash for almost any project.\n\n[Star lodash if you can ü•∞](https://github.com/lodash/lodash)\n\n[![lodash.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--FZox9NTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/lodash.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--FZox9NTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/lodash.gif)\n\n* * *\n\n## [](#11-dayjs)11\\. [dayjs](https://day.js.org/)\n\nday.js is a library for everything related to dates, formatting, timezones, etc.\n\nI might get roasted for that one. I have been working with `moment.js` for years.\n\nNow that it's not maintained anymore, dayjs is a good alternative.\n\nSome people prefer the new JS functions to deal with dates, but I still feel a significant gap exists between the dayjs options and the native JS date functions.\n\n[Star dayjs if you can ü•∞](https://github.com/iamkun/dayjs)\n\n[![scrolldown.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--hpXRJWhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/scrolldown.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--hpXRJWhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/scrolldown.gif)\n\n* * *\n\n## [](#12-jsdom)12\\. [jsdom](https://github.com/jsdom/jsdom)\n\nThis is not a must, but I have been using it lately for many projects as an alternative to [cheerio](https://github.com/cheeriojs/cheerio).\n\nYou can take an entire page content (`<html><body>‚Ä¶.</html>)` and turn it into an object you can manipulate later with the ‚Äúnative‚Äù javascript dom functions `querySelector`, `innerHTML`, etc‚Ä¶\n\nGreat for projects that require some scraping.\n\n[Star jsdom if you can ü•∞](https://github.com/jsdom/jsdom)\n\n[![jsdomer.gif](https://res.cloudinary.com/practicaldev/image/fetch/s--A6y-G2oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/jsdomer.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--A6y-G2oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://nevdav2.dreamhosters.com/wp-content/uploads/2023/12/jsdomer.gif)\n\n* * *\n\nLet's connect on X? :)  \n[I'm here](https://twitter.com/nevodavid)\n\nDo you use some other cool libraries for NextJS?\n\nLet me know about them in the comments :)\n\n**Author**: [Nevo David](https://dev.to/nevodavid)",
    "shortDescription": "I have been a full-stack developer for the last decade, building smaller projects like gitup and...",
    "htmlMeta": "<meta property=\"og:title\" content=\"üî• Top 12 libraries for your NextJS project üèÜ\">\n<meta property=\"og:description\" content=\"I have been a full-stack developer for the last decade, building smaller projects like gitup and...\">\n<meta name=\"keywords\" content=\"webdev, javascript, tutorial, react, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iwBV--KU--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9b8cdyzavq8i52rf0rz.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Top-12-libraries-for-your-NextJS-project",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9b8cdyzavq8i52rf0rz.gif"
  },
  {
    "title": "12 Senior Developer Traits Juniors Need To Master üî•",
    "url": "https://dev.to/dragosnedelcu/12-senior-developer-traits-junior-developers-need-to-master-285m",
    "tags": ["javascript", "career", "productivity", "react"],
    "published_at": 1702481891000,
    "markdownContent": "The fastest way to get to the top in any field, whether it is arts, sports or software development is to study the people that are already at the top‚Ä¶¬†And do what they are doing that you are not.\n\nIf you write code for a living, this means taking a look at Senior Developers. It means identifying what skills, habits, and traits they possess that you don‚Äôt.¬†\n\nAfter spending thousands of hours in the last 3 years working with top-notch Software Engineers worldwide, I found out that there are 12 Senior Developer traits that you can put in place right now to fast-track your growth to the next level.¬†\n\nLet‚Äôs start with number one‚Ä¶\n\n## [](#1-focus)1\\. Focus\n\nFocus means saying no to some things, so we can do others.¬†\n\nIdeally, saying no to the things that don‚Äôt matter. And saying yes to the stuff that makes a difference. The stuff that moves the boat faster.¬†\n\nThis is really hard for many developers because it goes against our natural instinct. It means accepting that you can‚Äôt do everything. And that not every opportunity is created equal.\n\nYou can‚Äôt learn every new framework out there. You can‚Äôt read every newsletter. You can‚Äôt attend every conference. And you don‚Äôt have to.\n\nYour time is limited. So is your energy.¬†\n\nBeing a Senior Developer means picking your battles.¬†\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--7LonvABd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wftnt9w68gjflh2yghs0.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--7LonvABd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wftnt9w68gjflh2yghs0.png)\n\n> ‚ÄúPeople think focus means saying yes to the thing you've got to focus on. But that's not what it means at all. It means saying no to the hundred other good ideas that there are.‚Äù - Steve Jobs\n\nFunny enough, the better you can pick, the faster you will progress. Senior Developers have the same 24 hours in the day that you have. But they get more done.\n\nHow?\n\nBy doing less.\n\nWhen a new thing comes your way, ask yourself \"Does this really matter?\" Or is it just another trend? Chances are it is just another distraction disguised as an opportunity.¬†\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--vqyn8dkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgqenoavc69esm48yf06.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--vqyn8dkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgqenoavc69esm48yf06.png)\n\nSenior Developers say more no‚Äôs than yeses. They finish more projects than they start. And they master the framework they already work with, before learning a new one.¬†If you want to get to Senior faster, the first trait you need to develop is focus.¬†\n\n## [](#2-second-order-thinking)2\\. Second Order Thinking\n\nOne thing that screams \"Junior dev\" is the attitude of \"let‚Äôs build it and we will find out\". Juniors have a bias for coding first and thinking second.¬†\n\nThat can be a good attitude if you are just starting out, but when you are working on production-ready software, some technical decisions you won‚Äôt be able to change. Or change easily.¬†\n\nFor example, you choose Vue as a front-end framework.\n\nThen, requirements change. You start thinking React would be a better option. Sure, you can switch to React. But it will be neither easy nor cheap.\n\nSenior Developers know it is easy to get high on your own supply. But if you fall in love with the frameworks and libraries you know best, you will start making poor technical decisions.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--nyFwH6ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eb6xwgv7jhmn4p7qcq1.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--nyFwH6ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eb6xwgv7jhmn4p7qcq1.png)\n\nThey think twice about the consequences of their choices. This can mean asking the ‚Äúfive whys‚Äù when trying to understand a problem.\n\nOr thinking about the possible drawbacks their solution could have.\n\nFor example, now that we have added Redux, global state might be a bit easier to manage. But we will have to onboard new developers on Redux. The learning curve is high.\n\nAnd, guess what, our JavaScript bundle will get bigger which is not good for performance.\n\nConsidering second-order circumstances will make you a much better developer. It will also help you during technical interviews.\n\nüö® P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) üö®\n\n## [](#3-pragmatism)3\\. Pragmatism\n\nWhen Junior Developers read a book on best practices, they jump and try to apply them to every line of code in any release. They follow them religiously.¬†\n\nIf you can't make technical decisions by yourself, it is much easier to stick to predefined rules. But software development is not a religion.\n\nA good example is Testing.\n\nWhen a Junior dev reads about TDD (Test Driven Development), they will start trying to test everything. Aiming for full code coverage. When in fact, complete code coverage gives diminishing results and will turn out to be a waste of time.\n\n[![Every Junior Developer that discovered TDD](https://res.cloudinary.com/practicaldev/image/fetch/s--MPjz6m9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do0uxbjna2alz58b3mvg.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--MPjz6m9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do0uxbjna2alz58b3mvg.png)\n\nSenior Devs know how to balance best practices and time to market. When to take shortcuts and when not to.¬†\n\nHacking things quickly will generate bugs and technical debt. Always sticking by the rules when the context of your code changes will result in bad decisions.\n\nYou need a balance.¬†\n\nBe open to reconsidering your technical choices based on circumstances.\n\n## [](#4-nothing-to-prove)4\\. Nothing To Prove\n\nBecause of lack of confidence, Junior devs find themselves constantly trying to prove themselves to others. Same with Senior developers who are insecure about their value and skills.¬†\n\nThey base their confidence on the validation they receive from others.\n\nThis is a losing game.\n\nThey will try¬†to show how much they know in a certain technical discussion, talking over others, or pushing code late at night or over the weekend.\n\nIn reality, all these behaviors create a toxic team environment and backfire. In the best case, they will make you look less Senior than you actually are.¬†\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--OMq9X8RD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sfp7p24zru1r9zafd05.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--OMq9X8RD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sfp7p24zru1r9zafd05.png)  \nThe Cheetah doesn‚Äôt have to prove itself in the race, it only runs to hunt.\n\nThere are two ways to deal with this.¬†\n\nThe first one is to stop spending so much on external validation. Because the truth is you don‚Äôt need to prove yourself to anyone. Only to yourself.\n\nThe second is making peace with the negative voices in your head.\n\nYou can be your worst critic. Perfectionism, fear of failure, and a mistaken idea of what a \"real\" developer is are destroying your self-esteem. That‚Äôs why no matter how hard you work you always feel like falling short.¬†\n\nIt‚Äôs time to get out of your head.\n\nFocus on mastering your craft and the rest will follow.¬†You will instantly become more confident in yourself and your skills. And you will stop trying to prove yourself to strangers.\n\n## [](#5-master-the-fundamentals)5\\. Master The Fundamentals\n\nWhenever I bump into a LinkedIn profile of a developer and they describe themselves as a \"React\" developer, or an \"Angular\" developer, I know they are not Senior. They might be Senior in that framework, but not Senior overall.\n\nA Framework developer will never be a Senior Developer.\n\nFrameworks don‚Äôt make you Senior because frameworks are only the icing on the cake. Not the cake itself. The tip of the iceberg, versus its bottom.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--CBMvBobU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chomoxfdvoemx4m4n15o.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--CBMvBobU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chomoxfdvoemx4m4n15o.png)\n\nI would even speculate that behind the current epidemic of Impostor Syndrome among software developers, even Senior ones is not a lack of talent or lack of hard work.¬†\n\nIt is weak fundamentals.\n\nThis is also why topics like debugging or performance optimization are a guessing game for most developers. They are not used to digging below the surface of the libraries and tools they are working with.\n\nTo become a Senior Developer you must not only understand the ‚ÄúWhat‚Äù but also the ‚ÄúWhy‚Äù behind things.\n\nA Senior developer would, for example, not only be able to build a React application. But they would also understand why React has been built in a certain way. And how it blends with the language it‚Äôs been written in (JavaScript/TypeScript) and the platform it runs on (the Web Browser).\n\nThe good news is that once you get the fundamentals handled, the level of everything will rise.\n\nüö® P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) üö®\n\n## [](#6-deliver-endtoend%C2%A0)6\\. Deliver End-to-end¬†\n\nThe #1 reason why companies avoid Junior developers is that they need a lot of external help to get things done. External help means you will be bothering a Senior developer to get your stuff done.¬†\n\nJunior developers are considered ‚Äúexpensive‚Äù because they can‚Äôt deliver independently.\n\nInstead, Senior developers can deliver end-to-end. Give them a bunch of requirements and they will figure out the rest. This doesn‚Äôt mean they are lone wolves, they are usually great at working in a team.¬†\n\nIt doesn't mean Senior devs hack things quickly just to push them forward.\n\nThat‚Äôs not a ‚Äúreal‚Äù Senior.\n\nAnd it doesn‚Äôt mean that they know every part of the software development lifecycle in depth.¬†\n\nBut, Senior developers understand all the major pieces across the software development life cycle. And can contribute to each of them (frontend, backend, deployment).\n\nIf you are a Junior/Mid developer looking to level up, end-to-end delivery is one trait you need to put your eyes on.\n\n## [](#7-mental-models%C2%A0)7\\. Mental Models¬†\n\nOne of the main things that sets Senior devs apart from more Junior ones is the amount of complexity they can handle.\n\nSeniors can understand more complex codebases and requirements.¬†\n\nThey can understand second-order circumstances. How changes in the codebase will affect performance, costs, and even the team.¬†\n\nAnd they do that not because they memorise every implementation detail. That's impossible because human memory is very limited.\n\nThey do that because they abstract the complexity of the code into mental models. These are simple ways of representing reality.\n\nHow can developers build quality Mental Models?\n\nBy looking behind frameworks and libraries and learning the design patterns behind them. There is a lot of noise out there depending on your tech stack. Things like SOLID principles, or MVC‚Ä¶\n\nBut I think the best way to start is by picking whatever framework you are working with and trying to look beyond the code.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--skGNbI-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk2opgm1njc76p0a6k0n.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--skGNbI-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk2opgm1njc76p0a6k0n.png)\n\nStart asking yourself, why did the creators of the framework build it this way? Is it built on new concepts or is it just an implementation of age-old principles (which is usually the case)?¬†\n\nBy answering these questions you will build your mental models on software development, and be able to handle more complexity. That‚Äôs one of the most effective ways to fast-track your growth to Senior Developer.¬†¬†\n\nüö® P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) üö®\n\n## [](#8-senior-developers-control-the-story)8\\. Senior Developers Control The Story\n\nOne thing Senior Developers can do extremely well is lead technical discussions and influence other people around them. Be it business stakeholders, product managers or fellow developers, Senior devs know how to guide them in the right direction.\n\nThey do this using a mix of assertiveness, technical expertise, and communication skills.¬†\n\nSenior developers are also able to set strong boundaries.¬†\n\nThey can disagree without getting emotional. They can stand up for themselves (and others) during meetings. They negotiate their salary aggressively.¬†\n\nAnd they tell their own story.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--jueySC2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd8vutmtz3wbxas13ey1.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--jueySC2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd8vutmtz3wbxas13ey1.png)  \nSenior Developers know how and when to draft a line in the sand and say \"enough is enough\".\n\nIf another developer starts blaming others during a code review, Seniors know how to stop them. If higher management tries to get into a developer‚Äôs work and micromanage, Seniors know how to push them back without damaging the relationship.¬†\n\nThere is no step-by-step guide on how to become more assertive as a developer.¬†\n\nIt takes repetition and practice. The first step is to stop saying ‚ÄúYes‚Äù all the time. And to start trying to get your way in salary negotiations.¬†\n\n## [](#9-long-term-thinking)9\\. Long Term Thinking\n\nJunior developers think for ‚Äúnow‚Äù. They think short term. That is true for their code when they take shortcuts. A Junior Developer will extend a piece of code without thinking about refactoring it properly or simply ignore testing and performance.\n\nBut Juniors also think short term about their careers.¬†\n\nThis can mean job hopping too much or burning bridges. It can mean neglect.¬†\n\nLike not improving your skills or the way you sell yourself because right now your job is stable. Just to regret it six months later after getting laid off.\n\nPart of becoming a more Senior developer is starting to think long-term.\n\nThe first way to do that is by changing your mindset. Most short-term thinking that Junior devs have is not caused by laziness but by self-doubt.\n\nDeep inside they are still thinking whether being a developer is the right thing for them. Or whether they picked the right career.\n\nThese doubts stop them from committing long-term.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--A6tltXNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw1r4ng1hoyigg3e0z6v.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--A6tltXNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw1r4ng1hoyigg3e0z6v.png)  \nGood things take time, Senior developers know this and adjust their thinking accordingly.\n\nAnd now with AI threatening the end of software development, this short-term thinking is more frequent than ever. Why commit to something anyway if it is going to be gone soon?\n\nTrust me on this, it is only when I made a full commitment to my career as a developer that things started to take off.¬†\n\nI said, ‚Äúthis is it‚Äù.\n\nI stopped looking outside. I told myself: this is my job now and it will be my job for the next decade so let me do it well.¬†\n\nI started investing in my skills because now I know they will pay off.¬†\n\nEven if you are not going to write code for the next 20 years, having a long-term mindset will bring you great benefits. Senior developers got to Senior level because they committed to their craft. If you aspire to get there, you should do the same.¬†\n\nüö® P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) üö®\n\n## [](#10-excellence-is-a-habit)10\\. Excellence Is A Habit\n\nI think it was Kent Beck who said the famous phrase \"I am not a great programmer, just a good programmer with great habits\". Habits are important because they stand the test of time.¬†\n\nBecause any kind of knowledge you have about a JavaScript framework will sooner or later become obsolete. Technology changes. But your habits will stay with you forever.¬†\n\nThe good news is that humans are creatures of habit.\n\nIt is not easy to set new routines in our brains.\n\nBut once we interiorise them as habits, we have an easy time following through. The best way to take advantage of this is to get whatever goal you have and break it into daily actions. Then turn those actions into habits through repetition.\n\nFor example, if you want to get better at testing, write one unit test every day.¬†\n\nIf you want to be more prepared in the daily meeting, and think clearly, keep a journal. If you want to find a new developer job, and you have to send 100 applications, send 10 applications every day.¬†\n\nSet up new habits and your progress towards the Senior level will be constant and steady.¬†\n\n## [](#11-protect-your-most-important-asset)11\\. Protect Your Most Important Asset\n\nBeing a Senior Developer means thinking long-term not only about your code and technical decisions but also about your health.\n\nBecause health is wealth.\n\nI talk about this again and again in my videos.\n\nDeveloper jobs are extremely sedentary. You spend most of your day sitting in a chair in front of a computer. That is very bad for your health.¬†\n\nThen, there is all the trash food, like chips, soda, and candy in the office. This means unless you make a conscious effort, it will be hard for you to stay healthy and in shape.¬†¬†¬†\n\nBut if you want to have a long and productive career writing software, and you don‚Äôt want to end up with back problems, diabetes, or even something worse, you need to start taking care of your health.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--lfsPwdtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsdohne0ydvireyloigf.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--lfsPwdtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsdohne0ydvireyloigf.png)\n\nIf you want the golden eggs, don't kill the goose. If you want more productivity, take care of yourself first.\n\nThis doesn‚Äôt mean you have to start hitting the gym 5 times a week.¬†\n\nOr go on some crazy diet. But do sports at least 2 to 3 times a week. You can hit the gym, go for a run, or do a team sport. Right now I am doing¬†\n\nOn the diet side, cut on sugar and refined carbs. Don‚Äôt overdo it with the meat either.¬†\n\nConsider your mental health as well.\n\nIgnore advice like ‚Äúeat, sleep code, repeat‚Äù and build a life outside of work.\n\nStart a new hobby. Reach out to a friend. Take breaks.¬†\n\nIn the short run, you might progress a bit slower. But in the long run, you will be able to stay in the game for a longer time.\n\nüö® P.S. Are you looking to fast-track to Senior Developer with quality resources, feedback, and accountability? [Click here to join our Free Community - The Senior Dev Academy.](https://bit.ly/3GJuOjr) üö®\n\n## [](#12-close-the-circle)12\\. Close The Circle\n\nFinally, Senior Devs understand how karma works. They know that no matter how hard they work, or how smart they are, dozens of people helped them on their way to the top.¬†\n\nThis doesn‚Äôt take away their merit but acknowledges other people as well.¬†\n\nSo they close the circle.¬†\n\nThey help other developers out. And they do it without expectations.¬†\n\nNot because it might get you a promotion. Or status, or admiration. They do it because it is the right thing to do.¬†\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--JLteCl_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urp75psyn2lz8oah3cq7.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--JLteCl_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urp75psyn2lz8oah3cq7.png)  \nEven Kobe Bryant found the time to mentor young kids and get them into basketball. You can also find the time to help a fresh developer out.\n\nHelping someone who is just starting out will give you back part of the spark. The passion and curiosity that a beginner feels when they see things for the first time is so contagious.\n\nAnother thing you can turn into a daily habit!¬†\n\nOkay, this is it. Put in place these 12 traits and you will fast-track your growth to a Senior level and beyond.¬†\n\nMoving forward, here are 2 things I want you to do:¬†  \n**1\\. What are some traits you‚Äôve seen in Senior Developers that you think we should add to the list? Comment below, and I will try to answer all your comments!**\n\n**2\\. If you are an ambitious developer trying to level up and you are searching for a community of like-minded people, [click here to join our free community for JavaScript developers looking to fast-track to Senior level](https://bit.ly/3GJuOjr).**\n\n**Author**: [Dragos Nedelcu](https://dev.to/dragosnedelcu)",
    "shortDescription": "The fastest way to get to the top in any field, whether it is arts, sports or software development is...",
    "htmlMeta": "<meta property=\"og:title\" content=\"12 Senior Developer Traits Juniors Need To Master üî•\">\n<meta property=\"og:description\" content=\"The fastest way to get to the top in any field, whether it is arts, sports or software development is...\">\n<meta name=\"keywords\" content=\"javascript, career, productivity, react, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gsqL7P6w--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4ajwny1h3upzbd4y711.jpeg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "12-Senior-Developer-Traits-Juniors-Need-To-Master",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4ajwny1h3upzbd4y711.jpeg"
  },
  {
    "title": "‚ú® 31 Open-Source Libraries + Good First Issues (to kickstart your portfolio) ‚õ∞Ô∏è",
    "url": "https://dev.to/copilotkit/31-open-source-libraries-to-kickstart-your-journey-4hhd",
    "tags": ["opensource", "react", "ai", "programming"],
    "published_at": 1704474082000,
    "markdownContent": "Contributing to a great open-source library is the best way to establish your portfolio and to join an amazing community.\n\nI've compiled 31 open-source libraries and some good first issues to help boost your journey.\n\nDON'T FORGET TO STAR & SUPPORT THESE üåü\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--ledHwD83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/637xnt75fuwgfeaasdke.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--ledHwD83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/637xnt75fuwgfeaasdke.gif)\n\n* * *\n\n# [](#ai-favorites)AI Favoritesü¶æ:\n\n### [](#1-copilotkit-inapp-ai-chatbots-and-ai-textareas)1\\. [CopilotKit](https://github.com/CopilotKit/CopilotKit) - In-app AI chatbots and AI Textareas\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--JZJQpUKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox3mv8nmqzot6m4kvkdh.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--JZJQpUKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox3mv8nmqzot6m4kvkdh.png)\n\nOpen-source platform for integrating key AI features into react apps using two react components.\n\nCopilotPortal: in-app AI chatbots that can \"see\" the current app state and take actions.  \nCopilotTextarea: AI-powered replacement. With autocomplete, insertions and generations.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/CopilotKit/CopilotKit/issues/62)\n\n```plaintext\nGracefully fail if CopilotProvider is omitted \n\n\nThe bug:\n\nVirtually every CopilotKit functionality depends on a CopilotContext provided by the CopilotProvider. e.g. CopilotTextarea autocompletions, chatbot, etc. \nHowever when a CopilotProvider does not wrap the component, functionality fails silently.  \n\n\nTo Reproduce   \n\n1. Omit <CopilotProvider>...</CopilotProvider> \n2. trigger useMakeCopilotReadable, useMakeCopilotActionable, CopilotTextarea, CopilotSidebarUIProvider \n3. See how functionality does not work, but no error is emitted \n\nExpected behavior An error is emitted, with clear description of the likely core issue and how to resolve it (namely, wrap the app in a CopilotProvider). Point to docs.\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star CopilotKit ‚≠êÔ∏è](https://github.com/CopilotKit/CopilotKit)\n\n* * *\n\n### [](#2portkeyai-embed-httpsgithubcomportkeyaigateway-noreadme-)2.[PortKeyAI](https://github.com/Portkey-AI/gateway)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [Portkey-AI](https://github.com/Portkey-AI) / [gateway](https://github.com/Portkey-AI/gateway)\n\n### A Blazing Fast AI Gateway. Route to 100+ LLMs with 1 fast & friendly API.\n\n### [](#3pezzoai-embed-httpsgithubcompezzolabspezzo-noreadme-)3.[Pezzo.ai](https://github.com/pezzolabs/pezzo)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [pezzolabs](https://github.com/pezzolabs) / [pezzo](https://github.com/pezzolabs/pezzo)\n\n### üïπÔ∏è Open-source, developer-first LLMOps platform designed to streamline prompt design, version management, instant delivery, collaboration, troubleshooting, observability and more.\n\n### [](#4openvoice-embed-httpsgithubcommyshellaiopenvoice-noreadme-)4.[OpenVoice](https://github.com/myshell-ai/OpenVoice)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [myshell-ai](https://github.com/myshell-ai) / [OpenVoice](https://github.com/myshell-ai/OpenVoice)\n\n### Instant voice cloning by MyShell.\n\n### [](#5llmcourse-embed-httpsgithubcommlabonnellmcourse-noreadme-)5.[LLMCourse](https://github.com/mlabonne/llm-course)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [mlabonne](https://github.com/mlabonne) / [llm-course](https://github.com/mlabonne/llm-course)\n\n### Course to get into Large Language Models (LLMs) with roadmaps and Colab notebooks.\n\n* * *\n\n# [](#cloud-amp-database)Cloud & Database‚òÅÔ∏è\n\n### [](#6-winglang-cloud-oriented-programming-language)6\\. [Winglang](https://github.com/winglang/wing) - Cloud Oriented Programming Language\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--yHZ5Vi9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvfykepsj1tszs8260wj.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--yHZ5Vi9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvfykepsj1tszs8260wj.png)\n\nWing is a programming language for cloud apps.\n\nIt combines code for cloud infrastructure and applications, making cloud service development easier.\n\nWing's unique execution model and testing simulator help build and deploy cloud apps efficiently.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/winglang/wing/issues/4998)\n\n```plaintext\nSupport Array.sort() method\n\nFeature Spec:\n\nlet arr: MutArray<num>=[2, 1, 3, 9, 6, 4]; \narr.sort(); \nlog(\"${arr}\");  // it should print sorted array in ascending order, eg: [1, 2, 3, 4, 6, 9] \n\nComponent:\nWing SDK  \n\nCommunity Notes: \n\nIf you are interested to work on this issue, please leave a comment. If this issue is labeled needs-discussion, it means the spec has not been finalized yet. Please reach out on the #dev channel in the Wing Slack.\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star Winglang ‚≠êÔ∏è](https://github.com/winglang/wing)\n\n* * *\n\n### [](#7-stackql-sqlbased-cloud-resource-management)7\\. [StackQL](https://github.com/stackql/stackql) - SQL-Based Cloud Resource Management\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--ou9IeM-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdtf51ekap09idn80xnh.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ou9IeM-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdtf51ekap09idn80xnh.png)\n\nStackQL provides a unique SQL-based framework to manage and query cloud resources and APIs across different providers like Google, AWS, Azure, and more.\n\nIt simplifies cloud operations by allowing SQL-like commands for provisioning and operating cloud services.\n\nThis makes StackQL a versatile tool for cloud resource management and interaction, especially for those familiar with SQL.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/stackql/stackql/issues/280)\n\n```plaintext\nAdd unit testing to package writer\n\nAdd unit testing for internal/stackql/writer .\n\nDescription: \nadd implementation for testing sql_writer.go\nmodify sql_writer.go by adding function for dependency injection\nadd implementation for testing generic.go\nmodify generic.go by adding variable for patching GetDB function\nmodify entryutil.go to adjust sql_writer.go\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star StackSQL ‚≠êÔ∏è](https://github.com/stackql/stackql/)\n\n* * *\n\n### [](#8appwrite-embed-httpsgithubcomappwriteappwrite-noreadme-)8.[Appwrite](https://github.com/appwrite/appwrite)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [appwrite](https://github.com/appwrite) / [appwrite](https://github.com/appwrite/appwrite)\n\n### Build like a team of hundreds\\_\n\n### [](#9supabase-embed-httpsgithubcomsupabasesupabase-noreadme-)9.[Supabase](https://github.com/supabase/supabase)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [supabase](https://github.com/supabase) / [supabase](https://github.com/supabase/supabase)\n\n### The open source Firebase alternative.\n\n### [](#10superduperdb-embed-httpsgithubcomsuperduperdbsuperduperdb-noreadme-)10.[SuperDuperDB](https://github.com/SuperDuperDB/superduperdb)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [SuperDuperDB](https://github.com/SuperDuperDB) / [superduperdb](https://github.com/SuperDuperDB/superduperdb)\n\n### üîÆ SuperDuperDB. Bring AI to your database; integrate, train and manage any AI models and APIs directly with your database and your data.\n\n* * *\n\n# [](#dev-utilities)Dev Utilitiesüõ†Ô∏è\n\n### [](#11-firecamp-multiprotocol-api-collaboration-tool)11\\. [Firecamp](https://github.com/firecamp-dev/firecamp) - Multi-Protocol API Collaboration Tool\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--zLChMF2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adt6n8uv5dseylmemng0.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--zLChMF2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adt6n8uv5dseylmemng0.png)\n\nFirecamp is a versatile API development tool, supporting protocols like Rest, GraphQL, and WebSockets.\n\nIt simplifies designing, testing, and documenting APIs, and enhances team collaboration on API projects.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/firecamp-dev/firecamp/issues/137)\n\n```plaintext\nHelp out with Manual Testing of Firecamp\n\nResponsibilities:\nExecuting test cases and reporting results\nLogging bugs and issues in the Github issue tracker\nProviding feedback on usability and the testing process\nSuggesting improvements to tests and expanding test coverage.\nBenefits\n\nBenefits for your testing profile and career:\n\nExperience testing a real-world open source application\nEach release will include your name with bugs fixes.\nExposure to different types of testing such as UI, API, integration, etc\nOpportunity to have your contributions and feedback incorporated into the product\nCollaborating with an open source community\nHaving your testing work visible to potential employers\nFirecamp Swags (T-shirts and stickers)\nCommunity shoutout and promotion\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star Firecamp ‚≠êÔ∏è](https://github.com/firecamp-dev/firecamp)\n\n* * *\n\n### [](#12odigos-embed-httpsgithubcomkeyvaldevodigos-noreadme-)12.[Odigos](https://github.com/keyval-dev/odigos)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [keyval-dev](https://github.com/keyval-dev) / [odigos](https://github.com/keyval-dev/odigos)\n\n### Distributed tracing without code changes. üöÄ Instantly monitor any application using OpenTelemetry and eBPF\n\n### [](#13digger-embed-httpsgithubcomdiggerhqdigger-noreadme-)13.[Digger](https://github.com/diggerhq/digger)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [diggerhq](https://github.com/diggerhq) / [digger](https://github.com/diggerhq/digger)\n\n### Digger is an open source IaC orchestration tool. Digger allows you to run IaC in your existing CI pipeline ‚ö°Ô∏è\n\n### [](#14mirrord-embed-httpsgithubcommetalbearcomirrord-noreadme-)14.[Mirrord](https://github.com/metalbear-co/mirrord)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [metalbear-co](https://github.com/metalbear-co) / [mirrord](https://github.com/metalbear-co/mirrord)\n\n### Connect your local process and your cloud environment, and run local code in cloud conditions.\n\n* * *\n\n# [](#backend)Backend‚öôÔ∏è\n\n### [](#15-cerbos-scalable-languageagnostic-authorization)15\\. [Cerbos](https://github.com/cerbos/cerbos) - Scalable, Language-Agnostic Authorization\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--RWV9KzOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cljttnnxua54lyg4w65x.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--RWV9KzOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cljttnnxua54lyg4w65x.png)\n\nCerbos offers unique, scalable solutions for implementing context-specific user permissions in applications.\n\nIts flexible, language-agnostic approach allows for easy integration and management of complex authorization structures.\n\nDistinctively, Cerbos simplifies the development of access control policies, making them more adaptable to various application needs.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/cerbos/cerbos/issues/1920)\n\n```plaintext\nProduce output when the rule condition is not satisfied\n\nCurrently the output block is only evaluated if the rule is actually activated (action, roles and conditions are satisfied). \nIn certain situations, it's desirable to produce output when the rule is nearly activated (action and roles match but the condition is not satisfied).\n\nIn order to maintain backward compatibility, reduce noise, and to keep policy execution as fast as possible (outputs incur a tiny overhead), the proposal is to let users add an optional when section to the output block to opt into this behaviour.\n\n    - actions: ['view']\n      effect: EFFECT_ALLOW\n      roles: ['user']\n      condition:\n        match:\n          expr: timestamp(R.expiry_date) > now()\n      output: \n        expr: >\n          format(\"%d hours until expiry\", (timestamp(R.expiry_date) - now()).getHours())\n        when:\n          cond_fail: >\n            format(\"expired on %s\", R.expiry_date)\nWhen evaluating the above rule,\n\nif the action, roles and condition match, output will be the result of evaluating output.expr\nIf the condition is not satisfied, output will be the result of evaluating output. when.cond_fail if it exists. Otherwise no output will be produced.\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star Cerbos ‚≠êÔ∏è](https://github.com/cerbos/cerbos)\n\n* * *\n\n### [](#16novu-embed-httpsgithubcomnovuhqnovu-noreadme-)16.[Novu](https://github.com/novuhq/novu)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [novuhq](https://github.com/novuhq) / [novu](https://github.com/novuhq/novu)\n\n### üî• The open-source notification infrastructure with fully functional embedded notification center üöÄüöÄüöÄ\n\n### [](#17triggerdev-embed-httpsgithubcomtriggerdotdevtriggerdev-noreadme-)17.[Trigger.dev](https://github.com/triggerdotdev/trigger.dev)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [triggerdotdev](https://github.com/triggerdotdev) / [trigger.dev](https://github.com/triggerdotdev/trigger.dev)\n\n### ‚ú® Trigger.dev is the open source background jobs framework for TypeScript. With features like API integrations, webhooks, scheduling and delays.\n\n### [](#18supertokens-embed-httpsgithubcomsupertokenssupertokenscore-noreadme-)18.[SuperTokens](https://github.com/supertokens/supertokens-core)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [supertokens](https://github.com/supertokens) / [supertokens-core](https://github.com/supertokens/supertokens-core)\n\n### Open source alternative to Auth0 / Firebase Auth / AWS Cognito\n\n### [](#19wazuh-embed-httpsgithubcomwazuhwazuh-noreadme-)19.[Wazuh](https://github.com/wazuh/wazuh)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [wazuh](https://github.com/wazuh) / [wazuh](https://github.com/wazuh/wazuh)\n\n### Wazuh - The Open Source Security Platform. Unified XDR and SIEM protection for endpoints and cloud workloads.\n\n* * *\n\n# [](#uiux-)UI/UX ü¶ã:\n\n### [](#20-flowbite-top-library-of-css-components)20\\. [Flowbite](https://github.com/themesberg/flowbite) \\- Top Library of CSS Components\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--zUNdssyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98dwqyrhf1pbiqkpko8g.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--zUNdssyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98dwqyrhf1pbiqkpko8g.png)\n\nOne of the best and most respected libraries of UI components.\n\nBased on utility-first CSS framework.\n\nEasy to work with, full of important supports and templates.\n\n[Star Flowbite ‚≠êÔ∏è](https://github.com/themesberg/flowbite)  \n¬†\n\n### [](#21materialui-foundational-react-components-implemented-with-googles-material-design)21.[MaterialUI](https://github.com/mui/material-ui) - Foundational React components implemented with Google's Material Design\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [mui](https://github.com/mui) / [material-ui](https://github.com/mui/material-ui)\n\n### MUI Core: Ready-to-use foundational React components, free forever. It includes Material UI, which implements Google's Material Design.\n\n  \n¬†\n\n### [](#22-swiperui-respected-library-for-implementing-mobile-swipe-ui)22\\. [SwiperUI](https://github.com/nolimits4web/swiper) - Respected library for implementing mobile swipe UI\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [nolimits4web](https://github.com/nolimits4web) / [swiper](https://github.com/nolimits4web/swiper)\n\n### Most modern mobile touch slider with hardware accelerated transitions\n\n  \n¬†\n\n### [](#23reactspring-implement-animations-in-react-with-realistic-physics)23.[ReactSpring](https://github.com/pmndrs/react-spring) - implement animations in React with realistic physics\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [pmndrs](https://github.com/pmndrs) / [react-spring](https://github.com/pmndrs/react-spring)\n\n### ‚úåÔ∏è A spring physics based React animation library\n\n* * *\n\n# [](#misc)Miscüé®\n\n### [](#24-swirlsearch-multisource-ai-data-searcher)24\\. [SwirlSearch](https://github.com/swirlai/swirl-search) - Multi-Source AI Data Searcher\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--pZD65sJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thplxod3d4vh1qq5hhpa.jpeg)](https://res.cloudinary.com/practicaldev/image/fetch/s--pZD65sJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thplxod3d4vh1qq5hhpa.jpeg)\n\nSwirl is an AI-powered search tool that simultaneously queries multiple data sources, including databases and public data services.\n\nIt uses AI to rank results and generate insights, allowing for comprehensive searches across diverse data repositories.\n\nSwirl simplifies searching and analyzing data from various sources in one go, making it a unique tool for data-driven insights.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/swirlai/swirl-search/issues/789)\n\n```plaintext\nAdd a Connector: Yahoo search\n\nIt would help to search anything with Swirl on Yahoo effectively.\n\nLocate and read a bit in their search API first. You might just need to make a new SearchProvider configration vs. a new Connector. Their docs should help guide you a bit in which way you might need to go.\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star SwirlSearch ‚≠êÔ∏è](https://github.com/swirlai/swirl-search/)\n\n* * *\n\n### [](#25-wasp-develop-fullstack-web-apps-with-react-amp-nodejs)25\\. [Wasp](https://github.com/wasp-lang/wasp) - Develop full-stack web apps with React & Node.js\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--prC6b7Tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54jp6j6r8ils6we97i0f.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--prC6b7Tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54jp6j6r8ils6we97i0f.png)\n\nRapid Full-Stack Web App Development with React & Node.js.\n\nWasp offers a simplified approach to building modern web applications, combining React for front-end and Node.js for back-end in a cohesive framework.\n\n### [](#good-first-issue)[Good First Issue:](https://github.com/wasp-lang/wasp/issues/874)\n\n```plaintext\nAdd images (or link to the example app) of auth UI helpers Wasp provides\n\nAt this point in docs (also in the tutorial if we're using it), it would be nice to add an image of UI helpers for Auth (login/signup form, Google/GitHub button, ...) so developers can immediately see what they are getting and how nice it looks.\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[Star Wasp ‚≠êÔ∏è](https://github.com/wasp-lang/wasp)\n\n### [](#26logstash)26.[Logstash](https://github.com/elastic/logstash)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [elastic](https://github.com/elastic) / [logstash](https://github.com/elastic/logstash)\n\n### Logstash - transport and process your logs, events, or other data\n\n### [](#27snapify)27.[Snapify](https://github.com/MarconLP/snapify)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [MarconLP](https://github.com/MarconLP) / [snapify](https://github.com/MarconLP/snapify)\n\n### Screen recording sharing for absolutely everyone.\n\n* * *\n\n# [](#for-fun)For Funüé≠\n\n### [](#28twitters-algorithm-embed-httpsgithubcomtwitterthealgorithm-noreadme-)28.[Twitter's Algorithm](https://github.com/twitter/the-algorithm)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [twitter](https://github.com/twitter) / [the-algorithm](https://github.com/twitter/the-algorithm)\n\n### Source code for Twitter's Recommendation Algorithm\n\n### [](#29one-billion-row-challenge-embed-httpsgithubcomgunnarmorling1brc-noreadme-)29.[One Billion Row Challenge](https://github.com/gunnarmorling/1brc)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [gunnarmorling](https://github.com/gunnarmorling) / [1brc](https://github.com/gunnarmorling/1brc)\n\n### 1Ô∏è‚É£üêùüèéÔ∏è The One Billion Row Challenge -- A fun exploration of how quickly 1B rows from a text file can be aggregated with Java\n\n### [](#30book-of-secret-knowledge-embed-httpsgithubcomtrimstraythebookofsecretknowledge-noreadme-)30.[Book of Secret Knowledge](https://github.com/trimstray/the-book-of-secret-knowledge)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [trimstray](https://github.com/trimstray) / [the-book-of-secret-knowledge](https://github.com/trimstray/the-book-of-secret-knowledge)\n\n### A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools and more.\n\n### [](#31genai-for-beginners-embed-httpsgithubcommicrosoftgenerativeaiforbeginners-noreadme-)31.[GenAI for Beginners](https://github.com/microsoft/generative-ai-for-beginners)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [microsoft](https://github.com/microsoft) / [generative-ai-for-beginners](https://github.com/microsoft/generative-ai-for-beginners)\n\n### 12 Lessons, Get Started Building with Generative AI üîó https://microsoft.github.io/generative-ai-for-beginners/\n\n**Author**: [uliyahoo](https://dev.to/uliyahoo)",
    "shortDescription": "Contributing to a great open-source library is the best way to establish your portfolio and to join...",
    "htmlMeta": "<meta property=\"og:title\" content=\"‚ú® 31 Open-Source Libraries + Good First Issues (to kickstart your portfolio) ‚õ∞Ô∏è\">\n<meta property=\"og:description\" content=\"Contributing to a great open-source library is the best way to establish your portfolio and to join...\">\n<meta name=\"keywords\" content=\"opensource, react, ai, programming, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aSCEs_WT--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef45165r8w6zdaxlnovm.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "31-Open-Source-Libraries-+-Good-First-Issues-(to-kickstart-your-portfolio)",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef45165r8w6zdaxlnovm.gif"
  },
  {
    "title": "üìö 8 repos used by the top 1% of React devs üèÜ",
    "url": "https://dev.to/quine/8-repos-used-by-the-top-1-of-react-devs-2758",
    "tags": ["webdev", "javascript", "programming", "react"],
    "published_at": 1703157344000,
    "markdownContent": "Hi there üëã\n\nToday, let's look into 8 React repos that **the top 1% of developers use** (and those you have likely never heard of).\n\nReady?\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--FEiYJkW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yehweju0i54ov2n6bwt.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--FEiYJkW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yehweju0i54ov2n6bwt.gif)\n\n* * *\n\n# [](#how-do-we-find-the-repos-used-by-the-top-1-of-devs)How do we find the repos used by the top 1% of devs? üî¶\n\nOur story behind how we find what the best developers use is anchored in a lot of data digging and some non-trivial modelling.\n\nNow, at Quine, we rank developers based on their **[DevRank](https://docs.quine.sh/for-developers/devrank)**.\n\nIn simple terms, DevRank uses [Google‚Äôs PageRank algorithm](https://en.wikipedia.org/wiki/PageRank) to measure how important a developer is in open source based on their contributions to open source repos.\n\nTo create this list, we looked at the repos that the top 1% have starred. üåü\n\nThen, we calculated the likelihood that the top 1% of developers will star a repo compared to the likelihood that the bottom 50% won‚Äôt.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--1ln_DIwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miugcnqpataix1fsq6hb.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--1ln_DIwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miugcnqpataix1fsq6hb.png)\n\nLastly, after a little hand-picking, we found the 8 repos below. üëá\n\nThese repos will be **particularly useful when you want to build cool web apps.**\n\nIf you are interested in working on building small apps, and you enjoy the applied AI side, we recommend you check out Creator Quests, an **open-source challenge that rewards developers for creating cool GenerativeAI apps** with ChatGPT, Claude, Gemini and more. üôÉ üí∞\n\nThe latest Creator Quest challenges you to build developer tools using Generative AI. To participate, simply sign up to [Quine](https://quine.sh/?utm_source=devto&utm_campaign=best_react_repos) and head to _Quests_.\n\n**The current prize pool is $2028**, and it will increase as more participants join! Click on the image below and give it a try! ‚¨áÔ∏è\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--3NK9neq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akiuhk62zctvf3b9gilx.png)](https://quine.sh/?utm_source=devto&utm_campaign=best_react_repos)\n\n* * *\n\n# [](#%F0%9F%AA%AE-jsxstylejsxstyle)ü™Æ jsxstyle/jsxstyle\n\n**No more JS to CSS jumping**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--OyPkXp16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h75mskqja5bcwst05e93.png)](https://github.com/jsxstyle/jsxstyle)\n\n**Why should you care?** In web development, with React or Preact, you must style your components (like buttons, menus, etc.). Traditionally, this is done using separate CSS files or complex styling systems, which can be time-consuming and cumbersome to manage. jsxstyle simplifies this process by letting you define styles directly within your JavaScript code, alongside the components. In other words, this means you would no longer need to jump between JS and CSS files.\n\n**Set up**: `npm install jsxstyle`  \n**Example use case**: Your code can look like this. üëá  \n\n```javascript\n<Row padding={15}>\n  <Block\n    backgroundColor=\"#EEE\"\n    boxShadow=\"inset 0 0 0 1px rgba(0,0,0,0.15)\"\n    borderRadius={5}\n    height={64}\n    width={64}\n    marginRight={15}\n    backgroundSize=\"contain\"\n    backgroundImage=\"url(http://graph.facebook.com/justinbieber/picture?type=large)\"\n  />\n  <Col fontFamily=\"sans-serif\" fontSize={16} lineHeight=\"24px\">\n    <Block fontWeight={600}>Justin Bieber</Block>\n    <Block fontStyle=\"italic\">Canadian</Block>\n  </Col>\n</Row>\n\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/jsxstyle/jsxstyle](https://github.com/jsxstyle/jsxstyle)\n\n* * *\n\n# [](#alangpiercesucrase)üí® alangpierce/sucrase\n\n**A super-fast alternative to Babel**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--hPW7eYzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk9ceq6mlw8ya0f2icb8.png)](https://github.com/alangpierce/sucrase)\n\n**Why should you care?** Babel is a widely used tool in web development that converts modern JavaScript code into a format that older browsers can understand. Sucrase is a faster alternative to Babel.\n\n**Set up**:  \n\n```plaintext\nyarn add --dev sucrase  # Or npm install --save-dev sucrase\nnode -r sucrase/register main.ts\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Example use case**: Sucrase can be called from JS directly:  \n\n```javascript\n\nimport {transform} from \"sucrase\";\nconst compiledCode = transform(code, {transforms: [\"typescript\", \"imports\"]}).code;\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/alangpierce/sucrase](https://github.com/alangpierce/sucrase)\n\n* * *\n\n# [](#wooormrefractor)üé® wooorm/refractor\n\n**I colour your web page code to make your life easier**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--1wGxg-zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzwpgi5t47o93kvcbtdq.png)](https://github.com/wooorm/refractor)\n\n**Why should you care?** Refractor is important because it allows you to add highlighting, which enhances readability to your project; especially when you add code snippets to a web application. It allows you to express code in more than 270 programming languages ‚Äã‚Äãand is especially useful in areas where traditional HTML-based highlighting ‚Äã‚Äãis not ideal, such as CLI forms.\n\n**Set up**: `npm install refractor`\n\n**Example use case**:  \n\n```javascript\n\nimport {refractor} from 'refractor'\n\nconst tree = refractor.highlight('\"use strict\";', 'js')\n\nconsole.log(tree)\n\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Yields**:  \n\n```plaintext\n{\n  type: 'root',\n  children: [\n    {\n      type: 'element',\n      tagName: 'span',\n      properties: {className: ['token', 'string']},\n      children: [{type: 'text', value: '\"use strict\"'}]\n    },\n    {\n      type: 'element',\n      tagName: 'span',\n      properties: {className: ['token', 'punctuation']},\n      children: [{type: 'text', value: ';'}]\n    }\n  ]\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/wooorm/refractor](https://github.com/wooorm/refractor)\n\n* * *\n\n# [](#transitivebullshitreactstatictweets)üê¶ transitive-bullshit/react-static-tweets\n\n**Your best choice for adding Tweets on your website.**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--mCE95g2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lvul78znx84ph479fa1.png)](https://github.com/transitive-bullshit/react-static-tweets)\n\n**Why should you care?** Adding Tweets to your website is a cool feature you see on many landing pages. React Static Tweets is important because it provides a highly efficient way to embed tweets in your web projects, offering much faster load times and better performance compared to Twitter's standard embedding method.\n\n**Set up**:  \n\n```plaintext\nnpm install react-static-tweets static-tweets date-fns\n# or\nyarn add react-static-tweets static-tweets date-fns\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Example Use Case:**  \n\n```javascript\nimport React from 'react'\nimport { fetchTweetAst } from 'static-tweets'\nimport { Tweet } from 'react-static-tweets'\n\nconst tweetId = '1358199505280262150'\n\nexport const getStaticProps = async () => {\n  try {\n    const tweetAst = await fetchTweetAst(tweetId)\n\n    return {\n      props: {\n        tweetAst\n      },\n      revalidate: 10\n    }\n  } catch (err) {\n    console.error('error fetching tweet', err)\n\n    throw err\n  }\n}\n\nexport default function Example({ tweetAst }) {\n  return <Tweet ast={tweetAst} />\n}\n\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/transitive-bullshit/react-static-tweets](https://github.com/transitive-bullshit/react-static-tweets)\n\n* * *\n\n# [](#preactjspreactrendertostring)üñ®Ô∏è preactjs/preact-render-to-string\n\n**Render your components in HTML**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--lycOtRfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7djwj6w7nqwfnifc43c.png)](https://github.com/preactjs/preact-render-to-string)\n\n**Why should you care?**  \n\"preact-render-to-string\" is a tool that helps websites load faster and display better in search engines. Websites built using JS frameworks like Preact take a while to display content because the browser must run JavaScript first. This repository does the heavy lifting on the server side by converting the components into ready-to-use HTML. So when someone visits the website, they will see the content immediately, even if the Internet is slow.\n\n**Set up**: `npm install preact-render-to-string`\n\n**Example use case:**  \n\n```javascript\n\nimport { render } from 'preact-render-to-string';\nimport { h, Component } from 'preact';\n/** @jsx h */\n\n// Classical components work\nclass Fox extends Component {\n    render({ name }) {\n        return <span class=\"fox\">{name}</span>;\n    }\n}\n\n// ... and so do pure functional components:\nconst Box = ({ type, children }) => (\n    <div class={`box box-${type}`}>{children}</div>\n);\n\nlet html = render(\n    <Box type=\"open\">\n        <Fox name=\"Finn\" />\n    </Box>\n);\n\nconsole.log(html);\n// <div class=\"box box-open\"><span class=\"fox\">Finn</span></div>\n\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/preactjs/preact-render-to-string](https://github.com/preactjs/preact-render-to-string)\n\n* * *\n\n# [](#bikeshavingcrank)üèÜ bikeshaving/crank\n\n**The Just JavaScript Framework**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--aL7Z6Syd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8hp1ex1qh1sv6isksaq.png)](https://github.com/bikeshaving/crank)\n\n**Why should you care?** In a traditional web framework like React, web components are configured once and changed only when explicitly specified. They look like static images that need to be updated manually. Crank.js changes this by allowing the widget to update itself in response to new data, similar to a news ticker refreshing with new news. This is especially useful for web applications that manage real-time data such as live sports scores or product updates.\n\nThis repo would need more people migrating to this to gain traction, but it is still a very cool repo to keep an eye on. üëÄ\n\n**Set up**: `$ npm i @b9g/crank`\n\n**Example Use Case**:  \n\n```javascript\n\nimport {renderer} from \"@b9g/crank/dom\";\n\nfunction Greeting({name = \"World\"}) {\n  return (\n    <div>Hello {name}</div>\n  );\n}\n\nrenderer.render(<Greeting />, document.body);\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/bikeshaving/crank](https://github.com/bikeshaving/crank)\n\n* * *\n\n# [](#evoluhqevolu)üéØ evoluhq/evolu\n\n**I'm a local-first kind of person**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--blZVabp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k15m25pi0w9pk0g54zrn.png)](https://github.com/evoluhq/evolu)\n\n**Why should you care?** Web applications typically rely on storing user data on servers, which requires constant internet connectivity and raises concerns about privacy and data security. This server-based approach also means slower performance and potential data loss if the server goes down or a company ceases operations.\n\nEvolu introduces a \"local-first\" approach, where data is stored directly on the user's device. This means your applications can work offline, have faster access to data, and offer enhanced privacy and security. This will be useful if you‚Äôre building offline Chrome/browser apps.\n\n**Set up**: `npm install @evolu/react`\n\nTo start using it, you can find this great guide [here](https://www.evolu.dev/docs/quickstart).\n\n[https://github.com/evoluhq/evolu](https://github.com/evoluhq/evolu)\n\n* * *\n\n# [](#jestcommunitysnapshotdiff)üì∏ jest-community/snapshot-diff\n\n**I compare your components and highlight the difference**\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--owfdgaVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy76comkwkqkt0d5qn8z.png)](https://github.com/jest-community/snapshot-diff)\n\n**Why should you care?** When testing React components or other JavaScript values, developers typically compare entire states or outputs. This means dealing with large chunks of data where finding specific changes is like searching for a needle in a haystack. Snapshot-diff is a focused comparison tool that allows you to take two different states of a component (or any two JavaScript values) and directly compare them, highlighting only the differences.\n\nThis is especially helpful in testing React components, as it pinpoints exactly what changed between two states, making it much easier to identify and understand the impact of your code changes.\n\n**Set up**: `yarn add --dev snapshot-diff`\n\n**Example Use Case:** Default Jest Matcher  \n\n```javascript\n\nconst snapshotDiff = require('snapshot-diff');\n\ntest('snapshot difference between 2 strings', () => {\n  expect(snapshotDiff(a, b)).toMatchSnapshot();\n});\n\nconst React = require('react');\nconst Component = require('./Component');\n\ntest('snapshot difference between 2 React components state', () => {\n  expect(\n    snapshotDiff(<Component test=\"say\" />, <Component test=\"my name\" />)\n  ).toMatchSnapshot();\n});\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n[https://github.com/jest-community/snapshot-diff](https://github.com/jest-community/snapshot-diff)\n\n* * *\n\n**I hope these discoveries are valuable to you and will help build a more robust React toolkit!‚öíÔ∏è**\n\nIf you want to leverage these tools today to earn rewards, we have just launched a challenge to build a developer tool using Generative AI.\n\nIf that's of interest, log into [Quine](https://quine.sh/?utm_source=devto&utm_campaign=best_react_repos) and discover Quests! üí∞\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--cqGC-YVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5drisgbolxfnzfvtwzw.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--cqGC-YVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5drisgbolxfnzfvtwzw.gif)\n\nLastly, please **consider supporting these projects by starring them. ‚≠êÔ∏è**\n\nPS: We are not affiliated with them. We just think that great projects deserve great recognition.\n\nSee you next week,\n\nYour Dev.to buddy üíö\n\nBap\n\n* * *\n\nIf you want to join the self-proclaimed \"coolest\" server in open source üòù, you should join our [discord server](https://discord.com/invite/ChAuP3SC5H/?utm_source=devto&utm_campaign=). We are here to help you on your journey in open source. ü´∂\n\n[\n\n![quine image](https://res.cloudinary.com/practicaldev/image/fetch/s--FMdzWAj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://res.cloudinary.com/practicaldev/image/fetch/s--RPRzp5ys--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4224/9191d30a-cfa3-4f20-804a-ab1beeddec8e.gif)\n\n](/quine)\n\n## [Quine](/quine) Follow\n\n[For each open GitHub Issue, there‚Äôs a developer waiting to solve it üíò](/quine)\n\n**Author**: [Bap](https://dev.to/fernandezbaptiste)",
    "shortDescription": "Hi there üëã  Today, let's look into 8 React repos that the top 1% of developers use (and those you...",
    "htmlMeta": "<meta property=\"og:title\" content=\"üìö 8 repos used by the top 1% of React devs üèÜ\">\n<meta property=\"og:description\" content=\"Hi there üëã  Today, let's look into 8 React repos that the top 1% of developers use (and those you...\">\n<meta name=\"keywords\" content=\"webdev, javascript, programming, react, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zGpWnV6i--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4q8ij6q9u10kjgucufw.gif\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "8-repos-used-by-the-top-1percent-of-React-devs",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4q8ij6q9u10kjgucufw.gif"
  },
  {
    "title": "React is Slow, What to do now?",
    "url": "https://dev.to/nikl/react-is-slow-what-to-do-now-369g",
    "tags": ["react", "javascript", "beginners", "testing"],
    "published_at": 1703923714000,
    "markdownContent": "Check out more articles:\n\n1.  [Building a Scalable Notification System with gRPC and Microservices](https://dev.to/suprsend/building-a-scalable-notification-service-with-grpc-and-microservices-l6d)\n2.  [Adding a Notification Feed in React Websites](https://dev.to/suprsend/adding-a-notification-feed-in-react-websites-4oa0)\n3.  [A Complete Guide on Notification Infrastructure for Modern Applications in 2023](https://dev.to/suprsend/a-complete-guide-on-notification-infrastructure-for-modern-applications-in-2023-13b9)\n\n* * *\n\nApplications can generally be categorized into having two types of performance bottlenecks:\n\n1.  **I/O-bound:** These applications spend the majority of their time dealing with inputs and outputs.\n2.  **CPU-bound:** These applications spend the majority of their time engaged in computational tasks.\n\nNow, how do these classifications translate into the context of front-end applications, particularly React apps?\n\n**I/O Performance Challenges in React**\n\nWhen it comes to React applications, issues often arise in terms of I/O performance, primarily related to asynchronous HTTP calls. Ineffectively managing these network requests can lead to a slowdown in the application. While this post primarily focuses on CPU performance, it's essential to briefly touch upon key areas where solutions can be found for I/O-bound problems:\n\n*   Implement lazy loading whenever possible.\n*   Exercise caution during the initial loading of assets and backend requests.\n*   Reduce the frequency of loading highly static elements (e.g., select options, configurations).\n*   Debounce the number of times specific requests are made.\n*   Parallelize requests as much as possible using techniques like Promise.all.\n*   Enhance the efficiency of critical backend endpoints by optimizing database accesses, among other measures.\n\n**CPU Performance Challenges in React**\n\nThe main thrust of this post centers around addressing CPU performance challenges in React. Before delving into the specifics, let's establish a concrete definition of performance:\n\n*   Browser applications predominantly operate as single-threaded programs.\n*   Scripting tasks, such as JavaScript execution, DOM rendering, and event handling, all occur within the same thread.\n*   A slow JavaScript module can potentially block the main thread.\n*   If the main thread is blocked, the user interface becomes unresponsive, resulting in a drop in frames per second (fps).\n*   Responsive UIs aim for a minimum of 30 fps, ideally achieving 60 fps, meaning each frame should compute within 30 ms or less.\n\nIn the context of React, this issue becomes critical. When a React component update is triggered, the entire subtree must be rendered in less than 30 ms. This becomes particularly challenging with complex and lengthy component structures, such as tables, trees, and lists, where large-scale re-renders may be necessary.\n\n**React Render and Commit Phase**\n\nReact, at a high level, operates in two distinct phases:\n\n**Render Phase:**\n\n*   Initiated when a component updates, triggered by changes in props or hooks.\n*   React traverses the component subtree, rendering each child and computing the Virtual DOM (VDOM) subtree.\n*   Only the \"dirty\" subtree, affected by updates, needs to be recomputed; the parents of updated components may not require re-rendering.\n*   The efficiency of this phase is proportional to the size and computational cost of each child component.\n*   React.memo can be employed to provide hints for a more efficient rendering process.\n\n**Commit Phase:**\n\n*   The render phase produces a new Virtual DOM of the entire UI.\n*   In the commit phase, React compares the new tree with the previous one (VDOM diffing).\n*   React calculates the minimum DOM mutations required to reflect the new VDOM tree.\n*   DOM mutations are applied, updating the UI.\n*   This phase is inherently efficient by default.\n*   The entire process must be completed in less than 30 or 16 ms (for 30 fps and 60 fps, respectively) for the UI to be deemed responsive. The workload is directly proportional to the size of the app.\n\nThe subsequent exploration will focus on enhancing the efficiency of the Render phase. Before delving into optimization techniques, it is crucial to understand how to measure and identify the sluggish components in the application.\n\n**Measuring**\n\nAmong the tools I frequently rely on are:\n\n1.  **Chrome Dev Tool‚Äôs Performance Tab**\n2.  **React Dev Tool‚Äôs Performance Tab**\n\n**Chrome Dev Tool‚Äôs Performance Tab**\n\nThis tool stands out as a comprehensive resource applicable to any browser application. It provides insights into frames per second, captures stack traces, identifies slow or hot sections of your code, and more. The primary user interface is represented by the flame chart.\n\nFor an in-depth understanding of Chrome‚Äôs Performance Tab as applied to React, refer to this [documentation](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance).\n\n**React Dev Tool‚Äôs Performance Tab**\n\nTo leverage this tool, you'll need to install the React Dev Tool extension in your browser. It tailors information from the Chrome Dev Tool‚Äôs Performance Tab specifically to React. Through a flame chart, you can observe different commit phases and the JavaScript code executed during the respective render phase.\n\nThis tool aids in easily determining:\n\n*   When a component undergoes re-rendering.\n*   What props have changed.\n*   What hooks have changed, encompassing state, context, and more. For further details, refer to the [introductory post](https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html).\n\n**Measuring Methodology**\n\nHere‚Äôs the methodology I prefer when assessing front-end applications:\n\n1.  **Identify the Problem:**\n    \n    *   Pinpoint page interactions causing UI responsiveness issues.\n2.  **Create a Hypothesis:**\n    \n    *   Optionally, generate ideas about the potential location of the problem.\n3.  **Measure:**\n    \n    *   Verify the problem by measuring essential metrics such as frames per second (fps).\n4.  **Measure (Part II):**\n    \n    *   Identify problematic sections of code; optionally, validate your hypothesis.\n5.  **Create a Solution:**\n    \n    *   Implement a solution based on the insights gathered.\n6.  **Measure the Solution:**\n    \n    *   Validate that the implemented solution resolves or alleviates the problem by examining key metrics.\n\nOptimizing without proper measurement renders efforts practically ineffective. While some problems may be apparent, the majority necessitate thorough measurement, forming the cornerstone of the performance enhancement process.\n\nMoreover, measurements empower you to communicate achievements upwards, informing users, stakeholders, and your leadership about performance improvements achieved within specific areas of your application, expressed as a percentage gain.\n\n**General Solutions to CPU-Bound Problems in React Applications**\n\nNow armed with measurements and an understanding of problematic areas, let‚Äôs delve into potential solutions. Optimizing React performance revolves around improving both what components render and which components render.\n\nMany performance issues also stem from anti-patterns. Eliminating these anti-patterns, such as avoiding inline functional definitions in the render method, contributes to more efficient rendering times. Addressing poor patterns can, in fact, reduce complexity and improve performance simultaneously.\n\n**ü§î Improving What Components Render**\n\nIdentifying sluggish components in our React app typically points to specific components that struggle with rendering or have an excessive number of instances on a single page. Various reasons may contribute to their sluggishness:\n\n*   Blocking calculations within components.\n*   Rendering large component trees.\n*   Utilizing expensive or inefficient libraries.\n\nMost of these issues boil down to enhancing the speed of component rendering. At times, crucial components cannot rely on overly complex libraries, necessitating a return to basic principles and the implementation of simpler alternatives.\n\nFor instance, I encountered such challenges while using Formik excessively within multiple cells of every row in a complex table. While improving the efficiency of individual components goes a long way, attention must eventually shift to which components are rendering.\n\n**üßô Improving Which Components Render**\n\nThis aspect offers two broad categories for improvement:\n\n1.  **Virtualization:**\n    \n    *   Only render components that are visible in the viewport. For example, rendering only the table rows or list items that the user can see. This approach proves beneficial for complex UIs, and while it can be applied without addressing the \"what\" step, it is recommended. Modern libraries often provide robust support for virtualizing tables and lists, with examples like `react-virtualized`. Virtualization reduces the number of components React needs to render in a given frame.\n2.  **Props Optimization:**\n    \n    *   React aims to make components resemble pure functions but may attempt to render more times than necessary.\n\n**React.memo:**\n\n*   Most components in React can be memoized, ensuring that with the same props, the component returns the same tree (although hooks, state, and context are still respected). Leveraging `React.memo` informs React to skip re-rendering these memoized components if their props remain unchanged.  \n    \n    ```jsx\n      import React from 'react';\n    \n      const MyComponent = React.memo((props) => {\n        // Component logic here\n      });\n    \n      export default MyComponent;\n    \n    ```\n    \n\n**Fake Prop Changes: useCallback:**\n\n*   Addressing the issue of fake prop changes involves instances where the content of a prop remains unchanged, but the reference changes. A classic example is an event handler.  \n    \n    ```jsx\n      import React, { useCallback } from 'react';\n    \n      const MyComponent = () => {\n    \n    ```\n    \n\nconst onChange = useCallback((e) => console.log(e), \\[\\]);\n\n```plaintext\n    return <input onChange={onChange} />;\n  };\n\n  export default MyComponent;\n  ```\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Fake Prop Changes: useMemo:**\n\n*   Similar challenges arise when constructing complex data structures without proper memoization before passing them as props. Utilizing `useMemo` ensures that rows are recalculated only when dependencies change, enhancing efficiency.  \n    \n    ```jsx\n      import React, { useMemo } from 'react';\n    \n      const MyComponent = ({ data, deps }) => {\n        const rows = useMemo(() => data.filter(bySearchCriteria).sort(bySortOrder), [deps]);\n    \n        return <Table data={rows} />;\n      };\n    \n      export default MyComponent;\n    \n    ```\n    \n\nWhile you have the flexibility to customize how `React.memo` compares current vs. previous props, it's crucial to maintain a swift calculation since it's an integral part of the Render phase. Avoid overly complex deep comparisons during each render.\n\n## [](#how-does-it-look-now)How does it look now?\n\n### [](#props-changed)Props changed\n\nHow it looks in the React dev tool:\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--XhR4QqWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0wsxe16icfytqfamg3p.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--XhR4QqWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0wsxe16icfytqfamg3p.png)\n\nDid they really? Are they fake prop changes? Use `useCallback` and `useMemo`.\n\n### [](#parent-rendered)Parent rendered\n\nHow it looks in the React dev tool:\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--Hu8nH5by--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilqb2astlchzto603anc.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--Hu8nH5by--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilqb2astlchzto603anc.png)\n\nUse `React.memo` to memoize your pure components.\n\n### [](#hooks-changed-state-context)Hooks changed (state, context)\n\nHow it looks in the React dev tool:\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--n5amQSsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8beosx4hh1n90ejts3h.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--n5amQSsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8beosx4hh1n90ejts3h.png)\n\nNothing too obvious to do here. Try to validate that the hook that changed makes sense. Perhaps a bad context provider is faking out changes the same way as fake prop changes might appear.\n\n* * *\n\n> Similar to this, I personally run a developer-led community on Slack. Where we discuss these kinds of implementations, integrations, some truth bombs, weird chats, virtual meets, and everything that will help a developer remain sane ;) Afterall, too much knowledge can be dangerous too.\n> \n> I'm inviting you to join our free community, take part in discussions, and share your freaking experience & expertise. You can fill out this form, and a Slack invite will ring your email in a few days. We have amazing folks from some of the great companies (Atlassian, Scaler, Cisco, IBM and more), and you wouldn't wanna miss interacting with them. [Invite Form](https://forms.gle/VzA3ST8tCFrxt39U9)\n\n* * *\n\nYou may want to check out a seamless way of integrating your notification infrastructure.\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [suprsend](https://github.com/suprsend) / [suprsend-go](https://github.com/suprsend/suprsend-go)\n\n### SuprSend SDK for go\n\n# suprsend-go\n\nSuprSend Go SDK\n\n## Installation\n\n```\ngo get github.com/suprsend/suprsend-go\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## Usage\n\nInitialize the SuprSend SDK\n\n```\nimport (\n    \"log\"\n\n    suprsend \"github.com/suprsend/suprsend-go\"\n)\n\nfunc main() {\n    opts := \\[\\]suprsend.ClientOption{\n        // suprsend.WithDebug(true),\n    }\n    suprClient, err := suprsend.NewClient(\"\\_\\_api\\_key\\_\\_\", \"\\_\\_api\\_secret\\_\\_\", opts...)\n    if err != nil {\n        log.Println(err)\n    }\n}\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### Trigger Workflow\n\n```\npackage main\nimport (\n    \"log\"\n\n    suprsend \"github.com/suprsend/suprsend-go\"\n)\n\nfunc main() {\n    // Instantiate Client\n    suprClient, err := suprsend.NewClient(\"\\_\\_api\\_key\\_\\_\", \"\\_\\_api\\_secret\\_\\_\")\n    if err != nil {\n        log.Println(err)\n        return\n    }\n    // Create workflow body\n    wfBody := map\\[string\\]interface{}{\n        \"name\":                  \"Workflow Name\",\n        \"template\":              \"template slug\",\n        \"notification\\_category\": \"category\",\n        // \"delay\":                 \"15m\", // Chek duration format in documentation\n        \"users\": \\[\\]map\\[string\\]interface{}{\n            {\n                \"distinct\\_id\": \"0f988f74-6982-41c5-8752-facb6911fb08\",\n                \n```\n‚Ä¶\n\nEnter fullscreen mode Exit fullscreen mode\n\n[View on GitHub](https://github.com/suprsend/suprsend-go)\n\n**Author**: [Nik L.](https://dev.to/nikl)",
    "shortDescription": "Check out more articles:   Building a Scalable Notification System with gRPC and Microservices Adding...",
    "htmlMeta": "<meta property=\"og:title\" content=\"React is Slow, What to do now?\">\n<meta property=\"og:description\" content=\"Check out more articles:   Building a Scalable Notification System with gRPC and Microservices Adding...\">\n<meta name=\"keywords\" content=\"react, javascript, beginners, testing, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7vrcNVqV--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u01qm0mnwqjykc7x1v9f.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "React-is-Slow-What-to-do-now",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u01qm0mnwqjykc7x1v9f.jpg"
  },
  {
    "title": "I built the same app 7 times! Which JS Framework is best?",
    "url": "https://dev.to/johnrushx/i-built-the-same-app-7-times-which-js-framework-is-best-39e0",
    "tags": ["webdev", "react", "alpine", "vue"],
    "published_at": 1703543291000,
    "markdownContent": "_Warning: This post contains a high dose of code, humor, and life-changing revelations. Proceed at your own risk._ üòé\n\nWhen people ask me which frontend framework is my favorite, I usually reply with \"all of them.\" But recently, I decided to put that statement to the test by building the same app using not one or two but **seven** different frontend frameworks.\n\nI'll build a simple To-Do app 6 times using:\n\n1.  Angular\n2.  React\n3.  Vue.js\n4.  Svelte\n5.  Elm\n6.  AlpineJS\n7.  MarsX\n\n## [](#1-first-love-angular)1: First love: Angular üî•\n\nAngular has been around for quite some time now and is known for being powerful yet opinionated (thanks Google). It gave birth to concepts like components and Dependency Injection while rocking our worlds with Two-Way Data Binding. It was my first frontend framework I fell in love with. I tried knockout and few others, didnt like those. But AngularJS won my heart.  \n\n```shell\nng new todo-app --routing=false --style=css\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nInside `app.component.ts`:  \n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <h1>To-Do App</h1>\n    <ul>\n      <li *ngFor=\"let todo of todos\">{{todo}}</li>\n    </ul>\n    <form (submit)=\"addTodo()\">\n      <input [(ngModel)]=\"newTodo\" name=\"newTodo\">\n      <button type=\"submit\">Add</button>\n    </form>`,\n})\nexport class AppComponent {\n  todos = [];\n  newTodo = '';\n\n  addTodo() {\n    this.todos.push(this.newTodo);\n    this.newTodo = '';\n  }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nDon't forget to import and include FormsModule in `app.module.ts`.\n\n## [](#2-react-the-mainstreamer)2: React. The mainstreamer. ‚öõÔ∏è\n\nReact came as Facebook's gift üéÅ to us developers who were tired of manually updating DOM elements every single time something changed in the data model (_cries in vanilla JS_) or seeing our browser freeze once an angularjs app got too much data or constant refresh loops.  \n\n```shell\nnpx create-react-app todo-app\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nInside `App.js`:  \n\n```javascript\nimport React, { useState } from 'react';\n\nfunction App() {\n    const [todos, setTodos] = useState([]);\n    const [newTodo, setNewToDo] = useState('');\n\n    const addTodo = e => {\n        e.preventDefault();\n        setTodos([...todos, newTodo]);\n        setNewToDo('');\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>To-Do App</h1>\n            <ul>{todos.map(todo => (<li key={todo}>{todo}</li>))}</ul>\n\n            <form onSubmit={add_todo}>\n                <input value={new_todo} onChange={(e) => set_new_todo(e.target.value)} />\n                submit_button\n            </form>\n        </div>\n    );\n}\n\nexport default App;\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#3-my-second-wife-vuejs)3: My second wife: Vue.js üíö\n\nVue.js entered our lives as this cool kid on the block who wanted to make things simpler for us developers while giving Angular & React a run for their money.  \n\n```shell\nvue create todo-app\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nInside `App.vue`:  \n\n```html\n<template>\n  <div id=\"app\">\n    <h1>To-Do App</h1>\n    <ul>\n      <li v-for=\"(todo, index) in todos\" :key=\"index\">{{todo}}</li>\n    </ul>\n\n    <form @submit.prevent=\"addTodo\">\n      <input v-model=\"newTodo\"/>\n      <button type=\"submit\">Add</button>\n    </form>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      todos: [],\n      newTodo: '',\n    };\n  },\n  methods: {\n    addTodo() {\n      this.todos.push(this.newTodo);\n      this.newTodo = '';\n    },\n  },\n};\n</script>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nI lost my feeling to VUE once they came up with composition API. Sorry VUE.\n\n## [](#4-svelteing-into-simplicity)4: Svelte-ing into Simplicity üß°\n\nSvelte arrived fashionably late but was worth the wait! This framework promised something different - no virtual DOM! (I know lately they turned into react by adding almost same stuff, but I don't use that stuff, I'm still using the old svelte).  \n\n```shell\nnpx degit sveltejs/template todo-app\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nInside `App.svelte`:  \n\n```html\n<script>\n    let todos = [];\n    let newTodo = '';\n\n    function add_todo(e) {\n\n        e.preventDefault();\n        todos = [...todos, new_todo];\n        new_todo= '';\n\n}\n</script>\n\n<main>\n    <h1>To-Do App</h1>\n    <ul>{#each todos as todo}<li>{todo}</li>{/each}</ul>\n\n<form on_submit|prevent_default={add_todo}>\n<input bind:value={new_todo} />\n<button type=\"submit\">Add</button>\n</form>\n</main>\n\n<style>\n  /* Add your styles here */\n</style>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#5-elminator)5: Elm-inator üå≥\n\nElm stepped into our journey as this purely functional language based on Haskell offering \"no runtime exceptions\" (_cue angelic music_).\n\nInside `src/Main.elm`:  \n\n```elm\nmodule Main exposing (..)\n\nimport Browser\nimport Html exposing (Html, button, div, form, h1, input, li, text, ul)\nimport Html.Attributes exposing (value)\nimport Html.Events exposing (onInput, onSubmit)\n\n-- MODEL\ntype alias Model =\n    { todos : List String\n    , newTodo : String\n    }\n\ninit : Model\ninit =\n    { todos = []\n    , newTodo = \"\"\n    }\n\n-- MESSAGES\ntype Msg\n    = AddTodo\n    | SetNewTodo String\n\n-- UPDATE\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of \n        AddTodo ->\n            { model | todos = model.todos ++ [model.newTodo], newTodo = \"\" }\n        SetNewTodo newTodo ->\n            { model | newTodo = newTodo }\n\n-- VIEW\nview : Model -> Html Msg\nview model =\n    div []\n        [ h1 [] [text \"To-Do App\"]\n        , ul [] (List.map (\\todo -> li [] [text todo]) model.todos)\n        , form [onSubmit AddTodo]\n            [ input [value model.newTodo, onInput SetNewTodo] []\n            , button [] [text \"Add\"]\n            ]\n        ]\n\n-- MAIN\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = init\n        , update = update\n        , view = view\n        }\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAlthough Elm took some getting used to, its type system & pattern matching helped us build robust components along with The Elm Architecture(T.E.A) making sure everything stayed organized even when complexity increased.\n\n## [](#6-alpine-the-most-underrated-one)6: Alpine, the most underrated one.\n\n```html\n<html>\n<head>\n    <script src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/alpine.min.js\" defer></script>\n</head>\n<body>\n\n<div x-data=\"todoApp()\" class=\"todo-container\">\n    <h1>To-Do App</h1>\n    <form @submit.prevent=\"addTodo\">\n        <input type=\"text\" x-model=\"newTodo\" placeholder=\"Add new todo\">\n        <button type=\"submit\">Add</button>\n    </form>\n    <ul>\n        <template x-for=\"todo in todos\" :key=\"todo\">\n            <li x-text=\"todo\"></li>\n        </template>\n    </ul>\n</div>\n\n<script>\n    function todoApp() {\n        return {\n            newTodo: '',\n            todos: [],\n\n            addTodo() {\n                if (this.newTodo.trim() === '') {\n                    return;\n                }\n                this.todos.push(this.newTodo);\n                this.newTodo = '';\n            }\n        }\n    }\n</script>\n\n</body>\n</html>\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#7-marsx-it-took-less-time-to-code-the-todo-list-here-than-it-took-time-to-write-this-sentence-d)7: MarsX - It took less time to code the todo list here than it took time to write this sentence :D\n\nDisclamer, I'm the author of marsx, so feel free to ignore this, but it's not bad I'd say.  \n\n```jsx\n<schema>\n  <array name=\"todo\">\n    <object>\n      <string name=\"title\" />\n    </object>\n  </array>\n</schema>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n* * *\n\nNow that you've witnessed how I built the same app using different frontend frameworks, you might be wondering which one is the best. Well, my friend, that's like asking a parent to pick their favorite child - it just doesn't work that way.\n\nEach framework has its strengths and weaknesses; what works for me may not work for you. So go ahead, take your pick and start building some amazing apps! üöÄ\n\nAnd remember: no matter which framework you choose, don't forget to have fun while coding! üòÑ\n\n* * *\n\nThat's it for now.  \n‚Üí‚Üí‚Üí [My 100xfounder newsletter](http://100xfounder.beehiiv.com) or check out my [landing page builder](https://unicornplatform.com/).  \nSay hi to me on X: [@johnrushx](https://twitter.com/johnrushx)\n\n**Author**: [John Rush](https://dev.to/johnrushx)",
    "shortDescription": "Warning: This post contains a high dose of code, humor, and life-changing revelations. Proceed at...",
    "htmlMeta": "<meta property=\"og:title\" content=\"I built the same app 7 times! Which JS Framework is best?\">\n<meta property=\"og:description\" content=\"Warning: This post contains a high dose of code, humor, and life-changing revelations. Proceed at...\">\n<meta name=\"keywords\" content=\"webdev, react, alpine, vue, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jZecGi89--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3enh4iu20qw4l6nr3cse.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "I-built-the-same-app-7-times!-Which-JS-Framework-is-best",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3enh4iu20qw4l6nr3cse.png"
  },
  {
    "title": "Personal Roadmap for becoming a better software developer in 2024",
    "url": "https://dev.to/mrinmoy09/personal-roadmap-for-becoming-a-better-software-developer-in-2024-2nkm",
    "tags": ["webdev", "javascript", "programming", "react"],
    "published_at": 1703851826000,
    "markdownContent": "So, it has been a while since I last focused on self-improvement and building confidence. Despite coding for almost two years, I still struggle with imposter syndrome - that deep feeling of not being good enough. Now, what am I missing out on? I have watched countless videos and attempted to start numerous projects, but I have failed to complete them. During my seven-month internship, I used ChatGPT for most of my tasks, which is not that bad I guess. While some things worked, others did not, and I know I did not put in my best effort. Nevertheless, I am grateful for the opportunity and will always be. Did that job help me? Yes, to some extent, but I was always fearful of new tasks and not fully committed to the job. In short, what should I do now? Currently, I lack motivation to learn something new, but I hate this version of myself. I believe I have been approaching things the wrong way. So, here is a roadmap to start fresh and learn everything from scratch.\n\n*   First, I need to address the fact that my foundation is not strong enough. I will start by focusing on the basics and learning data structures and algorithms. How will I do that? Simple, by watching YouTube, but not excessively. I will primarily follow three to five channels.\n    \n*   I will also review my skills in vanilla JavaScript and create new projects using only JavaScript. Additionally, I will learn DSA (Data Structures and Algorithms) with JavaScript.\n    \n*   I will make an effort to improve my communication and writing skills.\n    \n*   I must start solving problems on LeetCode and HackerRank as soon as possible.\n    \n*   I will try to be more active on LinkedIn.\n    \n*   Once I am comfortable with DSA, I will build new projects to enhance my frontend skills. I will dedicate my focus to frontend development, as I am more comfortable with it and have experience with React from my internship.\n    \n*   I will also create a new portfolio, possibly using Next.js/React.\n    \n*   I will invest in courses and books when I am financially stable.\n    \n\nNow that I have identified what I need to do to improve myself, the list above will serve as my personal roadmap. However, most importantly, it would be great if I could become more disciplined. After wasting so much time, I have come to realize that consistency is the key to becoming a better software developer. It can be achieved through having a job or coding and learning almost every day. There is simply no other way. So, my suggestion to myself is to prioritize consistency and discipline.\n\nHappy Coding.\n\n**Author**: [Mrinmoy Arnob](https://dev.to/mrinmoy09)",
    "shortDescription": "So, it has been a while since I last focused on self-improvement and building confidence. Despite...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Personal Roadmap for becoming a better software developer in 2024\">\n<meta property=\"og:description\" content=\"So, it has been a while since I last focused on self-improvement and building confidence. Despite...\">\n<meta name=\"keywords\" content=\"webdev, javascript, programming, react, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UHMfRNjK--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qex1cvn5dfmactixufx1.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Personal-Roadmap-for-becoming-a-better-software-developer-in-2024",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qex1cvn5dfmactixufx1.jpg"
  },
  {
    "title": "React State Management in 2024",
    "url": "https://dev.to/nguyenhongphat0/react-state-management-in-2024-5e7l",
    "tags": ["react", "state", "redux", "comparison"],
    "published_at": 1702017246000,
    "markdownContent": "In my POV, React state management libraries can be divided into three groups:\n\n*   **Reducer-based**: requires dispatching actions to update a big centralised state, often called a ‚Äúsingle source of truth‚Äù. In this group, we have [Redux](https://redux.js.org) and [Zustand](https://zustand-demo.pmnd.rs).\n*   **Atom-based**: splits states into tiny pieces of data called atoms, which can be written to and read from using React hooks. In this group, we have [Recoil](https://recoiljs.org) and [Jotai](https://jotai.org).\n*   **Mutable-based**: leverages proxy to create mutable data sources which can be directly written to or reactively read from. Candidates in this group are [MobX](https://mobx.js.org) and [Valtio](https://valtio.pmnd.rs).\n\nNow that we've covered the three main categories of React state management libraries. Let's delve deeper into each one and explore the strengths and weaknesses of each approach. This will help you understand which library best suits your project's needs:\n\n## [](#1-reducerbased-libraries)1\\. Reducer-based Libraries:\n\nDespite its common criticism about being (overly) complicated, Redux has been the most popular state management library since its creation.  \n\n```plaintext\n+---------------------+\n|        Actions      |\n+----------|----------+\n           |\n           v\n+---------------------+        +---------------------+\n|        Reducers     |        |       Store         |\n+----------|----------+        +----------|----------+\n           |                              |\n           v                              v\n+---------------------+        +---------------------+\n|        State        |        |     Subscriptions   |\n+---------------------+        +---------------------+\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Strengths:**\n\n*   A powerful state machine and time machine. Suppose all of your application states live inside the centralised state (which rarely happens because you might have local states in your components), this formula will exist: `UI = React(state)`. This means a single state value will only result in one UI, so your application will look consistently the same with a specific state. If you backup the entire state somewhere, then dispatch a change like `REVERT(pastState) { state = pastState }`, your UI will be restored as if it was a captured screenshot.\n    \n*   The best DevTools support: By updating the state using explicit actions, DevTools can help you point out what, when and how the state changes. You can imagine it like having a Git commit history in your application state, how cool is it?  \n    [![Commit messages meme. Source: https://medium.com/@hritik.jaiswal/how-to-write-a-good-commit-message-9d2d533b9052](https://res.cloudinary.com/practicaldev/image/fetch/s--UdynuljL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7kisc3i0as2eav4oogt.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--UdynuljL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7kisc3i0as2eav4oogt.png)\n    \n\n**Weaknesses:**\n\n*   Boilerplate code: even a simple change to your state requires considerable changes in the code.\n*   Steep learning curve: while it is simple at its core, it is never enough on its own. To truly master Redux, you should know how to use it with other libraries such as Saga, Thunk, Reselect, Immer, or Redux Toolkit. It feels overkill when most of the time, we use generators in Saga just to fetch some data over the network. Modern JS developers tend to use async/await on a day-by-day basis.\n*   TypeScript: although fully support TypeScript, explicit typing is required most of the time to get typing done for actions, reducers, selectors, and state. Other approaches directly support automatic type inference.\n\n## [](#2-atombased-libraries)2\\. Atom-based Libraries:\n\nInstead of putting your whole application state inside a large centralised state, this approach splits it into multiple atoms, each atom preferably as tiny as primitive types or basic data structures like arrays and flat objects. Then, you can use the selector to group related states together later if you need to.  \n\n```plaintext\n+---------------------+\n|     Atoms (State)   |\n+----------|----------+\n           |\n           v\n+---------------------+        +---------------------+\n|  Selectors (Derived |        |   RecoilRoot        |\n|     State)          |        +----------|----------+\n+----------|----------+                   |\n           v                              v\n+---------------------+        +---------------------+\n|    State Snapshot   |        |   React Components  |\n+---------------------+        +---------------------+\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Strengths:**\n\n*   Leverage React features: this is expected since Recoil and React are both created by Facebook. Recoil works great with cutting-edge React features such as Suspense, Transition API and Hooks.\n    \n*   Simple and scalable: by using only atoms and selectors, you can still effectively build up a giant reactive application state while having fine-grained control over individual state changes. Lifting state up is now as simple as declaring an atom and changing your `useState` hook to `useRecoilState`.\n    \n*   TypeScript: as a developer who cares about DX as much as a user cares about UI and UX, I found React, Recoil, and TypeScript to be a wonderful combination. In my projects, types are automatically inferred most of the time.\n    \n\n**Weaknesses:**\n\n*   DevTools: if you are looking for an equivalent of Redux DevTools, unfortunately, there isn‚Äôt.\n    \n*   Cannot use state outside of components: although Recoil Nexus is a workaround, this kind of state management library is designed with a (maybe true) assumption that all usage of state happens inside React components.\n    \n*   Not stable (yet): it has been 4 years, and the latest version of Recoil still has the leading 0 (v0.7.7). I would be glad if, by the time you read this, this information stays irrelevant.\n    \n\n## [](#3-mutablebased-libraries)3\\. Mutable-based Libraries:\n\n> Tips: \"mutable\" and \"immutable\" refer to how data can be changed after it is created:\n> \n> *   `person.age += 1 // mutable`\n> *   `person = { ‚Ä¶person, age: person.age + 1 } // immutable`\n\n```plaintext\n+---------------------+\n|     Observables     |\n+----------|----------+\n           |\n           v\n+---------------------+        +---------------------+\n|   Computed Values   |        |     Actions         |\n+----------|----------+        +----------|----------+\n           |                              |\n           v                              v\n+---------------------+        +---------------------+\n|   Reaction (Derived |        |    MobX Store       |\n|       Value)        |        +----------|----------+\n+---------------------+                   |\n                                          v\n                               +---------------------+\n                               |   React Components  |\n                               +---------------------+\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Strengths:**\n\n*   The simplest API: by allowing the state to be mutated directly, no boilerplate code is required to sit between your component and state, unless you want to do so.\n*   Reactivity and flexibility: dependencies are updated automatically whenever the state changes. This simplifies your application logic and makes it easier to comprehend. Moreover, the proxy-based approach helps minimise unnecessary re-renders. This also translates to smooth performance and a more responsive user experience.\n\n**Weaknesses:**\n\n*   Too much magic: automatic reactivity is a double-edged sword. Race conditions in asynchronous updates can lead your application state to chaos, and debugging the flow of changes can be challenging in complex applications.\n*   DevTools: again, it seems to me that no alternative has the best tooling support as the reducer-based approach.\n*   Discrete DX: while React elaborates on the ‚Äúimmutable‚Äù approach, having ‚Äúmutable‚Äù data mixed in my project sometimes makes me feel insecure about how I should make changes to my data.\n\n# [](#the-best-choice)The best choice\n\nAgain, the best React state management library for your project depends on your and your team‚Äôs specific needs and expertise. Please **DON'T**:\n\n*   Pick a library based solely on project size and complexity. Because, you may have heard somewhere that X is more suitable for a large-scale project while Y is better for a smaller one. Library authors designed their libraries with scalability in mind, and your project‚Äôs scalability depends on how you write the code and use the library, not which libraries you choose to work with.\n    \n*   Apply best practices you learned from one library to another. Putting your whole application state inside a single Recoil atom to achieve a ‚Äúsingle source of truth‚Äù will only lead to struggling with state updates and issues with performance. As well as defining actions in Redux as if they were setters and dispatching multiple of them instead of batching changes in one commit.\n    \n\n# [](#the-authors-choice)The author's choice\n\n> TL;DR: Jotai.\n\nI personally prefer the atomic libraries because of the advantages listed above and my historical painless DX when dealing with asynchronous data fetching and batching loading UI with `<Suspense>`. What Jotai does better than Recoil is that:\n\n*   No key is required. Naming things is tough, and most of the time, you won‚Äôt use Recoil‚Äôs keys. So why spend time declaring them at all when the libraries can automatically have the keys for you? Here is [Recoil‚Äôs answer](https://github.com/facebookexperimental/Recoil/issues/378); however, as you can see, people are not quite convinced.\n*   Performance. A picture is worth a thousand words, and I have 4 of them:‚Ä®\n\nLibrary\n\nImport cost\n\nLCP\n\nRecoil\n\n[![Recoil import cost](https://res.cloudinary.com/practicaldev/image/fetch/s--GWa1NTIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4upwu39rucvne3a63k4.png)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4upwu39rucvne3a63k4.png)\n\n[![Recoil usage's LCP](https://res.cloudinary.com/practicaldev/image/fetch/s--gRRLR-nC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/snijw0t3v6acd204g8h1.png)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/snijw0t3v6acd204g8h1.png)\n\nJotai\n\n[![Jotai import cost](https://res.cloudinary.com/practicaldev/image/fetch/s--RqKvVwah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atprlx3589csb220r23c.png)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atprlx3589csb220r23c.png)\n\n[![Jotai usage's LCP](https://res.cloudinary.com/practicaldev/image/fetch/s--eHZEM7wD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h61hxs2a9cb33bx2951w.png)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h61hxs2a9cb33bx2951w.png)\n\nYou might argue that a ~20Kb difference in size does not matter that much, but let‚Äôs take a look at a benchmark which was taken on a very old Android device, where sluggishness appears as obvious as bars filled in with a pattern of diagonal red stripes. As you can see, Jotai internal logic requires less overall calculation, which improved my application's LCP, an important Core Web Vitals metric, from ~2.6s to ~1.2s. Nonetheless, this comparison may not take into account other factors that Recoil do better than Jotai (in fact, my knowledge cutoff in this). I just want to say that the Jotai team did a wonderful job there.\n\nI hope this helps!\n\n**Author**: [H·ªìng Ph√°t](https://dev.to/nguyenhongphat0)",
    "shortDescription": "In my POV, React state management libraries can be divided into three groups:    Reducer-based:...",
    "htmlMeta": "<meta property=\"og:title\" content=\"React State Management in 2024\">\n<meta property=\"og:description\" content=\"In my POV, React state management libraries can be divided into three groups:    Reducer-based:...\">\n<meta name=\"keywords\" content=\"react, state, redux, comparison, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vcFjKP52--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuh8eapwixsdcauxw6vd.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "React-State-Management-in-2024",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuh8eapwixsdcauxw6vd.png"
  },
  {
    "title": "Drag and Drop Kanban board from scratch with React üî•",
    "url": "https://dev.to/nasif2ahmed/drag-and-drop-kanban-board-from-scratch-with-react-1j9a",
    "tags": ["webdev", "react", "javascript", "typescript"],
    "published_at": 1703529747000,
    "markdownContent": "We all used those [Kanban](https://en.wikipedia.org/wiki/Kanban_(development))\\-style todo or task management apps where there are columns for each stages of a tasks and we can drag and drop tasks from one column to another.\n\nImplementing this drag and drop feature in react is way easier than I thought. Everything you need is already there without using any library or package. So let's get started. üöÄ\n\n\\*\\*\\* ( Typescript is used but its not noticable in code examples JS users can easily understand and the CSS styles are omited in the code examples. Get to the [github link](https://github.com/NasifAhmed/dnd-article) to see the full code. )\n\n## [](#the-idea)The idea üí°\n\nThe main idea behind it is pretty simple. We are going to use default HTML Drag and Drop API that uses various drag and drop events. To make any HTML element draggable we just need to add draggable attribute to an element. Then we will maintain a state where will store data for all the dropped elements and then show them in the div. To achieve this will use various drag and drop even listeners already available with HTML5 and React.\n\nüéØ The main trick is here is that we can not move an element/component literally. We will pass its data with it when we drag and then recreate the element/component again from the passed data inside the div we are dropping it in.\n\nWe will use events listeners like :\n\n1.  [OnDrop](https://www.w3schools.com/jsref/event_ondrop.asp) : This event activates when a valid draggable element is dropped in its area.\n2.  [OnDragStart](https://www.w3schools.com/jsref/event_ondragstart.asp) : This is fired when dragging of an element is started.\n3.  [OnDragEnd](https://www.w3schools.com/jsref/event_ondragend.asp) : This is fired when dragging is ended.\n4.  [OnDragOver](https://www.w3schools.com/jsref/event_ondragover.asp) : This is fired when we drag over the area of an element\n\nThere are many more but for our use these are enough. So lets start the implementation.\n\n## [](#the-implementation)The implementation üßë‚Äçüíª\n\nLet's create some task elements in a div from where we will drag them from :\n\n[![The task divs](https://res.cloudinary.com/practicaldev/image/fetch/s--FLr-rNGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xvzj237bq52d24cd2r6.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--FLr-rNGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xvzj237bq52d24cd2r6.png)\n\nand a todo div where we will drop them :\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--vKJSHa0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2xciaohy50s770c0ak8.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--vKJSHa0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2xciaohy50s770c0ak8.png)\n\nNow to make the task elements draggable we just add the draggable attribute.  \n\n```tsx\n<div\n    className=\"...\"\n    draggable\n>\n    Task 1\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow we can drag the task div. When we drag an element we need to pass its data with it so that we can recreate it. In this we case will pass its name.\n\nTo do this lets use `onDragStart` which fires when we start dragging an element.  \n\n```tsx\n<div\n    className=\"...\"\n    draggable\n    onDragStart={(e) => {\n        handleOnDrag(e, \"Task 1\");\n    }}\n>\n    Task 1\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere we are passing the event e and the name of the task to the `handleOnDrag` function.\n\nLets write the `handleOnDrag` function  \n\n```typescript\nfunction handleOnDrag(e: React.DragEvent, name: string) {\n    e.dataTransfer.setData(\"name\", name);\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere we are setting the name string as data under `\"name\"` key. Now whenever we drag it the name data will go along with it.\n\nWe handled the dragging part now lets drop it.\n\nWe need a state where we will store data for all the dropped tasks and later show them in the div where we dropped them.  \n\n```tsx\nconst [tasks, setTasks] = useState<string[]>()\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow we will use `onDrop` attribute to signal the dropping event. But before doing this we have to handle `onDragOver` for an edge case. Just do this :  \n\n```tsx\n<div \n    className=\"...\"\n    onDragOver={handleOnDragOver}\n>\n    {/* The div we are dropping the task in */}\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd now the `handleOnDragOver` function  \n\n```tsx\nfunction handleOnDragOver(e: React.DragEvent) {\n    e.preventDefault();\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis will stop a default behavior where the onDragOver keeps firing idefinately.\n\nNow for the `onDrop`  \n\n```tsx\n<div \n    className=\"...\"\n    onDragOver={handleOnDragOver}\n    onDrop={handleOnDrop}\n>\n    {/* The div we are dropping the task in */}\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow lets write the `handleOnDrop` function  \n\n```tsx\nfunction handleOnDrop(e: React.DragEvent) {\n    if(tasks) {\n        setTasks([...tasks,e.dataTransfer.getData(\"name\")] )\n    } else {\n        setTasks([e.dataTransfer.getData(\"name\")])\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nHere we are creating a new array with the dropped task div's data and setting that array in the `tasks` state. The `e.dataTransfer.getData(\"name\")` part will look familiar. Because we used `e.dataTransfer.setData(\"name\", name)` in the `handleOnDrag` function to name the dragged task. And now we are getting that name data that we set previously when we started dragging it.\n\nNow we have the data for the task that we are dropping. We now just have to show the task in the div using the data we got. We will use the same Task div we created earlier, inside the div we dropping it in. We will map through all the tasks in the `tasks` state and show them one by one.  \n\n```tsx\n<div \n    className=\"...\"\n    onDragOver={handleOnDragOver}\n    onDrop={handleOnDrop}\n>\n    {tasks &&\n        tasks.map((taskName) => {\n            return (\n                <div\n                    className=\"...\"\n                    draggable\n                    onDragStart={(e) => {\n                        handleOnDrag(e, taskName);\n                    }}\n                >\n                    {taskName}\n                </div>\n            );\n        })}\n</div>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nFinally we have the dragged task in the div we dropped it in.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--Ip2MINV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7d72aum4ucdzzyyos6k.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--Ip2MINV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7d72aum4ucdzzyyos6k.gif)\n\nBut there is a catch. The Task is getting duplicated every time we drag and drop it the task again in the div.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--Te5r8sPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3lro79fr2bmw2x67lbc.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--Te5r8sPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3lro79fr2bmw2x67lbc.gif)\n\nTo solve we have to delete the previous instance of the task in the state when we move it. Its pretty easy to do with `filter()`  \n\n```tsx\nfunction handleOnDrop(e: React.DragEvent) {\n    if(tasks) {\n        setTasks([\n            ...tasks.filter(\n                (taskName) => taskName !== e.dataTransfer.getData(\"name\")\n            ),\n            e.dataTransfer.getData(\"name\"),\n        ]);\n    } else {\n        setTasks([e.dataTransfer.getData(\"name\")])\n    }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNow everything is working. We can drag tasks from the list and drop them in the Todo div.\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--YbtI9TNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjiwh4yx8djfnbqd54hk.gif)](https://res.cloudinary.com/practicaldev/image/fetch/s--YbtI9TNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjiwh4yx8djfnbqd54hk.gif)\n\n## [](#how-to-extend-the-idea-further)How to extend the idea further ‚û°Ô∏è\n\nThe basic stuff is set up. Now we can make it more user friendly by giving visual feedback when we start dragging the task and when we drop it. For that we can use `onDragStart`, `onDragEnd`, `onDragOver` etc. events to change the CSS styles of the elements. We can also add animations.\n\nIn part 2, we we will do all of these and also add two more columns for ongoing and completed tasks and make a fully functioning Kanban board-like todo board. We will need to manage three separate states and many more complexities. Part 2 coming soon ‚úÖ\n\nPart 2 is releasedüî•\n\nCheck it out [here](https://dev.to/nasif2ahmed/drag-and-drop-kanban-board-from-scratch-with-react-part-2-f5e)\n\n**Link to full code** : [Github Link](https://github.com/NasifAhmed/dnd-article)\n\nI hope this was helpful to you üòä  \nFollow me on [Twitter](https://twitter.com/nasif2ahmed) and [LinkedIn](https://www.linkedin.com/in/nasif2ahmed/)  \nThanks for reading üòá\n\n**Author**: [Ahmed](https://dev.to/nasif2ahmed)",
    "shortDescription": "We all used those Kanban-style todo or task management apps where there are columns for each stages...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Drag and Drop Kanban board from scratch with React üî•\">\n<meta property=\"og:description\" content=\"We all used those Kanban-style todo or task management apps where there are columns for each stages...\">\n<meta name=\"keywords\" content=\"webdev, react, javascript, typescript, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZPtEYA9l--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ort5zspneg4gd7ehg1vj.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Drag-and-Drop-Kanban-board-from-scratch-with-React",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ort5zspneg4gd7ehg1vj.png"
  }
]
