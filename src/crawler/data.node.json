[
  {
    "title": "🔐 Session-Based vs. Token-Based Authentication: Which is better?🤔",
    "url": "https://dev.to/fidalmathew/session-based-vs-token-based-authentication-which-is-better-227o",
    "tags": [
      "webdev",
      "beginners",
      "node",
      "javascript"
    ],
    "published_at": 1703319712000,
    "markdownContent": "Hi fellow readers!✋ I hope you’re doing great. In this article, we will learn about session and token-based authentication methods used in backend applications. Let’s take a look at them.\n\n## [](#sessionbased-auth)🔐 Session-based auth\n\nIn simple words, session-based authentication uses a special code(session id) stored on your device to remember who you are when you visit a website, keeping you logged in and remembering your information until you leave or log out. Didn’t get it? Don’t worry, let’s take a look step by step.\n\n### [](#1-user-login)1\\. User Login:\n\nUsers log in by sending their email and password to the server through a special request.\n\n### [](#2-checking-details)2\\. Checking Details:\n\nThe server checks if the provided details match what's stored for the user.\n\n### [](#3-creating-a-session)3\\. Creating a Session:\n\nIf everything is correct, the server makes a 'session' that holds user info (like user ID, permissions, and time limits). This info is kept safe in the server's storage. Exam or can also be managed using libraries such as `express-session`.\n\n### [](#4-getting-a-session-id)4\\. Getting a Session ID:\n\nThe server sends this 'session ID' back to the user's device, usually as a cookie in the response.\n\n### [](#5-using-the-session-id)5\\. Using the Session ID:\n\nWhenever the user wants something from the server, their device automatically includes this session ID in its requests.\n\n### [](#6-server-checks)6\\. Server Checks:\n\nThe server uses this session ID to find the stored information about the session user in the session storage.\n\nHere’s a sneak peek at how `express-session` works:\n\n*   When the user logs in, the server creates a session for that user and sets a cookie🍪 in the response containing the session ID.\n    \n*   The browser automatically includes this session ID cookie🍪 in subsequent requests to the server.\n    \n*   When the server receives a request, express-session middleware uses the session ID from the cookie🍪 to retrieve the relevant session data.\n    \n*   The data stored in **req.session** (such as userId) becomes available to handle the request.\n    \n\n### [](#7-access-granted)7\\. Access Granted:\n\nIf everything matches up, the server knows the user is genuine and responds to them with access to what they asked for.\n\n[![Session auth working](https://res.cloudinary.com/practicaldev/image/fetch/s--EBo4SYwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g42u59txhhuaflzsj52.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--EBo4SYwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g42u59txhhuaflzsj52.png)\n\n### [](#example)Example\n\nHere's an example of a Node.js application using Express.js to implement session authentication.\n\n#### [](#implementation)Implementation\n\n```javascript\nconst express = require('express');\nconst session = require('express-session');\n\nconst app = express();\n\n// Middleware setup\napp.use(session({\n  secret: 'your_secret_key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true, // Set the cookie as HTTP-only, Optional\n    maxAge: 60*30 // In secs, Optional\n  }\n}));\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n#### [](#login-route)Login route\n\n```javascript\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find(u => u.username === username && u.password === password);\n\n  if (user) {\n    req.session.userId = user.id; // Store user ID in session\n    res.send('Login successful');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n#### [](#protected-route)Protected route\n\n```javascript\napp.get('/home', (req, res) => {\n  if (req.session.userId) {\n    // User is authenticated\n    res.send(`Welcome to the Home page, User ${req.session.userId}!`);\n  } else {\n    // User is not authenticated\n    res.status(401).send('Unauthorized');\n  }\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n#### [](#logout-route)Logout route\n\n```javascript\napp.get('/logout', (req, res) => {\n  req.session.destroy(err => {\n    if (err) {\n      res.status(500).send('Error logging out');\n    } else {\n      res.redirect('/'); // Redirect to the home page after logout\n    }\n  });\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#tokenbased-auth)🔐 Token-based auth\n\nJWT authentication uses digitally signed tokens containing user information to allow secure and verified access to websites or applications without needing to repeatedly log in. Let’s take a look at the step-by-step workflow of token-based authentication.\n\n### [](#1-user-login-request)1\\. User Login Request:\n\nUsers log in by sending their email and password to the server through a specific request.\n\n### [](#2-credential-verification)2\\. Credential Verification:\n\nThe server verifies the provided credentials against the stored user data.\n\n### [](#3-token-generation)3\\. Token Generation:\n\nUpon successful verification, the server creates a token (commonly JWT - JSON Web Token). This token holds user information (claims) such as user\\_id, permissions.\n\n### [](#4-token-signing-and-hashing)4\\. Token Signing and Hashing:\n\nThe token is signed with a secret key and processed with a hashing algorithm (like SHA256) to create a hash.\n\n### [](#5-sending-the-token)5\\. Sending the Token:\n\nThe server sends this token to the client, which stores it, typically in the browser.\n\n### [](#6-token-storage-options)6\\. Token Storage Options:\n\nThe client can store the token in different ways like HttpOnly Cookies, Session Storage, or Local Storage. Storing in HttpOnly Cookies is recommended as it prevents JavaScript access, enhancing security against XSS attacks.\n\n### [](#7-token-expiry-and-security)7\\. Token Expiry and Security:\n\nTokens often have an expiration time to enhance security.\n\n### [](#8-including-token-in-requests)8\\. Including Token in Requests:\n\nFor every request to the server, the client sends the token in the Authorization header.\n\nIt's a good practice to prefix the token with \"Bearer \".  \n\n```javascript\naxios.get(URL, {\n    headers: {\n        'Authorization': 'Bearer ' + token,\n    },\n})\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#9-serverside-validation)9\\. Server-Side Validation:\n\nUpon receiving a request, the server retrieves the token.\n\n### [](#10-token-validation-and-user-authentication)10\\. Token Validation and User Authentication:\n\nUsing the secret key, the server validates the token and extracts claims from it. If the user information from the claims exists in the server's user table, the server authenticates the user, granting access to requested resources.\n\n[![Token based authentication](https://res.cloudinary.com/practicaldev/image/fetch/s--sepxr4Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8jdjwssswe9dcldfga.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--sepxr4Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8jdjwssswe9dcldfga.png)\n\n### [](#example)Example\n\n#### [](#login)Login\n\n```javascript\napp.post('/login', (req, res) => {\n\nconst { username, password } = req.body;\n  const user = users.find(u => u.username === username && u.password === password);\n\n  jwt.sign({ user }, secretKey, { expiresIn: '1h' }, (err, token) => {\n    if (err) {\n      res.status(500).send('Error generating token');\n    } else {\n      res.json({ token });\n    }\n  });\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n#### [](#protected-route)Protected route\n\nWe are using `veriyToken()` function as middleware for every route that needs verification. The request passes through the `veriyToken()` and only if the `next()` function is called, it passes on to this route and implements the code.  \n\n```javascript\napp.get('/dashboard', verifyToken, (req, res) => {\n  res.send('Welcome to the Home page');\n});\n\n// Verify token middleware\nfunction verifyToken(req, res, next) {\n  const token = req.headers['authorization'];\n\n  if (typeof token !== 'undefined') {\n    jwt.verify(token.split(' ')[1], secretKey, (err, decoded) => {\n      if (err) {\n        res.status(403).send('Invalid token');\n      } else {\n        req.user = decoded.user;\n        next();\n      }\n    });\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#key-differences)Key differences\n\n*   **Storage Location:** Sessions are stored on the server, while tokens (JWTs) are stored on the client side.\n    \n*   **Stateful vs Stateless:** Sessions are stateful, while tokens are stateless, allowing for better scalability in distributed systems.\n    \n*   **Expiry Handling:** Session expiry is managed by the server, whereas token expiry is handled by the token itself.\n    \n*   **Security Measures:** JWTs often include digital signatures and support for encryption, enhancing security compared to typical session mechanisms that use cookies, and can be vulnerable to CSRF attacks if not properly protected.\n    \n*   **Usage Flexibility:** Tokens (JWTs) offer more flexibility in carrying additional information beyond authentication, useful for authorization and custom data transmission.\n    \n\n## [](#which-method-should-be-used)Which method should be used?\n\nIt depends upon the requirement and nature of the application. Most applications use a hybrid approach, token-based authentication for APIs, and session-based authentication for web-based interactions.\n\nI hope you liked this article and if you did don’t forget to give it a like! Which backend language do you use for your projects? 🤔\n\nComment them down below 👇\n\n**Connect with me on-**\n\n*   [Twitter](https://twitter.com/fidalmathew10)\n*   [Github](https://github.com/FidalMathew)\n*   [Linkedin](https://www.linkedin.com/in/fidalmathew/)\n\n**Author**: [Fidal Mathew](https://dev.to/fidalmathew)",
    "shortDescription": "Hi fellow readers!✋ I hope you’re doing great. In this article, we will learn about session and...",
    "htmlMeta": "<meta property=\"og:title\" content=\"🔐 Session-Based vs. Token-Based Authentication: Which is better?🤔\">\n<meta property=\"og:description\" content=\"Hi fellow readers!✋ I hope you’re doing great. In this article, we will learn about session and...\">\n<meta name=\"keywords\" content=\"webdev, beginners, node, javascript, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MJnTVJPE--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq7ytx3iczwt2yhqzqen.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Session-Based-vs.-Token-Based-Authentication:-Which-is-better",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq7ytx3iczwt2yhqzqen.png"
  },
  {
    "title": "Enforcing ESLint rules: A guide to taming codebase chaos",
    "url": "https://dev.to/theodo/enforcing-eslint-rules-a-guide-to-taming-codebase-chaos-1o7m",
    "tags": [
      "node",
      "eslint",
      "javascript",
      "webdev"
    ],
    "published_at": 1704208493000,
    "markdownContent": "In the dynamic world of javascript development, ESLint plays a vital role in maintaining code quality. When developers install ESLint or introduce new rules, it often reveals tons of errors. How to manage them?\n\n## [](#tldr)📝 TL;DR\n\n1.  Use errors to make the rules blocking and enforce it in your CI.\n2.  Comment out all existing ESLint errors using a script like [`eslint-disable-inserter`](https://www.npmjs.com/package/eslint-disable-inserter).\n3.  Merge this as soon as possible to prevent new errors from being added.\n4.  Then fix the errors at your own pace.\n\n## [](#the-temptation-of-the-warnings%EF%B8%8F)⚠️ The temptation of the Warnings️\n\nWhen developers first face ESLint errors, the volume of violations across files can be daunting. Some may be tempted to convert these errors into warnings to quickly pass the linter without addressing the underlying issues.\n\nThis is a bad practice, nothing will prevent new errors from being added. The developers will not know what is an acceptable warning or an error disguised as a warning.\n\n## [](#another-pitfall-try-to-fix-them-all-at-once)⚔️ Another Pitfall: Try to fix them all at once\n\nSome developers can be tempted to fix all existing errors before applying new ESLint rules to the codebase. While this approach seems logical, it often results in massive pull requests that are challenging to review and rebase. As developers work to resolve errors, others may simultaneously introduce new ones, making it an endless battle.\n\n## [](#a-better-approach-raw-eslintdisableinserter-endraw-)🤖 A Better Approach: `eslint-disable-inserter`\n\nTo address this issue and ease new rule usage, I created `eslint-disable-inserter`, a npm package that simplifies commenting existing ESLint errors.\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [CorentinDoue](https://github.com/CorentinDoue) / [eslint-disable-inserter](https://github.com/CorentinDoue/eslint-disable-inserter)\n\n### Inserts eslint-ignore comments automatically\n\n# eslint-disable-inserter\n\nEasily insert `eslint-disable-next-line` comments into your code.\n\n[![npm version](https://camo.githubusercontent.com/b1b5a2d826762b1112cafa973280ea8779825db2c054e08379acc5c9b05d0d62/68747470733a2f2f62616467652e667572792e696f2f6a732f65736c696e742d64697361626c652d696e7365727465722e737667)](https://badge.fury.io/js/eslint-disable-inserter) [![CI-CD](https://github.com/CorentinDoue/eslint-disable-inserter/actions/workflows/ci-cd.yml/badge.svg)](https://github.com/CorentinDoue/eslint-disable-inserter/actions/workflows/ci-cd.yml)\n\nWhen moving to a new ESLint config, or when adopting ESLint for the first time it's common to have tons of violations that you want to silence for now.\n\nThis library exposes a helpful utility, `eslint-disable-inserter`, that will do all the heavy lifting, and insert `// eslint-disable-next-line ...` or `{/* eslint-disable-next-line ... */}` comments into your code.\n\nIt handles JSX detection, and will insert the correct comment in the correct places.\n\nThis utility is idempotent, so it can be used each time you add a new ESlint rule.\n\n## Example (Before/After)\n\nWith the following file, which has some violations and a existing comment:\n\n```\nexport const MyComponent \\= () \\=> {\n  let count \\= 0\n  count += 1\n  const messages: any \\= undefined\n  return (\n    <div\\>\n      <h1\\>MyComponent</h1\\>\n      <p\\>Count: {\n```\n…\n\nEnter fullscreen mode Exit fullscreen mode\n\n[View on GitHub](https://github.com/CorentinDoue/eslint-disable-inserter)\n\n### [](#how-raw-eslintdisableinserter-endraw-works)How `eslint-disable-inserter` Works\n\n`eslint-disable-inserter` automatically inserts `// eslint-disable-next-line ...` or `{/* eslint-disable-next-line ... */}` comments into your code, silencing existing ESLint errors. It handles JSX detection and is idempotent, allowing repeated use without duplicates.\n\n### [](#example-transforming-code)Example: Transforming Code\n\nSuppose you have the following TypeScript file with ESLint violations:  \n\n```tsx\nexport const MyComponent = () => {\n  let count = 0;\n  count += 1;\n  const messages: any = undefined;\n  return (\n    <div>\n      <h1>MyComponent</h1>\n      <p>Count: {count + messages.myMessage}</p>\n      {/* eslint-disable-next-line eqeqeq -- my comment */}\n      <p>Is Zero: {count == 0 ? messages.yes : messages.no}</p>\n    </div>\n  );\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nRunning the following command:  \n\n```shell\neslint --format json . | eslint-disable-inserter\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWill transform the file to:  \n\n```tsx\nexport const MyComponent = () => {\n  let count = 0;\n  count += 1;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- FIXME\n  const messages: any = undefined;\n  return (\n    <div>\n      <h1>MyComponent</h1>\n      {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- FIXME */}\n      <p>Count: {count + messages.myMessage}</p>\n      {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, eqeqeq -- FIXME my comment */}\n      <p>Is Zero: {count == 0 ? messages.yes : messages.no}</p>\n    </div>\n  );\n};\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#fix-them-all-at-your-own-pace)♻️ Fix them all at your own pace\n\nYou have explicit comments for all existing ESLint errors. And no more errors will be added.\n\nYou can now decide with your team how you will handle this legacy and how to fix them.\n\nYou can visualize the size of the task with another package I created: [`eslint-disabled-stats`](https://www.npmjs.com/package/eslint-disabled-stats)\n\n## ![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--A9-wwsHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg) [CorentinDoue](https://github.com/CorentinDoue) / [eslint-disabled-stats](https://github.com/CorentinDoue/eslint-disabled-stats)\n\n### Compute statistics about the eslint rules disabled\n\n# eslint-disabled-stats\n\nCompute statistics about the eslint rules disabled\n\n[![npm version](https://camo.githubusercontent.com/e7fd0bfa25d58c61935165e637054ab62b61892a05101ce06106037230005255/68747470733a2f2f62616467652e667572792e696f2f6a732f65736c696e742d64697361626c65642d73746174732e737667)](https://badge.fury.io/js/eslint-disabled-stats) [![CI-CD](https://github.com/CorentinDoue/eslint-disabled-stats/actions/workflows/ci-cd.yml/badge.svg)](https://github.com/CorentinDoue/eslint-disabled-stats/actions/workflows/ci-cd.yml)\n\nIt could be useful to track the correction of legacy eslint errors commented with a tool such as [https://github.com/CorentinDoue/eslint-disable-inserter](https://github.com/CorentinDoue/eslint-disable-inserter) on your codebase.\n\nThe number of analyzed files and number of analyzed lines could be useful to track the evolution of the eslint errors compared to the evolution of the codebase.\n\n## Usage\n\n```notranslate\n$ npx eslint-disabled-stats -g -p \"example/**/*.(js|ts)\"\n\nℹ Analysing 2 files...\n✔ Statistics computed\n\nRules disabled by rule:\n• prefer-const: 1\n• eqeqeq: 1\n• curly: 1\n• ALL_RULES: 1\n\nRules disabled by file:\n• example/index.ts: 3\n• example/legacy/legacy-file.js: 1\n\nTotal rules disabled:  4\n\nAnalysed files:        2\nAnalysed lines:        19\n\n✔ Done\n\n```\n\n### Options\n\n*   The `--pattern` / `-p` flag allows specifying the glob pattern of files on which the statistics are computed The default pattern is `**/*.(js|ts|jsx|tsx)`\n    \n*   The `--quiet` / `-q` flag makes the console output lighter The details of the errors by…\n    \n\n[View on GitHub](https://github.com/CorentinDoue/eslint-disabled-stats)\n\n```plaintext\n$ npx eslint-disabled-stats -g -p \"example/**/*.(js|ts)\"\n\nℹ Analysing 2 files...\n✔ Statistics computed\n\nRules disabled by rule:\n• prefer-const: 1\n• eqeqeq: 1\n• curly: 1\n• ALL_RULES: 1\n\nRules disabled by file:\n• example/index.ts: 3\n• example/legacy/legacy-file.js: 1\n\nTotal rules disabled:  4\n\nAnalysed files:        2\nAnalysed lines:        19\n\n✔ Done\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nDepending on the estimated time to fix the errors, you can fix them **by batch** or opt for the **Boy Scout approach**.\n\nWith the Boy Scout approach, you leave the codebase cleaner after your intervention.\n\nYou fix the errors as you encounter them in your daily work. You will fix them when you have context on the code, and this will reduce the risk of regression.\n\nMake sure to not accept any Pull Request with commented ESLint errors to ensure a continuous improvement of your codebase quality. Some tools can help you to automate this part of the review, such as [Danger JS](https://danger.systems/js/).\n\nYou can also use IDE extensions such as [TODO highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight) or [TODO Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree) to make visible and track the remaining errors directly in your IDE.\n\n## [](#conclusion)🚀 Conclusion\n\nEnforcing ESLint rules from day one is a pivotal step towards codebase excellence. By leveraging the strategies discussed in this article, you can pave the way for a cleaner, more maintainable codebase.\n\nBut the journey doesn't end here. If you have questions or want to share your experiences, don't hesitate to reach out on [X/Twitter](https://x.com/CorentinDoue) or [GitHub](https://github.com/CorentinDoue)\n\n**Author**: [Corentin Doue](https://dev.to/corentindoue)",
    "shortDescription": "How to manage ESLint errors when introducing new rules",
    "htmlMeta": "<meta property=\"og:title\" content=\"Enforcing ESLint rules: A guide to taming codebase chaos\">\n<meta property=\"og:description\" content=\"How to manage ESLint errors when introducing new rules\">\n<meta name=\"keywords\" content=\"node, eslint, javascript, webdev, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--a_R_J1-d--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://raw.githubusercontent.com/CorentinDoue/articles/master/blog-posts/eslint-disable-inserter/assets/cov.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Enforcing-ESLint-rules:-A-guide-to-taming-codebase-chaos",
    "displayImage": "https://raw.githubusercontent.com/CorentinDoue/articles/master/blog-posts/eslint-disable-inserter/assets/cov.png"
  },
  {
    "title": "Tech Talk: React in the Terminal? Hold my Beer 🍺",
    "url": "https://dev.to/manuartero/tech-talk-react-in-the-terminal-hold-my-beer-2pnf",
    "tags": [
      "react",
      "node",
      "javascript",
      "typescript"
    ],
    "published_at": 1703078618000,
    "markdownContent": "My company organizes a big event once per year. Around ~600 attendees. There are five simultaneous tracks for keynotes; Product, Project management, Design, Dev, Devops... It's the main event of the season for us.\n\nYou get the idea.\n\n* * *\n\nThis year i decided to present a tech talk. 45 min long. The complete thing: slides & live coding.\n\nI named it: «React in the Terminal? Hold my beer 🍺»\n\n* * *\n\nWhile the slides are in English, i'm afraid the talk itself was in my mother language (🇪🇸) and i won't share the recording.\n\nHowever, here are the resources I used for the talk:\n\n1.  [**The slides**: up & running hosted at Vercel](https://react-in-the-terminal-hold-my-beer.vercel.app/1); I used [SliDev](https://sli.dev/), a framework that turns markdown into a web app which behaves like a Keynote. It's pretty cool.  \n    I genuinely think SliDev deserves its own post someday 🤔.\n    \n2.  [**my-react-dom**: Repository with a custom implementation of `react-dom`](https://github.com/manuartero/my-react-dom) used to live coding. Two branches: `playground` and `main`\n    \n3.  [**ink-world**: Repository for a tiny-tiny-tiny game using Ink + React on the terminal](https://github.com/manuartero/ink-world) again, used to live coding. Two branches: `playground` and `main`.\n    \n\n* * *\n\n## [](#talk-recap)Talk Recap\n\nI led a quick journey, starting with the simplest «Hello World» in React...\n\n...But unrolling the `jsx` syntax, making more obvious where we're invoking `react` and where we are calling `react-dom`\n\n[![Slide no 7](https://res.cloudinary.com/practicaldev/image/fetch/s--t8uLyNpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt0t85k8bqte0papqdeb.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--t8uLyNpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt0t85k8bqte0papqdeb.png)\n\nThis led us to the question: why are `react` and `react-dom` separated into two different packages?\n\nWe discussed the philosophy that React embraces; they mention \"_interfaces_\" and how React is **designed to plug into any interface**.\n\n[![Slide no. 8](https://res.cloudinary.com/practicaldev/image/fetch/s--Q3NZPrpZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhpyew3aaf6d9qwjmdkc.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--Q3NZPrpZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhpyew3aaf6d9qwjmdkc.png)\n\nNext step: `react-reconciler`: the package the React team provides to create your custom renderer.\n\n[![Slide no. 9](https://res.cloudinary.com/practicaldev/image/fetch/s--lHMEoCox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbxspmanrrqoeateetd1.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--lHMEoCox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbxspmanrrqoeateetd1.png)\n\nTime to live coding session ([`my-react-dom`](https://github.com/manuartero/my-react-dom))\n\nThis is the goal: replace the `ReactDOM` object with one of our own and keeping the Counter APP running.  \n\n```diff\nimport React from 'react';\n-import ReactDOM from 'react-dom';\n+import ReactDOM from './my-custom-react-dom';\nimport './styles.css';\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n✨ Ah! and that's also deployed at Vercel: [https://my-react-hvpqtmgva-manu-artero.vercel.app/](https://my-react-hvpqtmgva-manu-artero.vercel.app/)\n\n[![Screenshot for https://my-react-hvpqtmgva-manu-artero.vercel.app/](https://res.cloudinary.com/practicaldev/image/fetch/s--dwMi21QU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wegkej7ppn6x8pxg5aag.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--dwMi21QU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wegkej7ppn6x8pxg5aag.png)\n\nIf you open de dev tools, you may check the console:\n\n[![Screenshot of the console](https://res.cloudinary.com/practicaldev/image/fetch/s--woot5LVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4s87sr3j8op6fgipxr2.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--woot5LVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4s87sr3j8op6fgipxr2.png)\n\n* * *\n\nAt this point, I took a small leap: while implementing a tiny `react-dom` is one thing, crafting the plugin for the terminal is a different tale.\n\nSo i introduced the **solution by Vadim Demedes**: [Ink](https://github.com/vadimdemedes/ink).\n\nInk is a React renderer for the terminal.\n\nI did prepare a playground ([check the `playground` branch](https://github.com/manuartero/ink-world/tree/playground)) with just 2 dependencies: `ink` and `react`\n\nYou can check the [final code at GitHub](https://github.com/manuartero/ink-world/blob/main/index.js). Anyway, in a nutshell:  \n\n```javascript\n...\n\nfunction useWorld({ onGameOver, onGameWin }) {\n  const [world, setWorld] = useState([\n    \"tree\",\n    \"character\",\n    \"tree\",\n    \"tree\",\n    \"tree\",\n    \"enemy\",\n  ]);\n\n  useEffect(() => {\n     ...\n      if (random > 0.5) {\n        return moveEnemyRight();\n      }\n      if (random < 0.5) {\n        return moveEnemyLeft();\n      }\n    }\n  });\n\n  const moveEnemyRight = () => {\n    setWorld((currentWorld) => {\n      ... bla bla\n    });\n  };\n\n  const moveEnemyLeft = () => {\n    setWorld((currentWorld) => {\n      ... bla bla\n    });\n  };\n\n  const moveCharacterRight = () => ...\n\n  const moveCharacterLeft = () => ...\n\n  return { world, moveCharacterRight, moveCharacterLeft };\n}\n\nfunction App() {\n  const { exit } = useApp();\n  const { world, moveCharacterRight, moveCharacterLeft } = useWorld({...});\n\n  useInput((input, key) => {\n    if (input === \"q\") {\n      exit();\n    }\n    if (key.leftArrow) {\n      setDisplayText(\"<-\");\n      return moveCharacterLeft();\n    }\n    if (key.rightArrow) {\n      setDisplayText(\"->\");\n      return moveCharacterRight();\n    }\n  });\n\n  return (\n    <>\n      <Ground>\n        {world.map((type, i) => (\n          <WorldElement key={`${type}-${i}`} type={type} />\n        ))}\n      </Ground>\n      <Text>{displayText}</Text>\n    </>\n  );\n}\n\n...\n\nrender(<App />);\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nResulting in this little fella:\n\n* * *\n\nHonestly, it was a tremendous success; many people congratulated me.\n\n* * *\n\nthanks for reading 💛.\n\n**Author**: [Manuel Artero Anguita 🟨](https://dev.to/manuartero)",
    "shortDescription": "My company organizes a big event once per year. Around ~600 attendees. There are five simultaneous...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Tech Talk: React in the Terminal? Hold my Beer 🍺\">\n<meta property=\"og:description\" content=\"My company organizes a big event once per year. Around ~600 attendees. There are five simultaneous...\">\n<meta name=\"keywords\" content=\"react, node, javascript, typescript, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DA3IEXu1--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o4fhayt1ypnbz58z8wu.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Tech-Talk:-React-in-the-Terminal-Hold-my-Beer",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o4fhayt1ypnbz58z8wu.png"
  },
  {
    "title": "'return await' in a try/catch",
    "url": "https://dev.to/danielbellmas/return-await-in-a-trycatch-4oh",
    "tags": [
      "javascript",
      "node",
      "eslint",
      "webdev"
    ],
    "published_at": 1702137542000,
    "markdownContent": "This might sound weird to you, the first thing that comes to mind is: 'Eslint will tell me to remove the await, there is no need for an await after a return'\n\nBut the case is a different when we wrap our promise in a `try/catch`.  \n\n```javascript\nasync function foo() {\n  try {\n    return await waitAndMaybeReject();\n  } catch (e) {\n    return 'caught';\n  }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis also applies when we don't need to return resolved value of the promise, **we always need to await it if the returned promise is inside a `try/catch` and we want to catch the error**.\n\nBy returning a promise, we’re deferring its result, so our catch block never runs.  \nThis also happens, when not awaiting a promise (regardless if we return or not).\n\n> Only outside of try/catch blocks, `return await` is redundant. There’s even an [Eslint rule](https://eslint.org/docs/latest/rules/no-return-await), but this rule allows a return if it's in `try/catch`.\n\n* * *\n\n## [](#bonus)Bonus🔥\n\nIf you want to print something after a return statement, instead of temporaraly creating a variable, printing and then returning, like this:  \n\n```javascript\nasync function foo() {\n  const res = await fetch();\n  console.log('after fetch')\n  return res;\n} \n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe can wrap the return with a try and finallly (unless you need to print the resolved value of the promise of course), like so:  \n\n```javascript\nasync function foo() {\n  try {\n    return await fetch();\n  } finally {\n    console.log('after fetch')\n  }\n} \n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**Author**: [Daniel Bellmas](https://dev.to/danielbellmas)",
    "shortDescription": "This might sound weird to you, the first thing that comes to mind is: 'Eslint will tell me to remove...",
    "htmlMeta": "<meta property=\"og:title\" content=\"'return await' in a try/catch\">\n<meta property=\"og:description\" content=\"This might sound weird to you, the first thing that comes to mind is: 'Eslint will tell me to remove...\">\n<meta name=\"keywords\" content=\"javascript, node, eslint, webdev, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mh7bKagU--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw7y5sqg5xq0ie266rku.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "'return-await'-in-a-trycatch",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw7y5sqg5xq0ie266rku.png"
  },
  {
    "title": "Node.js, TypeScript and ESM: it doesn't have to be painful",
    "url": "https://dev.to/a0viedo/nodejs-typescript-and-esm-it-doesnt-have-to-be-painful-438e",
    "tags": [
      "typescript",
      "node",
      "esm"
    ],
    "published_at": 1702302054000,
    "markdownContent": "I was thinking into starting a Node.js project from scratch and had an unsettling choice to make: to use ESM or CommonJS.\n\nThe decision of a few popular package authors to adopt ESM, coupled with the ongoing maturity of the tooling, strongly suggests that it is the direction most of the ecosystem will converge to _eventually_.\n\nIn this article, my goal is to present a solution that is not fast but it also leverages widely adopted and trusted tools.\n\n**🙅🏻‍♂️🛑 Disclaimer**  \nThis approach is thought to comply with applications running in Node.js, not on a browser. The module resolution will change drastically for other scenarios.\n\n## [](#make-it-esm)Make it ESM\n\nThe first step is to make the project an ES Module. To do that you only need to include `\"type\": \"module\"` in your `package.json`.  \nAn annoying detail for me (transitioning from CommonJS) is that ES Modules require the file extension on your imports, like this:  \n\n```javascript\nimport { hey } from './module-b.js'\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWe will see in the next section how it could be improved.\n\n## [](#tsconfigjson)tsconfig.json\n\nThis is a minimal version of a tsconfig that worked for my use case.  \n\n```json\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"target\": \"ESNext\",\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"noEmit\": true,\n    \"allowImportingTsExtensions\": true,\n    \"outDir\": \"dist\",\n    \"lib\": [ \"esnext\" ],\n    \"types\": [ \"node\" ],\n    \"baseUrl\": \"./\",\n  },\n  \"exclude\": [ \"node_modules\" ],\n  \"include\": [\n    \"src/**/*.ts\",\n    \"bin/*.ts\"\n  ]\n}\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nNotice `allowImportingTsExtensions` defined in there. This will allow to use your imports like the following:  \n\n```typescript\nimport { hey } from './module-b.ts'\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#compilation)Compilation\n\nI decided to use [SWC](https://swc.rs/) to compile the project into JavaScript, primarily because of its speed. Bear in mind SWC will not run type-checking. For scenarios where type-checking is necessary, you can still use `tsc` to achieve this:  \n\n```json\n{\n  \"scripts\": {\n    \"build\": \"swc src --out-dir dist/src\",\n    \"build:ci\": \"tsc && npm run build\"\n  }\n}\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nIn order for the imports to work as expected this is the `.swcrc` config file that you will need:  \n\n```plaintext\n{\n  \"exclude\": \"node_modules/\",\n  \"jsc\": {\n    \"parser\": {\n      \"syntax\": \"typescript\",\n      \"topLevelAwait\": true\n    },\n    \"target\": \"esnext\",\n    \"baseUrl\": \".\",\n    \"experimental\": {\n      \"plugins\": [\n        [\n          \"@swc/plugin-transform-imports\",\n          {\n            \"^(.*?)(\\\\.ts)$\": {\n              \"skipDefaultConversion\": true,\n              \"transform\": \"{{matches.[1]}}.js\"\n            }\n          }\n        ]\n      ]\n    }\n  },\n  \"module\": {\n    \"type\": \"nodenext\"\n  }\n}\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#livereload)Live-reload\n\nAlso often times called hot-reloading, this functionality allows to watch your application files for changes and restart it when changes occur. I'm using SWC and [nodemon](https://github.com/remy/nodemon) to perform this, with exceedingly fast results. While using two different tools seems somewhat inconvenient I like it a lot because it leads to a single-responsibility goal: SWC only takes care of compiling our code and nodemon is in charge of watching JavaScript files and restarting the Node.js process.\n\nHere are results showcasing the average time it took the server to restart, while watching for changes and running 10 times each using the example repository:\n\ntime(avg)\n\ntsx\n\n260ms\n\nSWC+nodemon\n\n124ms\n\nThese numbers only measure from the time a change has been acknowledged to the new process has started successfully.\n\n**Why not include `ts-node-dev` in these benchmarks?**  \nSadly `ts-node-dev` is not currently compatible with the [ts-node loader](https://github.com/TypeStrong/ts-node#watching-and-restarting).\n\n## [](#running-typescript-files)Running TypeScript files\n\nThere will be times when you need to run TypeScript files on its own. On Node v20 I couldn't make `swc-node` work for that (if you do, please let me know!), so I decided to use `tsx`. It works and is very simple to use.  \n\n```json\n{\n  \"scripts\": {\n    ...\n    \"migrate\": \"node --import tsx bin/run-migrations.ts\"\n    ...\n  }\n}\n\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n## [](#final-thoughts)Final thoughts\n\nUsing TypeScript and compiling to ESM on Node.js involves a greater degree of complexity than is often recognized. There are a lot of tweaks and knobs to turn, and tools that are supposed to work but don't. I created an example repository with all the things I mention on this article in case you want to check it out: [a0viedo/node-ts-esm-example](https://github.com/a0viedo/node-ts-esm-example)\n\n**Author**: [Alejandro Oviedo](https://dev.to/a0viedo)",
    "shortDescription": "I was thinking into starting a Node.js project from scratch and had an unsettling choice to make: to...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Node.js, TypeScript and ESM: it doesn't have to be painful\">\n<meta property=\"og:description\" content=\"I was thinking into starting a Node.js project from scratch and had an unsettling choice to make: to...\">\n<meta name=\"keywords\" content=\"typescript, node, esm, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ys2Cx0ar--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://imgur.com/nSD97FU.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Node.js-TypeScript-and-ESM:-it-doesn't-have-to-be-painful",
    "displayImage": "https://imgur.com/nSD97FU.jpg"
  },
  {
    "title": "Inside Node.js: Exploring Asynchronous I/O",
    "url": "https://dev.to/ocodista/inside-nodejs-exploring-asynchronous-io-4bg1",
    "tags": [
      "node",
      "javascript",
      "programming",
      "linux"
    ],
    "published_at": 1702318959000,
    "markdownContent": "*   [Introduction](#introduction)\n*   [How Node Handles Asynchronous Code](#how-node-handles-asynchronous-code)\n*   [Asynchronous Operations: What Are They?](#asynchronous-operations-what-are-they)\n    *   [Blocking vs Non-Blocking Asynchronous Operation](#blocking-vs-non-blocking-asynchronous-operation)\n*   [Experiments with Blocking Functions](#experiments-with-blocking-functions)\n*   [Experiments with Non-Blocking Functions](#experiments-with-non-blocking-functions)\n*   [Non-Blocking Asynchronous Operations and OS](#non-blocking-asynchronous-operations-and-os)\n    *   [Understanding File Descriptors](#understanding-file-descriptors)\n        *   [What is a FD?](#what-is-a-fd)\n        *   [FD and Non-Blocking I/O](#fd-and-non-blocking-io)\n    *   [Monitoring FDs with syscalls](#monitoring-fds-with-syscalls)\n        *   [Understanding select](#understanding-select)\n        *   [Epoll](#epoll)\n        *   [io\\_uring](#io_uring)\n*   [Conclusion](#conclusion)\n\n## [](#introduction)Introduction\n\nRecently, I've been studying asynchronous code execution in Node.js.\n\nI ended up learning (and writing) a lot, from an article about [how the Event Loop works](https://dev.to/ocodista/javascript-event-loop-breaking-down-the-mystery-2c9f) to a Twitter thread explaining [who waits for the http request to finish](https://twitter.com/ocodista/status/1696684507917631841?s=20).\n\nIf you want, you can also access the mind map I created before writing this post by clicking [here](https://whimsical.com/node-async-CzpmdNE7HMzsp5uPDeJpve).\n\nNow, let's get to the point!\n\n## [](#how-node-handles-asynchronous-code)How Node Handles Asynchronous Code\n\nIn Node:\n\n*   All JavaScript code is executed in the main thread.\n*   The **libuv** library is responsible for handling I/O (In/Out) operations, i.e., **asynchronous** operations.\n*   By default, libuv provides 4 _worker threads_ for Node.js.\n    *   These threads will only be used when **blocking** asynchronous operations are performed, in which case they will block one of the libuv threads (which are OS threads) instead of the main Node execution thread.\n*   There are both blocking and non-blocking operations, and most of the current asynchronous operations are **non-blocking**.\n\n## [](#asynchronous-operations-what-are-they)Asynchronous Operations: What Are They?\n\nGenerally, there's confusion when it comes to asynchronous operations.\n\nMany believe it means something happens in the background, in parallel, at the same time, or in another thread.\n\nIn reality, an asynchronous operation is an operation that won't return now, but later.\n\nThey depend on communication with external agents, and these agents might not have an immediate response to your request.\n\nWe're talking about I/O (input/output) operations.\n\nExamples:\n\n*   **Reading a file**: data _leaves_ the disk and _enters_ the application.\n*   **Writing to a file**: data _leaves_ the application and _enters_ the disk.\n*   **Network Operations**\n    *   HTTP requests, for example.\n    *   The application **sends** an _http request_ to some server and **receives** the data.\n\n[![Node calls libuv, libuv calls syscalls, event loop runs on the main thread](https://res.cloudinary.com/practicaldev/image/fetch/s--0QglUT8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ve8g8hmkyilvezttqw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--0QglUT8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ve8g8hmkyilvezttqw.png)\n\n### [](#blocking-vs-nonblocking-asynchronous-operation)Blocking vs Non-Blocking Asynchronous Operation\n\nIn the modern world, people don't talk to each other most asynchronous operations are non-blocking.\n\nBut wait, does that mean:\n\n*   libuv provides 4 threads (_by default_).\n*   they \"take care of\" the **blocking** I/O operations.\n*   the vast majority of operations are **non-blocking**.\n\nSeems kind of useless, right?\n\n[![Libuv worker threads for blocking asynchronous ops](https://res.cloudinary.com/practicaldev/image/fetch/s--1eozXw4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch6qfruusrpzgmm8cyls.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--1eozXw4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch6qfruusrpzgmm8cyls.png)\n\nWith this question in mind, I decided to do some experiments.\n\n## [](#experiments-with-blocking-functions)Experiments with Blocking Functions\n\nFirst, I tested an asynchronous CPU-intensive function, one of the **rare** asynchronous **blocking** functions in Node.\n\nThe used code was as follows:  \n\n```javascript\n// index.js\nimport { pbkdf2 } from \"crypto\";\n\nconst TEN_MILLIONS = 1e7;\n\n// CPU-intensive asynchronous function\n// Goal: Block a worker thread\n// Original goal: Generate a passphrase\n// The third parameter is the number of iterations\n// In this example, we are passing 10 million\nfunction runSlowCryptoFunction(callback) {\n  pbkdf2(\"secret\", \"\n\nsalt\", TEN_MILLIONS, 64, \"sha512\", callback);\n}\n\n// Here we want to know how many worker threads libuv will use\nconsole.log(`Thread pool size is ${process.env.UV_THREADPOOL_SIZE}`);\n\nconst runAsyncBlockingOperations = () => {\n  const startDate = new Date();\n  const runAsyncBlockingOperation = (runIndex) => {\n    runSlowCryptoFunction(() => {\n      const ms = new Date() - startDate;\n      console.log(`Finished run ${runIndex} in ${ms/1000}s`);\n    });\n  }\n  runAsyncBlockingOperation(1);\n  runAsyncBlockingOperation(2);\n};\n\nrunAsyncBlockingOperations();\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nTo validate the operation, I ran the command:  \n\n```shell\nUV_THREADPOOL_SIZE=1 node index.js\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\n**IMPORTANT:**\n\n*   UV\\_THREADPOOL\\_SIZE: It's an environment variable that determines how many libuv _worker threads_ Node will start.\n\nThe result was:  \n\n```shell\nThread pool size is 1\nFinished run 1 in 3.063s\nFinished run 2 in 6.094s\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThat is, with only one thread, each execution took ~3 seconds, and they occurred sequentially. One after the other.\n\nNow, I decided to do the following test:  \n\n```shell\nUV_THREADPOOL_SIZE=2 node index.js\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd the result was:  \n\n```shell\nThread pool size is 2\nFinished run 2 in 3.225s\nFinished run 1 in 3.243s\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWith that, it's proven that LIBUV's _Worker Threads_ in Node.js handle blocking asynchronous operations.\n\nBut what about the **non-blocking** ones? If no one waits for them, how do they work?\n\nI decided to write another function to test it.\n\n### [](#experiments-with-nonblocking-functions)Experiments with Non-Blocking Functions\n\nThe _fetch_ function (native to Node) performs a non-blocking network asynchronous operation.\n\nWith the following code, I redid the test of the first experiment:  \n\n```javascript\n//non-blocking.js\n// Here we want to know how many worker threads libuv will use\nconsole.log(`Thread pool size is ${process.env.UV_THREADPOOL_SIZE}`);\n\nconst startDate = new Date();\nfetch(\"https://www.google.com\").then(() => {\n  const ms = new Date() - startDate;\n  console.log(`Fetch 1 returned in ${ms / 1000}s`);\n});\n\nfetch(\"https://www.google.com\").then(() => {\n  const ms = new Date() - startDate;\n  console.log(`Fetch 2 returned in ${ms / 1000}s`);\n});\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd I executed the script with the following command:  \n\n```shell\nUV_THREADPOOL_SIZE=1 node non-blocking.js\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThe result was:  \n\n```shell\nThread pool size is 1\nFetch 1 returned in 0.391s\nFetch 2 returned in 0.396s\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nSo, I decided to test with two threads, to see if anything changed:  \n\n```shell\nUV_THREADPOOL_SIZE=2 node non-blocking.js\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nAnd then:  \n\n```plaintext\nThread pool size is 2\nFetch 2 returned in 0.402s\nFetch 1 returned in 0.407s\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nWith this, I observed that:\n\n> Having more threads running in LIBUV does not help in the execution of non-blocking asynchronous operations.\n\nBut then, I questioned again, if no libuv thread is \"waiting\" for the request to return, how does this work?\n\nMy friend, that's when I fell into a gigantic hole of research and knowledge about the operation of:\n\n### [](#nonblocking-asynchronous-operations-and-os)Non-Blocking Asynchronous Operations and OS\n\nThe Operating System has evolved quite a bit over the years to deal with non-blocking I/O operations, this is done through _syscalls_, they are:\n\n*   **select/poll**: These are the traditional ways of dealing with non-blocking I/O and are generally considered less efficient.\n*   **IOCP**: Used in Windows for asynchronous operations.\n*   **kqueue**: A method for MacOS and BSD.\n*   **epoll**: Efficient and used in Linux. Unlike select, it is not limited by the number of FDs.\n*   **io\\_uring**: An evolution of epoll, bringing performance improvements and a queue-based approach.\n\nTo understand better, we need to dive into the details of non-blocking I/O operations.\n\n### [](#understanding-file-descriptors)Understanding File Descriptors\n\nTo explain non-blocking I/O, I need to quickly explain the concept of File Descriptors (FDs).\n\n#### [](#what-is-a-fd)What is a FD?\n\nIt's a numerical index of a table maintained by the _kernel_, where each record has:\n\n*   Resource type (such as file, socket, device).\n*   Current position of the file pointer.\n*   Permissions and flags, defining modes like read or write.\n*   Reference to the resource's data structure in the kernel.\n\nThey are fundamental for I/O management.\n\n#### [](#fd-and-nonblocking-io)FD and Non-Blocking I/O\n\nWhen initiating a non-blocking I/O operation, Linux associates an FD with it without interrupting (blocking) the process's execution.\n\nFor example:\n\nImagine you want to read the contents of a very large file.\n\n**Blocking approach**:\n\n*   The process calls the _read file_ function.\n*   The process waits while the OS reads the file's content.\n    *   The process is **blocked** until the OS finishes.\n\n**Non-blocking approach**:\n\n*   The process requests _asynchronous_ read.\n*   The OS starts reading the content and returns an FD to the process.\n*   The process isn't locked up and can do other things.\n*   Periodically, the process calls a _syscall_ to check if the reading is finished.\n\nThe process decides the mode of reading through the [fcntl](https://man7.org/linux/man-pages/man2/fcntl.2.html) function with the _O\\_NONBLOCK_ flag, but this is secondary at the moment.\n\n### [](#monitoring-fds-with-syscalls)Monitoring FDs with syscalls\n\nTo efficiently observe multiple FDs, OSs rely on some _syscalls_:\n\n#### [](#understanding-select)**Understanding select:**\n\n*   Receives a list of FDs.\n*   Blocks the process until one or more FDs are ready for the specified operation (read, write, exception).\n*   After the syscall returns, the program can iterate over the FDs to identify those ready for I/O.\n*   Uses a search algorithm that is O(n).\n    *   Inefficient, slow, tiresome with many FDs.\n\n#### [](#epoll)**Epoll**\n\nAn evolution of _select_, it uses a self-balancing tree to store the FDs, making access time almost constant, O(1).\n\nPretty fancy!\n\nHow it works:\n\n*   Create an epoll instance with `epoll_create`.\n*   Associate the FDs with this instance using `epoll_ctl`.\n*   Use `epoll_wait` to wait for activity on any of the FDs.\n*   Has a timeout parameter.\n    *   Extremely important and well utilized by the libuv _Event Loop_!\n\n[![Comparison of time between select and epoll](https://res.cloudinary.com/practicaldev/image/fetch/s--dfq-wfR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysxrok3wm49fk52xlgwv.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--dfq-wfR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysxrok3wm49fk52xlgwv.png)\n\n#### [](#iouring)**Io\\_uring**\n\nThis is a game-changer.\n\nWhile **epoll** significantly improved the performance of searching and handling FDs, io\\_uring rethinks the entire nature of I/O operations.\n\nAnd so, after understanding how it works, I wondered how nobody thought of this before!!!\n\nRecapping:\n\n*   **select**: Receives a list of FDs, stores them sequentially (like an array), and checks each one for changes or activity, with complexity O(n).\n*   **epoll**: Receives a list of FDs, stores them using a self-balancing tree, does not check each one individually, is more efficient, and does the same as **select** but with complexity O(1).\n\nHistorically, the process was responsible for iterating over the returned FDs to know which have finished or not.\n\n*   **io\\_uring**: What? Return a list? Do polling? Are you kidding? Ever heard of **queues**?\n\nIt works using two main queues, in the form of rings (hence the name io-**ring**).\n\n*   1 for submitting tasks.\n*   1 for completed tasks.\n\nSimple, right?\n\nThe process, when starting an I/O operation, **queues** the operation using the _io\\_uring_ structure.\n\nThen, instead of calling _select_ or _epoll_ and iterating over the returned FDs, the process can choose to be notified when an I/O operation is completed.\n\nPolling? No. Queues!\n\n### [](#conclusion)Conclusion\n\nWith this knowledge, I now understand precisely the path Node takes to perform an asynchronous operation.\n\nIf it's blocking:\n\n*   Executes the asynchronous operation using libuv.\n*   Adds it to a libuv _worker thread_.\n*   The _worker thread_ is blocked, waiting for the operation to finish.\n*   Once finished, the thread is responsible for placing the result in the _Event Loop_ in the MacroTasks queue.\n*   The callback is executed on the main thread.\n\nIf it's non-blocking:\n\n*   Executes the asynchronous operation using libuv.\n*   Libuv performs a non-blocking I/O _syscall_.\n*   Performs _polling_ with the FDs until they resolve (epoll).\n*   From version 20.3.0, uses io\\_uring.\n    *   Queue-based approach for submission/completed operations.\n*   Upon receiving the event of operation completion:\n    *   libuv takes care of executing the callback on the main thread.\n\n**Author**: [Caio Borghi](https://dev.to/ocodista)",
    "shortDescription": "Introduction How Node Handles Asynchronous Code  Asynchronous Operations: What Are They?   Blocking...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Inside Node.js: Exploring Asynchronous I/O\">\n<meta property=\"og:description\" content=\"Introduction How Node Handles Asynchronous Code  Asynchronous Operations: What Are They?   Blocking...\">\n<meta name=\"keywords\" content=\"node, javascript, programming, linux, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xgpHsBn6--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6u22cvp2glpv8bk198k.jpeg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Inside-Node.js:-Exploring-Asynchronous-IO",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6u22cvp2glpv8bk198k.jpeg"
  },
  {
    "title": "Why Angular Will not Survive 2024",
    "url": "https://dev.to/kalashin1/why-angular-will-not-survive-2024-2lj3",
    "tags": [
      "javascript",
      "angular",
      "node",
      "frontend"
    ],
    "published_at": 1703675018000,
    "markdownContent": "Angular will surely drift into oblivion before the end of 2024 if all of it isn't already dead. I know some people are going to read the above and be like you don't know what Angular is about. But I'm going to ask you this when was the last time you used Angular for a new project? Except you have sold your soul to Google and decided to stick with Angular then I'm going to say that your answer was \"it's been a long time\".\n\nThe die-hard Angular fans in the room are also going to come back with how Angular is being used across large teams and on some complex applications. But I'm going to tell you that there's nothing that you can do with Angular that you can't achieve with other frameworks with much less effort than in Angular. In today's post, I'm going to go over five solid reasons why I believe Angular will be dead to developers before the end of 2024.\n\n• Typescript Barrier  \n• Not Beginner friendly  \n• Bundle Size  \n• Too much restrictions  \n• It's just too Overpowered  \n• Fierce competition\n\n### [](#typescript-barrier)Typescript Barrier\n\nFrom the moment Angular adopted a Typescript first approach to building UIs it marked the beginning of the end. As good as this decision may seem it comes with some potential drawbacks. Yes, we get the benefit of type checking in our IDE but the fact that you have to learn Typescript first before you can start using Angular introduces a major barrier to entry for some developers.\n\nMost developers would be okay with just learning and using Javascript and trust me telling them that they have to go learn how to use a superset of a language they barely understand will not yield any positive results. Many developers shy away from angular because of Typescript. It's only the experienced 10X developers who see Typescript and Angular as a win-win. How convenient it would be for newbies if you could use Angular with Javascript then maybe Angular would have been adopted much more than it currently is.\n\n### [](#angular-is-not-beginnerfriendly)Angular is not beginner-friendly\n\nAngular do not like beginners and newbies and it doesn't deal any kindly with them. You see Angular was designed to be used on complex web applications and as such it comes fully fledged with everything you need to build and deploy a modern web app. However, all this is not sold to the developer in a way that is simple to digest, and most of the time you need to make use of the features Angular provides when building an app so this demands that you have a strong command over the framework or else you're not going to have a great experience. Angular needs to give more consideration to making Angular more friendly to beginners and that will go a long way in seeing more adoption.\n\n### [](#bundle-size)Bundle Size\n\nAngular has an unholy bundle size. I believe that it was for this reason that devs came up with solutions like Astro. I once built a very simple app with Angular. It had just two pages. One for showing a search bar where users would search for what they want from GitHub then another page for showing search results. When I was done and tried to deploy to Vercel, oh my God it was so unfortunate because I had issues building and deploying the app because of bundle size exceeded the threshold.\n\nThis was so frustrating because I spent at least three days doing that. I had to look for all the things that made the bundle size so large. It was so frustrating I had to deploy with Codesandbox instead. My point here is that when you compare the Bundle Size for Angular to the Bundle Size for other frameworks you'll observe that Angular always has the highest. I'm in support of shipping as much Javascript as possible to the user but Angular is high on something because what the hell is 5MB for bundle size??\n\n### [](#too-much-restrictions)Too much restrictions\n\nAngular is opinionated about the way your application should be structured and the patterns you can employ when building your UI, with a heavy emphasis on an Object-oriented approach. Hold on a second but what if I just prefer to work with functions? And Angular is like maybe you can try other frameworks, we don't do that here. Enforcing a particular application structure will make things much more organized and standardized but this is only good if you don't have a good understanding of folder structure and popular development patterns.\n\nThe more you realize that there are different ways to structure your project you will not find it amazing to be forced into a particular application structure and you will feel like you're taped to a a chair because there are lots of ways you could express yourself but you're just stuck with one even if it's something you don't like or understand. Most developers would rather not deal with this situation at all so they'd be like I'm on to the other guys.\n\n### [](#its-just-too-overpowered)It's just too Overpowered\n\nSomething about Angular, it's just too much for most jobs around. Most of the time UIs we build tend to be very simple and straight to the point. Very rarely do you see people building something so overly complex. Angular on the other hand is a robust, fully-fledged, and out-of-the-box solution for building UIs. With a full-blown CLI, Built-In router, out-of-the-box state management solution, and Dependency Injection for your services.\n\nAll these are great features that could enable you to build the next big thing in Javascript. But if you just want to build something for your client or customers then 100 percent you'd agree with me your app doesn't need all those features or at least not as complicated as Angular make them. This is what happens when you're overqualified for the Job and nobody wants to hire you because they can't pay you.\n\n### [](#fierce-competition)Fierce competition\n\nThe Javascript UI frameworks/library ecosystem is always growing and there's no shortage of options. There are newer frameworks that offer more performance with much less stress and complication. you can now use Typescript on almost all Javascript UI frameworks so that Typescript advantage is no more. Other frameworks are making it easier than ever to build UI and they are growing at a rate that Angular cannot keep up with.\n\nSignals were recently introduced to Angular but this will do little if anything to slow the decline of Angular. React, and Vue all have their implementation of Signals so that is just a ploy to make the framework appealing to existing users.\n\nWhat's your take on the current state of Angular, do you think that Angular will not survive 2024 or do you think Angular is going to make a big comeback? Do you think that other frameworks out there are better than Angular? Or Angular is the undisputed T-Rex in the room? Let me know your thoughts on all of the above and what you think of the article via the comments section.\n\nIf you are looking at learning React then you can check out my [YouTube channel](https://youtube.com/@netcreed?si=yf63gXAtyUbHGFt9) where [I have a course on React for Javascript developers](https://youtube.com/playlist?list=PLQOQaFJExIyOjLpBBSJAgGnLYUL3yjAUr&si=qTKqjmifaqohXFnd) with over 13 videos on getting started with building UIs with React, and another [7 part series on React Hooks](https://www.youtube.com/playlist?list=PLQOQaFJExIyMzXZTyA23G344KZ_REk1Ry), well what are you waiting for? Check it out.\n\n**Author**: [Kinanee Samson](https://dev.to/kalashin1)",
    "shortDescription": "Angular will surely drift into oblivion before the end of 2024 if all of it isn't already dead. I...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Why Angular Will not Survive 2024\">\n<meta property=\"og:description\" content=\"Angular will surely drift into oblivion before the end of 2024 if all of it isn't already dead. I...\">\n<meta name=\"keywords\" content=\"javascript, angular, node, frontend, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WHX3P4Pw--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mog92ue47458lkmcasv.jpg\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Why-Angular-Will-not-Survive-2024",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mog92ue47458lkmcasv.jpg"
  },
  {
    "title": "Is Javascript Object.groupBy() worth the hype? let's find out",
    "url": "https://dev.to/svidlak/is-javascript-objectgroupby-worth-the-hype-lets-find-out-48lc",
    "tags": [
      "node",
      "javascript",
      "benchmark"
    ],
    "published_at": 1702752148000,
    "markdownContent": "With the upcoming release of NodeJS 21, we're getting an exciting new method that should make our object groupings more straightforward: `Object.groupBy()`.\n\nAs the name of the method suggests, this method accepts an array and groups it by a parameter via a callback function. The use of this new method looks like this:  \n\n```plaintext\nconst people =[\n  {\"first_name\":\"Dotti\",\"birth_year\":1985},\n  {\"first_name\":\"Gratia\",\"birth_year\":1992},\n  {\"first_name\":\"Robert\",\"birth_year\":1985},\n  {\"last_name\":\"Versey\",\"birth_year\":1992}\n]\n\nconst peopleGroupedByBirthYear = Object.groupBy(people, (person) => person.birth_year)\n\nconsole.log(peopleGroupedByBirthYear)\n/*\n{\n  \"1985\":[\n    {\"first_name\":\"Dotti\",\"birth_year\":1985},\n    {\"first_name\":\"Robert\",\"birth_year\":1985}\n  ],\n  \"1992\":[\n    {\"first_name\":\"Gratia\",\"birth_year\":1992},\n    {\"last_name\":\"Versey\",\"birth_year\":1992}\n  ]\n}\n*/\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nBut does this method bring us more value except for syntactic sugar? Does it improve runtime and increase performance? Let's take a deeper look.\n\n## [](#technicalities)Technicalities\n\nTo test this new functionality with different sets and data scale sizes, I've prepared datasets with **1k users**, **10k users**, **100k users**, and **1m users**. Each user within those datasets has been given a birth year between 1900 and 2000 to make the groups a bit larger.\n\nFor the benchmark, I used mostly common loops and array methods, to see which one will shine the brightest.\n\nAdditionally, every function underwent multiple individual tests across various datasets on a **Docker container** equipped with a **single-core CPU and 512 MB of RAM**. This setup ensured that my machine's performance did not influence the results. The functions were repeatedly tested to calculate a cumulative average runtime. Now, let's explore some charts based on these evaluations.\n\n[![1k users results](https://res.cloudinary.com/practicaldev/image/fetch/s--WSU9h-tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsvu4mrb1tk5gdp62q54.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--WSU9h-tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsvu4mrb1tk5gdp62q54.png)\n\nOn a dataset with 1k users, we can see that `Object.groupBy()` is indeed the faster one, surpassing other implementations for group data (which is pretty neat, to be honest). I like it, but will it outstand larger datasets? Let's find out:\n\n[![10k users result](https://res.cloudinary.com/practicaldev/image/fetch/s--4HsvumV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dinttoww2tivh7eh6k1j.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--4HsvumV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dinttoww2tivh7eh6k1j.png)\n\nAs for 10k users, `Object.groupBy()` starts really to shine, and it beats other iterations and functions by around 50% on average (really nice!), but is it **blazingly fast**?\n\n[![100k users result](https://res.cloudinary.com/practicaldev/image/fetch/s--LfBtBM35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l10xmbwfs8sn9h1v3r95.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--LfBtBM35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l10xmbwfs8sn9h1v3r95.png)\n\nOn a dataset with 100k users, we're starting to see that `Object.groupBy()` is starting to run out of fuel, but it still outshines the other functionalities and is superior to other implementations! But is it going to win the race with a dataset of 1 million users?\n\n[![1m users results](https://res.cloudinary.com/practicaldev/image/fetch/s--jOgCZlW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2270skz079yeyxx5nlew.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--jOgCZlW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2270skz079yeyxx5nlew.png)\n\nOuch, it seems that `Object.groupBy()` is starting to fall behind when it comes to larger datasets, with Reduce taking its place. Why is that what you're asking? Well, that's for another article.\n\n## [](#conclusion)Conclusion\n\n`Object.groupBy()` looks to be a promising new (_and almost blazingly fast_) functionality for small to medium-sized datasets, which is neat! For the average use case, you will find this new feature to improve your existing code base. As for larger datasets, that's not the case.\n\nTell me what you think in the comments below :)\n\n[https://github.com/svidlak/groupby-benchmark](https://github.com/svidlak/groupby-benchmark)  \n(1million file is zipped because it exceeds github's filesize policy)\n\n**Author**: [Max Svidlo](https://dev.to/svidlak)",
    "shortDescription": "With the upcoming release of NodeJS 21, we're getting an exciting new method that should make our...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Is Javascript Object.groupBy() worth the hype? let's find out\">\n<meta property=\"og:description\" content=\"With the upcoming release of NodeJS 21, we're getting an exciting new method that should make our...\">\n<meta name=\"keywords\" content=\"node, javascript, benchmark, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--n_69c3iA--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kj5tbdrch3otz7biy84.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Is-Javascript-Object.groupBy()-worth-the-hype-let's-find-out",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kj5tbdrch3otz7biy84.png"
  },
  {
    "title": "Getting Started With Nest.js",
    "url": "https://dev.to/shameel/getting-started-with-nestjs-cl1",
    "tags": [
      "nestjs",
      "node",
      "javascript",
      "typescript"
    ],
    "published_at": 1703517301000,
    "markdownContent": "## [](#introduction)Introduction\n\nHello everyone, we are starting a series where we will be learning about Nest.js as a framework, understanding fundamental concepts and getting down to its depth.\n\nPlease find video explanation below ↓\n\n## [](#nodejs-gt-expressjs-gt-nestjs)Node.js -> Express.js -> Nest.js\n\nLets discover how we arrived at nest.js.\n\nBy no means, after the arrival of nest.js, does node.js or express.js become obsolete.\n\nNode.js in itself can be used in variety of applications like scripting, automation and stuff and Express.js is also being utilized in industry, on top of which great applications have been built and are currently in use.\n\n### [](#nodejs)Node.js\n\nInitially, JavaScript used to execute only in Web Browser.\n\nNode.js came with a **BANG** and allowed JS to be written and executed at server side.\n\nNote: It's not a library or framework of JS but it's a **RUNTIME ENVIRONMENT**!\n\nHowever, in node.js, we had to write a lot of code for a server to make simple CRUD applications.\n\nThus, came: Express.js\n\n### [](#expressjs)Express.js\n\nIt is an unopinionated, minimalist framework based on node.js\n\nIt solved extra over-code which we used to do it in node.js but it is **unopinionated** which means anyone can use its own type of structure of however he wishes it to be. It does not provide any sort of strictness. Anyone can do whatever they want to do with it and however they want to do with it. No any design pattern is enforced. Just do as you like.\n\n### [](#nestjs)Nest.js\n\nNest.js uses Express.js as underlying technology which is built on top of Node.js.\n\nIt provides a proper structure to do stuff, implying design patterns, and a proper way in modular usage for Controllers and Services. You have to follow a standard to make things work. So, if someone has a knowledge of nest.js.\n\nPS. Nest.js also allows you to use Fastify as underlying tech if you don't want to use express.js.\n\n### [](#problems-tackled)Problems Tackled\n\nEach of these solved their own problems. Node.js allowed JS to be written on server. Express.js removed extra code and allowed ease in development and Nest.js restricted developers to use good coding practices.\n\n## [](#prerequisite)Prerequisite\n\nYou should have knowledge of the following before moving forward to the Nest.js series:\n\n*   JavaScript\n*   TypeScript\n*   Node.js\n*   Client-Server Architecture\n*   Express.js (Somewhat)\n\n## [](#installing-nestjs)Installing Nest.js\n\nYou should have node.js installed. You can verify it with running this in CMD:  \n\n```javascript\nnode -v\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nOpen Command Prompt in Administrative mode and run this:  \n\n```javascript\nnpm i -g @nestjs/cli\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nThis will install nest.js globally in your system.\n\n## [](#creating-nestjs-project)Creating Nest.js Project\n\nAfter that you can create project with this:  \n\n```javascript\nnest new <project-name>\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nFor myself, I could do it like this:  \n\n```javascript\nnest new shameel-project\n\n```\n\nEnter fullscreen mode Exit fullscreen mode\n\nYou will be provided with these three package managers:\n\n*   npm\n*   yarn\n*   pnpm\n\nI chose `npm` and moved forward.\n\nWait for a while and then Nest.js project will be created.\n\n## [](#whats-next)What's Next?\n\nWe will be discovering and understanding the file structure and what the file means which have been created by default from executing above command.\n\nStay tuned! =)\n\nFollow me for more such content:  \nYouTube: [https://www.youtube.com/@ShameelUddin123](https://www.youtube.com/@ShameelUddin123)  \nLinkedIn: [https://www.linkedin.com/in/shameeluddin/](https://www.linkedin.com/in/shameeluddin/)  \nGithub: [https://github.com/Shameel123](https://github.com/Shameel123)\n\n**Author**: [Shameel Uddin](https://dev.to/shameel)",
    "shortDescription": "Introduction   Hello everyone, we are starting a series where we will be learning about...",
    "htmlMeta": "<meta property=\"og:title\" content=\"Getting Started With Nest.js\">\n<meta property=\"og:description\" content=\"Introduction   Hello everyone, we are starting a series where we will be learning about...\">\n<meta name=\"keywords\" content=\"nestjs, node, javascript, typescript, software, coding, development, engineering, inclusive, community\">\n<meta property=\"og:image\" content=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Bh71pbxz--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6kpwhkn9v8beav7zz0g.png\">\n<meta property=\"og:type\" content=\"article\">",
    "slug": "Getting-Started-With-Nest.js",
    "displayImage": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6kpwhkn9v8beav7zz0g.png"
  }
]